
scp_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc8  08006fc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd0  08006fd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027cc  20000074  0800704c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002840  0800704c  00022840  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132c1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae7  00000000  00000000  0003335d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00035e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00036d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004923  00000000  00000000  00037b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001133a  00000000  00000000  0003c4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087aa2  00000000  00000000  0004d7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d528f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af8  00000000  00000000  000d52e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006b5c 	.word	0x08006b5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08006b5c 	.word	0x08006b5c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <IsValid>:
STATIC uint16_t Crc16( uint8_t *crc_arr, uint8_t crc_num);
STATIC bool CheckType(uint8_t _type);
STATIC bool CheckMPU(uint8_t _mpu);
STATIC bool CheckRegisterAddr(uint16_t _addr);
#endif
STATIC enum Error_code     IsValid(Header* _header, uint8_t* _buffer, size_t _bufferSize, int _frameSize) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
 80004c8:	603b      	str	r3, [r7, #0]

    _header->errorCode = no_error;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2200      	movs	r2, #0
 80004ce:	721a      	strb	r2, [r3, #8]
    if(!_buffer || _bufferSize < 6)
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <IsValid+0x20>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b05      	cmp	r3, #5
 80004da:	d801      	bhi.n	80004e0 <IsValid+0x24>
        return incorrect_data_length;
 80004dc:	2305      	movs	r3, #5
 80004de:	e085      	b.n	80005ec <IsValid+0x130>

    if(!CheckType(_header->type))
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	789b      	ldrb	r3, [r3, #2]
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fca1 	bl	8000e2c <CheckType>
 80004ea:	0003      	movs	r3, r0
 80004ec:	001a      	movs	r2, r3
 80004ee:	2301      	movs	r3, #1
 80004f0:	4053      	eors	r3, r2
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <IsValid+0x42>
        _header->errorCode = incorrect_type;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2202      	movs	r2, #2
 80004fc:	721a      	strb	r2, [r3, #8]

    if(!CheckMPU(_header->cmd0))
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	78db      	ldrb	r3, [r3, #3]
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fca3 	bl	8000e4e <CheckMPU>
 8000508:	0003      	movs	r3, r0
 800050a:	001a      	movs	r2, r3
 800050c:	2301      	movs	r3, #1
 800050e:	4053      	eors	r3, r2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <IsValid+0x60>
        _header->errorCode = incorrect_mpu_address;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2203      	movs	r2, #3
 800051a:	721a      	strb	r2, [r3, #8]

    if(!CheckRegisterAddr(_header->cmd1))
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	889b      	ldrh	r3, [r3, #4]
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fca9 	bl	8000e78 <CheckRegisterAddr>
 8000526:	0003      	movs	r3, r0
 8000528:	001a      	movs	r2, r3
 800052a:	2301      	movs	r3, #1
 800052c:	4053      	eors	r3, r2
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <IsValid+0x7e>
        _header->errorCode = incorrect_register_address;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2204      	movs	r2, #4
 8000538:	721a      	strb	r2, [r3, #8]

    uint16_t crc = _buffer[_header->len + SOF_SIZE + LEN_SIZE];
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	3304      	adds	r3, #4
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	18d3      	adds	r3, r2, r3
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	2016      	movs	r0, #22
 8000548:	183b      	adds	r3, r7, r0
 800054a:	801a      	strh	r2, [r3, #0]
    crc += _buffer[_header->len + 1 + SOF_SIZE + LEN_SIZE] << 8;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	3305      	adds	r3, #5
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	18d3      	adds	r3, r2, r3
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	b299      	uxth	r1, r3
 800055e:	183b      	adds	r3, r7, r0
 8000560:	183a      	adds	r2, r7, r0
 8000562:	8812      	ldrh	r2, [r2, #0]
 8000564:	188a      	adds	r2, r1, r2
 8000566:	801a      	strh	r2, [r3, #0]


    if( _bufferSize < _header->len)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	001a      	movs	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4293      	cmp	r3, r2
 8000572:	d201      	bcs.n	8000578 <IsValid+0xbc>
        return incorrect_data_length;
 8000574:	2305      	movs	r3, #5
 8000576:	e039      	b.n	80005ec <IsValid+0x130>

    if (crc != Crc16(_buffer + SOF_SIZE, _header->len + LEN_SIZE))
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c9a      	adds	r2, r3, #2
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	3302      	adds	r3, #2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	0019      	movs	r1, r3
 8000588:	0010      	movs	r0, r2
 800058a:	f000 fc1d 	bl	8000dc8 <Crc16>
 800058e:	0003      	movs	r3, r0
 8000590:	001a      	movs	r2, r3
 8000592:	2316      	movs	r3, #22
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	4293      	cmp	r3, r2
 800059a:	d002      	beq.n	80005a2 <IsValid+0xe6>
        _header->errorCode = slave_data_integrity;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2207      	movs	r2, #7
 80005a0:	721a      	strb	r2, [r3, #8]

    if(_header->mode != finish)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	7a5b      	ldrb	r3, [r3, #9]
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d002      	beq.n	80005b0 <IsValid+0xf4>
        _header->errorCode = incorrect_frame_format;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2201      	movs	r2, #1
 80005ae:	721a      	strb	r2, [r3, #8]


    if(_header->errorCode != no_error)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	7a1b      	ldrb	r3, [r3, #8]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d008      	beq.n	80005ca <IsValid+0x10e>
        SET_1ST_BIT(_header->type);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	4252      	negs	r2, r2
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	709a      	strb	r2, [r3, #2]
 80005c8:	e006      	b.n	80005d8 <IsValid+0x11c>
    else
        UNSET_1ST_BIT(_header->type);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	227f      	movs	r2, #127	; 0x7f
 80005d0:	4013      	ands	r3, r2
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	709a      	strb	r2, [r3, #2]

    if( _frameSize < (_header->len + 6))
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	3305      	adds	r3, #5
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dc01      	bgt.n	80005e8 <IsValid+0x12c>
        return incorrect_frame_format;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e001      	b.n	80005ec <IsValid+0x130>

    return _header->errorCode;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	7a1b      	ldrb	r3, [r3, #8]
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b006      	add	sp, #24
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <WriteData>:
STATIC bool WriteData(Header* _header, uint8_t* _buffer, uint8_t* _data, size_t _dataLen) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
    if(_dataLen > (MAX_PROTOCOL_LEN - HEADER_SIZE) || !_data || !_buffer)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <WriteData+0x6c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d805      	bhi.n	8000616 <WriteData+0x22>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <WriteData+0x22>
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <WriteData+0x26>
        return false;
 8000616:	2300      	movs	r3, #0
 8000618:	e01d      	b.n	8000656 <WriteData+0x62>

    for(int i = 0; i < _dataLen; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e00b      	b.n	8000638 <WriteData+0x44>
        _buffer[i + DATA_START_PLACE] = _data[i];
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	18d2      	adds	r2, r2, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	330a      	adds	r3, #10
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	18cb      	adds	r3, r1, r3
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < _dataLen; i++)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d8ef      	bhi.n	8000620 <WriteData+0x2c>
    _header->cmd2 = _dataLen;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b29a      	uxth	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	80da      	strh	r2, [r3, #6]
    _header->len = _dataLen + 6;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b29b      	uxth	r3, r3
 800064c:	3306      	adds	r3, #6
 800064e:	b29a      	uxth	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	801a      	strh	r2, [r3, #0]
    return true;
 8000654:	2301      	movs	r3, #1
}
 8000656:	0018      	movs	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	b006      	add	sp, #24
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	000003fa 	.word	0x000003fa

08000664 <Serialize>:
STATIC uint8_t* Serialize(Header* _header, uint8_t* _buffer) {
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
    if(!_buffer)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <Serialize+0x14>
        return NULL;
 8000674:	2300      	movs	r3, #0
 8000676:	e083      	b.n	8000780 <Serialize+0x11c>

    //SOF
    _buffer[0] = SOF & 0xff;//0xAA
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	22aa      	movs	r2, #170	; 0xaa
 800067c:	701a      	strb	r2, [r3, #0]
    _buffer[1] = SOF >> 8;//0x55
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	2255      	movs	r2, #85	; 0x55
 8000684:	701a      	strb	r2, [r3, #0]

    //Payload
    //Header
    _buffer[4] = _header->type;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	3304      	adds	r3, #4
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7892      	ldrb	r2, [r2, #2]
 800068e:	701a      	strb	r2, [r3, #0]
    _buffer[5] = _header->cmd0;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	3305      	adds	r3, #5
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	78d2      	ldrb	r2, [r2, #3]
 8000698:	701a      	strb	r2, [r3, #0]
    _buffer[6] = _header->cmd1 & 0xff;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	889a      	ldrh	r2, [r3, #4]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	3306      	adds	r3, #6
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	701a      	strb	r2, [r3, #0]
    _buffer[7] = _header->cmd1 >> 8;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	889b      	ldrh	r3, [r3, #4]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	3307      	adds	r3, #7
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	701a      	strb	r2, [r3, #0]

    if(_header->errorCode == no_error) {
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	7a1b      	ldrb	r3, [r3, #8]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10e      	bne.n	80006dc <Serialize+0x78>

        _buffer[8] = _header->cmd2 & 0xff;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	88da      	ldrh	r2, [r3, #6]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	3308      	adds	r3, #8
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	701a      	strb	r2, [r3, #0]
        _buffer[9] = _header->cmd2 >> 8;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	88db      	ldrh	r3, [r3, #6]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	3309      	adds	r3, #9
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e017      	b.n	800070c <Serialize+0xa8>
    } else {
        _header->type |= 0x80;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	789b      	ldrb	r3, [r3, #2]
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	4252      	negs	r2, r2
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	709a      	strb	r2, [r3, #2]
        _header->cmd2 = 1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2201      	movs	r2, #1
 80006f0:	80da      	strh	r2, [r3, #6]
        _buffer[8] = 0x01;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	3308      	adds	r3, #8
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
        _buffer[9] = 0x00;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	3309      	adds	r3, #9
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
        _buffer[10] = _header->errorCode;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	330a      	adds	r3, #10
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	7a12      	ldrb	r2, [r2, #8]
 800070a:	701a      	strb	r2, [r3, #0]
    }
    _buffer[2] = (_header->cmd2 + HEADER_SIZE) & 0xff;//lsb
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	88db      	ldrh	r3, [r3, #6]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	3302      	adds	r3, #2
 8000716:	3206      	adds	r2, #6
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	701a      	strb	r2, [r3, #0]
    _buffer[3] = (_header->cmd2 + HEADER_SIZE) >> 8; //msb
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	88db      	ldrh	r3, [r3, #6]
 8000720:	3306      	adds	r3, #6
 8000722:	121a      	asrs	r2, r3, #8
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	3303      	adds	r3, #3
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	701a      	strb	r2, [r3, #0]
    _header->len = _header->cmd2 + HEADER_SIZE;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	88db      	ldrh	r3, [r3, #6]
 8000730:	3306      	adds	r3, #6
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	801a      	strh	r2, [r3, #0]
    uint16_t crc = Crc16(_buffer + SOF_SIZE, _header->cmd2 + HEADER_SIZE + LEN_SIZE);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	1c9a      	adds	r2, r3, #2
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	88db      	ldrh	r3, [r3, #6]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3308      	adds	r3, #8
 8000744:	b2db      	uxtb	r3, r3
 8000746:	250e      	movs	r5, #14
 8000748:	197c      	adds	r4, r7, r5
 800074a:	0019      	movs	r1, r3
 800074c:	0010      	movs	r0, r2
 800074e:	f000 fb3b 	bl	8000dc8 <Crc16>
 8000752:	0003      	movs	r3, r0
 8000754:	8023      	strh	r3, [r4, #0]
    _buffer[_header->len + SOF_SIZE + LEN_SIZE] = crc & 0xff;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	18d3      	adds	r3, r2, r3
 8000760:	197a      	adds	r2, r7, r5
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	701a      	strb	r2, [r3, #0]
    _buffer[_header->len + SOF_SIZE + LEN_SIZE + 1] = crc >> 8 ;
 8000768:	197b      	adds	r3, r7, r5
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	b299      	uxth	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	3305      	adds	r3, #5
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	b2ca      	uxtb	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]

    return _buffer;
 800077e:	683b      	ldr	r3, [r7, #0]
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bdb0      	pop	{r4, r5, r7, pc}

08000788 <DeserializePayload>:
STATIC void     DeserializePayload(Header* _header, uint8_t* _buffer, uint8_t _byte, int* _frameSize) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	701a      	strb	r2, [r3, #0]
    switch (_header->mode) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	7a5b      	ldrb	r3, [r3, #9]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d002      	beq.n	80007a6 <DeserializePayload+0x1e>
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d055      	beq.n	8000850 <DeserializePayload+0xc8>
        case data: {
                _buffer[*_frameSize] = _byte;
                (*_frameSize)++;
        }  break;
    }
}
 80007a4:	e062      	b.n	800086c <DeserializePayload+0xe4>
            switch (*_frameSize) {
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3b04      	subs	r3, #4
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d832      	bhi.n	8000816 <DeserializePayload+0x8e>
 80007b0:	009a      	lsls	r2, r3, #2
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <DeserializePayload+0xec>)
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	469f      	mov	pc, r3
                    _header->type = _byte;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	1dfa      	adds	r2, r7, #7
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	709a      	strb	r2, [r3, #2]
                    _header->cmd0 = _byte;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	1dfa      	adds	r2, r7, #7
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	70da      	strb	r2, [r3, #3]
                    _header->cmd1 = _byte;
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	809a      	strh	r2, [r3, #4]
                    _header->cmd1 =( _byte << 8) + (_header->cmd1 & 0xFF);
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b29a      	uxth	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	889b      	ldrh	r3, [r3, #4]
 80007e2:	21ff      	movs	r1, #255	; 0xff
 80007e4:	400b      	ands	r3, r1
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	809a      	strh	r2, [r3, #4]
                    _header->cmd2 = _byte;
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	80da      	strh	r2, [r3, #6]
                    _buffer[*_frameSize] = _byte;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	001a      	movs	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	189b      	adds	r3, r3, r2
 8000804:	1dfa      	adds	r2, r7, #7
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	701a      	strb	r2, [r3, #0]
                    (*_frameSize)++;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	601a      	str	r2, [r3, #0]
                    break;
 8000814:	e01b      	b.n	800084e <DeserializePayload+0xc6>
                    _header->cmd2 += _byte << 8;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	88da      	ldrh	r2, [r3, #6]
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b29b      	uxth	r3, r3
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	b29a      	uxth	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	80da      	strh	r2, [r3, #6]
                    _buffer[*_frameSize] = _byte;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	001a      	movs	r2, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	189b      	adds	r3, r3, r2
 8000836:	1dfa      	adds	r2, r7, #7
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	701a      	strb	r2, [r3, #0]
                    (*_frameSize)++;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	601a      	str	r2, [r3, #0]
                    _header->mode = data;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2204      	movs	r2, #4
 800084a:	725a      	strb	r2, [r3, #9]
                    break;
 800084c:	46c0      	nop			; (mov r8, r8)
        }  break;
 800084e:	e00d      	b.n	800086c <DeserializePayload+0xe4>
                _buffer[*_frameSize] = _byte;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	189b      	adds	r3, r3, r2
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	701a      	strb	r2, [r3, #0]
                (*_frameSize)++;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	601a      	str	r2, [r3, #0]
        }  break;
 800086a:	46c0      	nop			; (mov r8, r8)
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08006e04 	.word	0x08006e04

08000878 <DeserializeFrame>:
STATIC void     DeserializeFrame(Header* _header, uint8_t* _buffer, uint8_t _byte, int* _frameSize) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	701a      	strb	r2, [r3, #0]
    switch (_header->mode) {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	7a5b      	ldrb	r3, [r3, #9]
 800088c:	2b06      	cmp	r3, #6
 800088e:	d900      	bls.n	8000892 <DeserializeFrame+0x1a>
 8000890:	e0a8      	b.n	80009e4 <DeserializeFrame+0x16c>
 8000892:	009a      	lsls	r2, r3, #2
 8000894:	4b64      	ldr	r3, [pc, #400]	; (8000a28 <DeserializeFrame+0x1b0>)
 8000896:	18d3      	adds	r3, r2, r3
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	469f      	mov	pc, r3
        case empty: {
            _header->errorCode = no_error;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2200      	movs	r2, #0
 80008a0:	721a      	strb	r2, [r3, #8]
            if(_byte == (SOF & 0xff)) {
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2baa      	cmp	r3, #170	; 0xaa
 80008a8:	d000      	beq.n	80008ac <DeserializeFrame+0x34>
 80008aa:	e0b7      	b.n	8000a1c <DeserializeFrame+0x1a4>
                _header->mode = sof;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2201      	movs	r2, #1
 80008b0:	725a      	strb	r2, [r3, #9]
                *_frameSize = 1;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
                _buffer[0] = _byte;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	701a      	strb	r2, [r3, #0]
            }
        }  break;
 80008c0:	e0ac      	b.n	8000a1c <DeserializeFrame+0x1a4>
        case sof: {
            _header->errorCode = incorrect_frame_format;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2201      	movs	r2, #1
 80008c6:	721a      	strb	r2, [r3, #8]
            if(_byte == (SOF >> 8)) {
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b55      	cmp	r3, #85	; 0x55
 80008ce:	d110      	bne.n	80008f2 <DeserializeFrame+0x7a>
                _header->mode = len;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2202      	movs	r2, #2
 80008d4:	725a      	strb	r2, [r3, #9]
                _buffer[*_frameSize] = _byte;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	001a      	movs	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	189b      	adds	r3, r3, r2
 80008e0:	1dfa      	adds	r2, r7, #7
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	701a      	strb	r2, [r3, #0]
                (*_frameSize)++;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	601a      	str	r2, [r3, #0]
            } else {
                _header->mode = empty;
                *_frameSize = 0;
            }
        }  break;
 80008f0:	e095      	b.n	8000a1e <DeserializeFrame+0x1a6>
                _header->mode = empty;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2200      	movs	r2, #0
 80008f6:	725a      	strb	r2, [r3, #9]
                *_frameSize = 0;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
        }  break;
 80008fe:	e08e      	b.n	8000a1e <DeserializeFrame+0x1a6>
        case len: {
            if(*_frameSize == SOF_SIZE) {
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d112      	bne.n	800092e <DeserializeFrame+0xb6>
                _buffer[*_frameSize] = _byte;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	189b      	adds	r3, r3, r2
 8000912:	1dfa      	adds	r2, r7, #7
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	701a      	strb	r2, [r3, #0]
                (*_frameSize)++;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	601a      	str	r2, [r3, #0]
                _header->len = _byte;
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b29a      	uxth	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	801a      	strh	r2, [r3, #0]
                _buffer[*_frameSize] = _byte;
                (*_frameSize)++;
                _header->mode = header;
                _header->len += _byte << 8;
            }
        }  break;
 800092c:	e077      	b.n	8000a1e <DeserializeFrame+0x1a6>
                _buffer[*_frameSize] = _byte;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	001a      	movs	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	189b      	adds	r3, r3, r2
 8000938:	1dfa      	adds	r2, r7, #7
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	701a      	strb	r2, [r3, #0]
                (*_frameSize)++;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	601a      	str	r2, [r3, #0]
                _header->mode = header;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2203      	movs	r2, #3
 800094c:	725a      	strb	r2, [r3, #9]
                _header->len += _byte << 8;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	881a      	ldrh	r2, [r3, #0]
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b29b      	uxth	r3, r3
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b29b      	uxth	r3, r3
 800095c:	18d3      	adds	r3, r2, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	801a      	strh	r2, [r3, #0]
        }  break;
 8000964:	e05b      	b.n	8000a1e <DeserializeFrame+0x1a6>
        case fcs: {
            if(*_frameSize < (_header->len + SOF_SIZE + LEN_SIZE + FCS_SIZE - 1)) {
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	1d1a      	adds	r2, r3, #4
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	db0d      	blt.n	8000990 <DeserializeFrame+0x118>
                _buffer[*_frameSize] = _byte;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	189b      	adds	r3, r3, r2
 800097e:	1dfa      	adds	r2, r7, #7
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	701a      	strb	r2, [r3, #0]
                (*_frameSize)++;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	601a      	str	r2, [r3, #0]
                _buffer[*_frameSize] = _byte;
                (*_frameSize)++;
                _header->mode = finish;
                _header->errorCode = IsValid(_header, _buffer, *_frameSize, *_frameSize);
            }
        }  break;
 800098e:	e046      	b.n	8000a1e <DeserializeFrame+0x1a6>
                _buffer[*_frameSize] = _byte;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	001a      	movs	r2, r3
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	189b      	adds	r3, r3, r2
 800099a:	1dfa      	adds	r2, r7, #7
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	701a      	strb	r2, [r3, #0]
                (*_frameSize)++;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	601a      	str	r2, [r3, #0]
                _header->mode = finish;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2206      	movs	r2, #6
 80009ae:	725a      	strb	r2, [r3, #9]
                _header->errorCode = IsValid(_header, _buffer, *_frameSize, *_frameSize);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff fd7d 	bl	80004bc <IsValid>
 80009c2:	0003      	movs	r3, r0
 80009c4:	001a      	movs	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	721a      	strb	r2, [r3, #8]
        }  break;
 80009ca:	e028      	b.n	8000a1e <DeserializeFrame+0x1a6>
        case finish: {

            _header->mode = empty;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2200      	movs	r2, #0
 80009d0:	725a      	strb	r2, [r3, #9]
            DeserializeFrame(_header, _buffer, _byte,  _frameSize);
 80009d2:	683c      	ldr	r4, [r7, #0]
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	0023      	movs	r3, r4
 80009de:	f7ff ff4b 	bl	8000878 <DeserializeFrame>
        } break;
 80009e2:	e01c      	b.n	8000a1e <DeserializeFrame+0x1a6>
        default: {

            if (*_frameSize < ( _header->len + LEN_SIZE + SOF_SIZE))
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	1cda      	adds	r2, r3, #3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	db08      	blt.n	8000a04 <DeserializeFrame+0x18c>
                DeserializePayload(_header, _buffer, _byte, _frameSize);
 80009f2:	683c      	ldr	r4, [r7, #0]
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	0023      	movs	r3, r4
 80009fe:	f7ff fec3 	bl	8000788 <DeserializePayload>
            else {
                _header->mode = fcs;
                DeserializeFrame(_header, _buffer, _byte, _frameSize);
            }
        } break;
 8000a02:	e00c      	b.n	8000a1e <DeserializeFrame+0x1a6>
                _header->mode = fcs;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2205      	movs	r2, #5
 8000a08:	725a      	strb	r2, [r3, #9]
                DeserializeFrame(_header, _buffer, _byte, _frameSize);
 8000a0a:	683c      	ldr	r4, [r7, #0]
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	0023      	movs	r3, r4
 8000a16:	f7ff ff2f 	bl	8000878 <DeserializeFrame>
        } break;
 8000a1a:	e000      	b.n	8000a1e <DeserializeFrame+0x1a6>
        }  break;
 8000a1c:	46c0      	nop			; (mov r8, r8)
    }
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b005      	add	sp, #20
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	08006e18 	.word	0x08006e18

08000a2c <CreateHost>:
static uint8_t* CreateRequest(Host* _host);
static bool WriteHostData(Host* _host,  uint8_t* _data, size_t _dataLen);
static enum Error_code IsHostValid(Host* _host);
static void ReadHost(Host* _host, uint8_t _byte);

void CreateHost(Host* _host, uint8_t* _dataBuffer, size_t _bufferSize, uint8_t _mpu, uint16_t _register, enum Frame_type _req) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	001a      	movs	r2, r3
 8000a3a:	1cfb      	adds	r3, r7, #3
 8000a3c:	701a      	strb	r2, [r3, #0]


    ChangeFrameType(_host, _req);
 8000a3e:	231c      	movs	r3, #28
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 f8ce 	bl	8000bea <ChangeFrameType>
    _host->header.len = 0;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2200      	movs	r2, #0
 8000a52:	801a      	strh	r2, [r3, #0]
    _host->header.cmd0 = _mpu;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	1cfa      	adds	r2, r7, #3
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	70da      	strb	r2, [r3, #3]
    _host->header.cmd1 = _register;
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	2318      	movs	r3, #24
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	8093      	strh	r3, [r2, #4]
    _host->header.cmd2 = 0;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	80da      	strh	r2, [r3, #6]
    _host->header.errorCode   = no_error;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	721a      	strb	r2, [r3, #8]
    _host->header.mode = empty;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2200      	movs	r2, #0
 8000a76:	725a      	strb	r2, [r3, #9]
    _host->bufferSize = _bufferSize;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	611a      	str	r2, [r3, #16]
    _host->frameSize = 0;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]

    _host->WriteData = &WriteHostData;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <CreateHost+0xa4>)
 8000a88:	61da      	str	r2, [r3, #28]
    _host->CreateRequest = &CreateRequest;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <CreateHost+0xa8>)
 8000a8e:	619a      	str	r2, [r3, #24]
    _host->Read = &ReadHost;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <CreateHost+0xac>)
 8000a94:	621a      	str	r2, [r3, #32]
    _host->IsValid = &IsHostValid;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4a10      	ldr	r2, [pc, #64]	; (8000adc <CreateHost+0xb0>)
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if(_dataBuffer && (_bufferSize > 6 && _bufferSize < MAX_PROTOCOL_LEN + 1))
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <CreateHost+0x8e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d908      	bls.n	8000aba <CreateHost+0x8e>
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d803      	bhi.n	8000aba <CreateHost+0x8e>
        _host->buffer = _dataBuffer;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	e006      	b.n	8000ac8 <CreateHost+0x9c>
    else {
        _host->buffer = NULL;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
        _host->header.errorCode = incorrect_data_length;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2205      	movs	r2, #5
 8000ac4:	721a      	strb	r2, [r3, #8]
    }
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b004      	add	sp, #16
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	08000b63 	.word	0x08000b63
 8000ad4:	08000baf 	.word	0x08000baf
 8000ad8:	08000ae1 	.word	0x08000ae1
 8000adc:	08000b21 	.word	0x08000b21

08000ae0 <ReadHost>:
static void ReadHost(Host* _host, uint8_t _byte){
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	000a      	movs	r2, r1
 8000aea:	1cfb      	adds	r3, r7, #3
 8000aec:	701a      	strb	r2, [r3, #0]
    if(_host->frameSize >= _host->bufferSize){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	001a      	movs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d303      	bcc.n	8000b04 <ReadHost+0x24>
        _host->header.errorCode = incorrect_data_length;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2205      	movs	r2, #5
 8000b00:	721a      	strb	r2, [r3, #8]
        return;
 8000b02:	e00a      	b.n	8000b1a <ReadHost+0x3a>
    }
    DeserializeFrame(&_host->header, _host->buffer, _byte, &_host->frameSize);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68d9      	ldr	r1, [r3, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3314      	adds	r3, #20
 8000b0e:	001c      	movs	r4, r3
 8000b10:	1cfb      	adds	r3, r7, #3
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	0023      	movs	r3, r4
 8000b16:	f7ff feaf 	bl	8000878 <DeserializeFrame>
}
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <IsHostValid>:
static enum Error_code IsHostValid(Host* _host) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

    if (_host->header.type == REQR_CODE && _host->header.cmd2 == 0 && _host->header.mode == finish)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d10a      	bne.n	8000b46 <IsHostValid+0x26>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	88db      	ldrh	r3, [r3, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d106      	bne.n	8000b46 <IsHostValid+0x26>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7a5b      	ldrb	r3, [r3, #9]
 8000b3c:	2b06      	cmp	r3, #6
 8000b3e:	d102      	bne.n	8000b46 <IsHostValid+0x26>
        _host->header.errorCode = incorrect_data_length;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2205      	movs	r2, #5
 8000b44:	721a      	strb	r2, [r3, #8]

    return IsValid(&_host->header, _host->buffer, _host->bufferSize, _host->frameSize);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68d9      	ldr	r1, [r3, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f7ff fcb2 	bl	80004bc <IsValid>
 8000b58:	0003      	movs	r3, r0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <WriteHostData>:
static bool WriteHostData(Host* _host,  uint8_t* _data, size_t _dataLen) {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b084      	sub	sp, #16
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
    return WriteData(&_host->header, _host->buffer, _data, _dataLen);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	68d9      	ldr	r1, [r3, #12]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f7ff fd3c 	bl	80005f4 <WriteData>
 8000b7c:	0003      	movs	r3, r0
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <GetHostPackageSize>:
uint16_t GetHostPackageSize(Host* _host) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]

    if(_host->header.type & REQR_CODE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	001a      	movs	r2, r3
 8000b94:	2301      	movs	r3, #1
 8000b96:	4013      	ands	r3, r2
 8000b98:	d001      	beq.n	8000b9e <GetHostPackageSize+0x18>
        return HEADER_SIZE;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	e003      	b.n	8000ba6 <GetHostPackageSize+0x20>
    return HEADER_SIZE + _host->header.cmd2;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	88db      	ldrh	r3, [r3, #6]
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	b29b      	uxth	r3, r3
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}

08000bae <CreateRequest>:
static uint8_t* CreateRequest(Host* _host) {
 8000bae:	b590      	push	{r4, r7, lr}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]

    if(_host->header.type & REQR_CODE) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	001a      	movs	r2, r3
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	d007      	beq.n	8000bd2 <CreateRequest+0x24>
        _host->WriteData(_host, _host->buffer, 0);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69dc      	ldr	r4, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68d9      	ldr	r1, [r3, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	47a0      	blx	r4
    }

    return Serialize(&_host->header, _host->buffer);
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0010      	movs	r0, r2
 8000bdc:	f7ff fd42 	bl	8000664 <Serialize>
 8000be0:	0003      	movs	r3, r0
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b003      	add	sp, #12
 8000be8:	bd90      	pop	{r4, r7, pc}

08000bea <ChangeFrameType>:
        _host->header.cmd1 = _addr;
        return true;
    }
    return false;
}
void ChangeFrameType(Host* _host, enum Frame_type _type){
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	1cfb      	adds	r3, r7, #3
 8000bf6:	701a      	strb	r2, [r3, #0]
    if(_type == REQR)
 8000bf8:	1cfb      	adds	r3, r7, #3
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d103      	bne.n	8000c08 <ChangeFrameType+0x1e>
        _host->header.type = REQR_CODE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	709a      	strb	r2, [r3, #2]
    else
        _host->header.type = REQW_CODE;
}
 8000c06:	e002      	b.n	8000c0e <ChangeFrameType+0x24>
        _host->header.type = REQW_CODE;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	709a      	strb	r2, [r3, #2]
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <CreateSlave>:
static bool WriteSlaveData(Slave* _slave,  uint8_t* _data, size_t _dataLen);
static uint8_t* CreateResponse(Slave*);
static void ReadSlave(Slave* _slave, uint8_t _byte);
static enum Error_code IsSlaveValid(Slave* _slave);

void CreateSlave(Slave* _slave, uint8_t* _dataBuffer, size_t _bufferSize) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]

    _slave->header.len = 0;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]
    _slave->header.type = 0;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	709a      	strb	r2, [r3, #2]
    _slave->header.cmd2 = 0;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	80da      	strh	r2, [r3, #6]
    _slave->header.errorCode   = no_error;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	721a      	strb	r2, [r3, #8]
    _slave->frameSize   = 0;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
    _slave->header.mode = empty;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	725a      	strb	r2, [r3, #9]
    _slave->bufferSize = _bufferSize;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	611a      	str	r2, [r3, #16]
    _slave->frameSize = 0;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]

    _slave->WriteData = &WriteSlaveData;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <CreateSlave+0x88>)
 8000c58:	61da      	str	r2, [r3, #28]
    _slave->CreateResponse = &CreateResponse;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <CreateSlave+0x8c>)
 8000c5e:	619a      	str	r2, [r3, #24]
    _slave->Read = &ReadSlave;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <CreateSlave+0x90>)
 8000c64:	621a      	str	r2, [r3, #32]
    _slave->IsValid = &IsSlaveValid;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4a10      	ldr	r2, [pc, #64]	; (8000cac <CreateSlave+0x94>)
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
    if(_dataBuffer && (_bufferSize > 6 && _bufferSize < MAX_PROTOCOL_LEN + 1))
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <CreateSlave+0x72>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	d908      	bls.n	8000c8a <CreateSlave+0x72>
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d803      	bhi.n	8000c8a <CreateSlave+0x72>
        _slave->buffer = _dataBuffer;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	e006      	b.n	8000c98 <CreateSlave+0x80>
    else {
        _slave->buffer = NULL;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
        _slave->header.errorCode = incorrect_data_value;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2206      	movs	r2, #6
 8000c94:	721a      	strb	r2, [r3, #8]
    }
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b004      	add	sp, #16
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08000d33 	.word	0x08000d33
 8000ca4:	08000d87 	.word	0x08000d87
 8000ca8:	08000cb1 	.word	0x08000cb1
 8000cac:	08000cf1 	.word	0x08000cf1

08000cb0 <ReadSlave>:
static void ReadSlave(Slave* _slave, uint8_t _byte) {
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	000a      	movs	r2, r1
 8000cba:	1cfb      	adds	r3, r7, #3
 8000cbc:	701a      	strb	r2, [r3, #0]
    if(_slave->frameSize >= _slave->bufferSize){
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d303      	bcc.n	8000cd4 <ReadSlave+0x24>
        _slave->header.errorCode = incorrect_data_length;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2205      	movs	r2, #5
 8000cd0:	721a      	strb	r2, [r3, #8]
        return;
 8000cd2:	e00a      	b.n	8000cea <ReadSlave+0x3a>
    }
    DeserializeFrame(&_slave->header, _slave->buffer, _byte, &_slave->frameSize);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68d9      	ldr	r1, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3314      	adds	r3, #20
 8000cde:	001c      	movs	r4, r3
 8000ce0:	1cfb      	adds	r3, r7, #3
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	f7ff fdc7 	bl	8000878 <DeserializeFrame>
}
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b003      	add	sp, #12
 8000cee:	bd90      	pop	{r4, r7, pc}

08000cf0 <IsSlaveValid>:
static enum Error_code IsSlaveValid(Slave* _slave) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

    if (_slave->header.type == REQR_CODE && _slave->header.cmd2 != 0 && _slave->header.mode == finish)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	789b      	ldrb	r3, [r3, #2]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10a      	bne.n	8000d16 <IsSlaveValid+0x26>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	88db      	ldrh	r3, [r3, #6]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <IsSlaveValid+0x26>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7a5b      	ldrb	r3, [r3, #9]
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	d102      	bne.n	8000d16 <IsSlaveValid+0x26>
        _slave->header.errorCode = incorrect_data_length;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2205      	movs	r2, #5
 8000d14:	721a      	strb	r2, [r3, #8]

    return IsValid(&_slave->header,  _slave->buffer, _slave->bufferSize, _slave->frameSize);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68d9      	ldr	r1, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	f7ff fbca 	bl	80004bc <IsValid>
 8000d28:	0003      	movs	r3, r0
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <WriteSlaveData>:
static bool WriteSlaveData(Slave* _slave,  uint8_t* _data, size_t _dataLen) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
    return WriteData(&_slave->header, _slave->buffer, _data, _dataLen);
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	68d9      	ldr	r1, [r3, #12]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f7ff fc54 	bl	80005f4 <WriteData>
 8000d4c:	0003      	movs	r3, r0
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <GetSlavePackageSize>:
uint16_t GetSlavePackageSize(Slave* _slave) {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]

    if(_slave->header.type & REQW_CODE || _slave->header.errorCode != no_error)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	001a      	movs	r2, r3
 8000d64:	2302      	movs	r3, #2
 8000d66:	4013      	ands	r3, r2
 8000d68:	d103      	bne.n	8000d72 <GetSlavePackageSize+0x1c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7a1b      	ldrb	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <GetSlavePackageSize+0x20>
        return HEADER_SIZE + 1;
 8000d72:	2307      	movs	r3, #7
 8000d74:	e003      	b.n	8000d7e <GetSlavePackageSize+0x28>
    return HEADER_SIZE + _slave->header.cmd2;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	88db      	ldrh	r3, [r3, #6]
 8000d7a:	3306      	adds	r3, #6
 8000d7c:	b29b      	uxth	r3, r3
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <CreateResponse>:
static uint8_t* CreateResponse(Slave* _slave) {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]

    if(_slave->header.type & REQW_CODE) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	789b      	ldrb	r3, [r3, #2]
 8000d92:	001a      	movs	r2, r3
 8000d94:	2302      	movs	r3, #2
 8000d96:	4013      	ands	r3, r2
 8000d98:	d00a      	beq.n	8000db0 <CreateResponse+0x2a>
        uint8_t err = _slave->header.errorCode;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a1a      	ldrb	r2, [r3, #8]
 8000d9e:	210f      	movs	r1, #15
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	701a      	strb	r2, [r3, #0]
        _slave->WriteData(_slave, &err, 1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	1879      	adds	r1, r7, r1
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	4798      	blx	r3
    }
    return Serialize(&_slave->header, _slave->buffer);
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	0019      	movs	r1, r3
 8000db8:	0010      	movs	r0, r2
 8000dba:	f7ff fc53 	bl	8000664 <Serialize>
 8000dbe:	0003      	movs	r3, r0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b004      	add	sp, #16
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Crc16>:

STATIC uint16_t Crc16( uint8_t *crc_arr, uint8_t crc_num)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	1cfb      	adds	r3, r7, #3
 8000dd4:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000dd6:	230e      	movs	r3, #14
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4252      	negs	r2, r2
 8000dde:	801a      	strh	r2, [r3, #0]

    while (crc_num--)
 8000de0:	e013      	b.n	8000e0a <Crc16+0x42>
        crc = (crc >> 8) ^ Crc16Table[(crc & 0xFF) ^ *crc_arr++];
 8000de2:	240e      	movs	r4, #14
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b299      	uxth	r1, r3
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	22ff      	movs	r2, #255	; 0xff
 8000df2:	401a      	ands	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	1c58      	adds	r0, r3, #1
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	405a      	eors	r2, r3
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <Crc16+0x60>)
 8000e00:	0052      	lsls	r2, r2, #1
 8000e02:	5ad2      	ldrh	r2, [r2, r3]
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	404a      	eors	r2, r1
 8000e08:	801a      	strh	r2, [r3, #0]
    while (crc_num--)
 8000e0a:	1cfb      	adds	r3, r7, #3
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	1cfa      	adds	r2, r7, #3
 8000e10:	1e59      	subs	r1, r3, #1
 8000e12:	7011      	strb	r1, [r2, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1e4      	bne.n	8000de2 <Crc16+0x1a>

    return crc;
 8000e18:	230e      	movs	r3, #14
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	881b      	ldrh	r3, [r3, #0]
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b005      	add	sp, #20
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	08006c04 	.word	0x08006c04

08000e2c <CheckType>:

STATIC bool CheckType(uint8_t _type) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	701a      	strb	r2, [r3, #0]
    return !(_type & 0x70);
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2270      	movs	r2, #112	; 0x70
 8000e3e:	4013      	ands	r3, r2
 8000e40:	425a      	negs	r2, r3
 8000e42:	4153      	adcs	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <CheckMPU>:
STATIC bool CheckMPU(uint8_t _mpu) {
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	0002      	movs	r2, r0
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	701a      	strb	r2, [r3, #0]
    if(_mpu == 0x00 || _mpu == 0xFF)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <CheckMPU+0x1c>
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2bff      	cmp	r3, #255	; 0xff
 8000e68:	d101      	bne.n	8000e6e <CheckMPU+0x20>
        return false;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <CheckMPU+0x22>
    return true;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <CheckRegisterAddr>:
STATIC bool CheckRegisterAddr(uint16_t _addr){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	0002      	movs	r2, r0
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	801a      	strh	r2, [r3, #0]
    if(_addr == 0x0000 || _addr == 0xFFFF)
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d004      	beq.n	8000e96 <CheckRegisterAddr+0x1e>
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <CheckRegisterAddr+0x2c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <CheckRegisterAddr+0x22>
        return false;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <CheckRegisterAddr+0x24>
    return true;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0000ffff 	.word	0x0000ffff

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fe3b 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f847 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f941 	bl	800113c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eba:	f000 f8af 	bl	800101c <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8000ebe:	f000 f8dd 	bl	800107c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 8000ec2:	f000 f90b 	bl	80010dc <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  const char* reset = "\r\nRESET\r\n";
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <main+0x70>)
 8000ec8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)reset, 9, 10);
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <main+0x74>)
 8000ece:	230a      	movs	r3, #10
 8000ed0:	2209      	movs	r2, #9
 8000ed2:	f002 f8a9 	bl	8003028 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ed6:	f002 fea3 	bl	8003c20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Host */
  HostHandle = osThreadNew(HostTask, NULL, &Host_attributes);
 8000eda:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <main+0x78>)
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <main+0x7c>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 fef9 	bl	8003cd8 <osThreadNew>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <main+0x80>)
 8000eea:	601a      	str	r2, [r3, #0]

  /* creation of Slave */
  SlaveHandle = osThreadNew(SlaveTask, NULL, &Slave_attributes);
 8000eec:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <main+0x84>)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <main+0x88>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 fef0 	bl	8003cd8 <osThreadNew>
 8000ef8:	0002      	movs	r2, r0
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <main+0x8c>)
 8000efc:	601a      	str	r2, [r3, #0]

  /* creation of myTask */
  myTaskHandle = osThreadNew(StartTask, NULL, &myTask_attributes);
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <main+0x90>)
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <main+0x94>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	0018      	movs	r0, r3
 8000f06:	f002 fee7 	bl	8003cd8 <osThreadNew>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <main+0x98>)
 8000f0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f10:	f002 feb2 	bl	8003c78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <main+0x6c>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	08006b8c 	.word	0x08006b8c
 8000f1c:	20000090 	.word	0x20000090
 8000f20:	08006e34 	.word	0x08006e34
 8000f24:	080014f5 	.word	0x080014f5
 8000f28:	2000021c 	.word	0x2000021c
 8000f2c:	08006e58 	.word	0x08006e58
 8000f30:	080016b9 	.word	0x080016b9
 8000f34:	20000220 	.word	0x20000220
 8000f38:	08006e7c 	.word	0x08006e7c
 8000f3c:	0800184d 	.word	0x0800184d
 8000f40:	20000224 	.word	0x20000224

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b09f      	sub	sp, #124	; 0x7c
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	2440      	movs	r4, #64	; 0x40
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2338      	movs	r3, #56	; 0x38
 8000f52:	001a      	movs	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	f005 f926 	bl	80061a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	232c      	movs	r3, #44	; 0x2c
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2314      	movs	r3, #20
 8000f62:	001a      	movs	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	f005 f91e 	bl	80061a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2328      	movs	r3, #40	; 0x28
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f005 f917 	bl	80061a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <SystemClock_Config+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <SystemClock_Config+0xd4>)
 8000f7e:	401a      	ands	r2, r3
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <SystemClock_Config+0xd0>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	0109      	lsls	r1, r1, #4
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f8a:	0021      	movs	r1, r4
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2210      	movs	r2, #16
 8000f90:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2201      	movs	r2, #1
 8000f96:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	22a0      	movs	r2, #160	; 0xa0
 8000fa2:	0212      	lsls	r2, r2, #8
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 f87a 	bl	80020a8 <HAL_RCC_OscConfig>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000fb8:	f000 fc4d 	bl	8001856 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	212c      	movs	r1, #44	; 0x2c
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2100      	movs	r1, #0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f001 fc35 	bl	8002850 <HAL_RCC_ClockConfig>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fea:	f000 fc34 	bl	8001856 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f001 fe4b 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001006:	f000 fc26 	bl	8001856 <Error_Handler>
  }
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b01f      	add	sp, #124	; 0x7c
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40007000 	.word	0x40007000
 8001018:	ffffe7ff 	.word	0xffffe7ff

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <MX_USART2_UART_Init+0x5c>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001028:	22e1      	movs	r2, #225	; 0xe1
 800102a:	0252      	lsls	r2, r2, #9
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001060:	0018      	movs	r0, r3
 8001062:	f001 ff8d 	bl	8002f80 <HAL_UART_Init>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800106a:	f000 fbf4 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000090 	.word	0x20000090
 8001078:	40004400 	.word	0x40004400

0800107c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <MX_USART4_UART_Init+0x5c>)
 8001084:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 8001088:	22e1      	movs	r2, #225	; 0xe1
 800108a:	0252      	lsls	r2, r2, #9
 800108c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <MX_USART4_UART_Init+0x58>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f001 ff5d 	bl	8002f80 <HAL_UART_Init>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80010ca:	f000 fbc4 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000114 	.word	0x20000114
 80010d8:	40004c00 	.word	0x40004c00

080010dc <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_USART5_UART_Init+0x58>)
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <MX_USART5_UART_Init+0x5c>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_USART5_UART_Init+0x58>)
 80010e8:	22e1      	movs	r2, #225	; 0xe1
 80010ea:	0252      	lsls	r2, r2, #9
 80010ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USART5_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_USART5_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USART5_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USART5_UART_Init+0x58>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USART5_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USART5_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USART5_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USART5_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <MX_USART5_UART_Init+0x58>)
 8001120:	0018      	movs	r0, r3
 8001122:	f001 ff2d 	bl	8002f80 <HAL_UART_Init>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d001      	beq.n	800112e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800112a:	f000 fb94 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000198 	.word	0x20000198
 8001138:	40005000 	.word	0x40005000

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b08b      	sub	sp, #44	; 0x2c
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	2414      	movs	r4, #20
 8001144:	193b      	adds	r3, r7, r4
 8001146:	0018      	movs	r0, r3
 8001148:	2314      	movs	r3, #20
 800114a:	001a      	movs	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f005 f82a 	bl	80061a6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001158:	2104      	movs	r1, #4
 800115a:	430a      	orrs	r2, r1
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	2204      	movs	r2, #4
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_GPIO_Init+0xd8>)
 800116c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	430a      	orrs	r2, r1
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_GPIO_Init+0xd8>)
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_GPIO_Init+0xd8>)
 800119c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_GPIO_Init+0xd8>)
 80011a0:	2108      	movs	r1, #8
 80011a2:	430a      	orrs	r2, r1
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_GPIO_Init+0xd8>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	2208      	movs	r2, #8
 80011ac:	4013      	ands	r3, r2
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 ff56 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	0192      	lsls	r2, r2, #6
 80011c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2284      	movs	r2, #132	; 0x84
 80011cc:	0392      	lsls	r2, r2, #14
 80011ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_GPIO_Init+0xdc>)
 80011da:	0019      	movs	r1, r3
 80011dc:	0010      	movs	r0, r2
 80011de:	f000 fdc7 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e2:	0021      	movs	r1, r4
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2220      	movs	r2, #32
 80011e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2201      	movs	r2, #1
 80011ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011fc:	187a      	adds	r2, r7, r1
 80011fe:	23a0      	movs	r3, #160	; 0xa0
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f000 fdb3 	bl	8001d70 <HAL_GPIO_Init>

}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b00b      	add	sp, #44	; 0x2c
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40021000 	.word	0x40021000
 8001218:	50000800 	.word	0x50000800

0800121c <HostOut>:

/* USER CODE BEGIN 4 */
void HostOut(Host _host) {
 800121c:	b084      	sub	sp, #16
 800121e:	b5b0      	push	{r4, r5, r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	2520      	movs	r5, #32
 8001226:	197c      	adds	r4, r7, r5
 8001228:	6020      	str	r0, [r4, #0]
 800122a:	6061      	str	r1, [r4, #4]
 800122c:	60a2      	str	r2, [r4, #8]
 800122e:	60e3      	str	r3, [r4, #12]
	taskENTER_CRITICAL();
 8001230:	f004 fd46 	bl	8005cc0 <vPortEnterCritical>
	uint16_t len = 0;
 8001234:	1dbb      	adds	r3, r7, #6
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]


	strncpy(outputBuffer, "Host: ", 7);
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HostOut+0x14c>)
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HostOut+0x150>)
 800123e:	6811      	ldr	r1, [r2, #0]
 8001240:	6019      	str	r1, [r3, #0]
 8001242:	8891      	ldrh	r1, [r2, #4]
 8001244:	8099      	strh	r1, [r3, #4]
 8001246:	7992      	ldrb	r2, [r2, #6]
 8001248:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 6, 100);
 800124a:	4947      	ldr	r1, [pc, #284]	; (8001368 <HostOut+0x14c>)
 800124c:	4848      	ldr	r0, [pc, #288]	; (8001370 <HostOut+0x154>)
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	2206      	movs	r2, #6
 8001252:	f001 fee9 	bl	8003028 <HAL_UART_Transmit>
	if(REQ_TYPE(_host)) {
 8001256:	197b      	adds	r3, r7, r5
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	001a      	movs	r2, r3
 800125c:	2301      	movs	r3, #1
 800125e:	4013      	ands	r3, r2
 8001260:	d010      	beq.n	8001284 <HostOut+0x68>
		//read
		strncpy(outputBuffer, "(read)\r\nRegister: ", 19);
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <HostOut+0x14c>)
 8001264:	4a43      	ldr	r2, [pc, #268]	; (8001374 <HostOut+0x158>)
 8001266:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001268:	c313      	stmia	r3!, {r0, r1, r4}
 800126a:	6811      	ldr	r1, [r2, #0]
 800126c:	6019      	str	r1, [r3, #0]
 800126e:	8891      	ldrh	r1, [r2, #4]
 8001270:	8099      	strh	r1, [r3, #4]
 8001272:	7992      	ldrb	r2, [r2, #6]
 8001274:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 18, 100);
 8001276:	493c      	ldr	r1, [pc, #240]	; (8001368 <HostOut+0x14c>)
 8001278:	483d      	ldr	r0, [pc, #244]	; (8001370 <HostOut+0x154>)
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	2212      	movs	r2, #18
 800127e:	f001 fed3 	bl	8003028 <HAL_UART_Transmit>
 8001282:	e00b      	b.n	800129c <HostOut+0x80>


	} else {
		strncpy(outputBuffer, "(write)\r\nRegister: ", 20);
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HostOut+0x14c>)
 8001286:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <HostOut+0x15c>)
 8001288:	ca13      	ldmia	r2!, {r0, r1, r4}
 800128a:	c313      	stmia	r3!, {r0, r1, r4}
 800128c:	ca03      	ldmia	r2!, {r0, r1}
 800128e:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 19, 100);
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HostOut+0x14c>)
 8001292:	4837      	ldr	r0, [pc, #220]	; (8001370 <HostOut+0x154>)
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	2213      	movs	r2, #19
 8001298:	f001 fec6 	bl	8003028 <HAL_UART_Transmit>
	}
	len = sprintf(outputBuffer, "%u", _host.header.cmd1);
 800129c:	2420      	movs	r4, #32
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	889b      	ldrh	r3, [r3, #4]
 80012a2:	001a      	movs	r2, r3
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HostOut+0x160>)
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HostOut+0x14c>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f005 f8a3 	bl	80063f4 <siprintf>
 80012ae:	0002      	movs	r2, r0
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, len, 100);
 80012b4:	1dbb      	adds	r3, r7, #6
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	492b      	ldr	r1, [pc, #172]	; (8001368 <HostOut+0x14c>)
 80012ba:	482d      	ldr	r0, [pc, #180]	; (8001370 <HostOut+0x154>)
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	f001 feb3 	bl	8003028 <HAL_UART_Transmit>
	strncpy(outputBuffer, "\r\nData: ",9);
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HostOut+0x14c>)
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HostOut+0x164>)
 80012c6:	ca03      	ldmia	r2!, {r0, r1}
 80012c8:	c303      	stmia	r3!, {r0, r1}
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 8, 100);
 80012ce:	4926      	ldr	r1, [pc, #152]	; (8001368 <HostOut+0x14c>)
 80012d0:	4827      	ldr	r0, [pc, #156]	; (8001370 <HostOut+0x154>)
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	2208      	movs	r2, #8
 80012d6:	f001 fea7 	bl	8003028 <HAL_UART_Transmit>

	len = _host.header.cmd2;
 80012da:	1dba      	adds	r2, r7, #6
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	88db      	ldrh	r3, [r3, #6]
 80012e0:	8013      	strh	r3, [r2, #0]

	int index = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<len; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	e01b      	b.n	8001324 <HostOut+0x108>
		index += sprintf(&outputBuffer[index], "%u ", *(GET_DATA_PTR(_host) + i));
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HostOut+0x14c>)
 80012f0:	18d0      	adds	r0, r2, r3
 80012f2:	2220      	movs	r2, #32
 80012f4:	18bb      	adds	r3, r7, r2
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HostOut+0xe8>
 80012fc:	18bb      	adds	r3, r7, r2
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	330a      	adds	r3, #10
 8001302:	e000      	b.n	8001306 <HostOut+0xea>
 8001304:	2300      	movs	r3, #0
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	189b      	adds	r3, r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	001a      	movs	r2, r3
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HostOut+0x168>)
 8001310:	0019      	movs	r1, r3
 8001312:	f005 f86f 	bl	80063f4 <siprintf>
 8001316:	0002      	movs	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	189b      	adds	r3, r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<len; i++)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	3301      	adds	r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	1dbb      	adds	r3, r7, #6
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbde      	blt.n	80012ec <HostOut+0xd0>
	index += sprintf(&outputBuffer[index], "\r\n\n ");
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HostOut+0x14c>)
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HostOut+0x16c>)
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f005 f85b 	bl	80063f4 <siprintf>
 800133e:	0002      	movs	r2, r0
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	189b      	adds	r3, r3, r2
 8001344:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, index, 100);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	b29a      	uxth	r2, r3
 800134a:	4907      	ldr	r1, [pc, #28]	; (8001368 <HostOut+0x14c>)
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <HostOut+0x154>)
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	f001 fe6a 	bl	8003028 <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 8001354:	f004 fcc6 	bl	8005ce4 <vPortExitCritical>
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b004      	add	sp, #16
 800135e:	bcb0      	pop	{r4, r5, r7}
 8001360:	bc08      	pop	{r3}
 8001362:	b004      	add	sp, #16
 8001364:	4718      	bx	r3
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000a28 	.word	0x20000a28
 800136c:	08006b98 	.word	0x08006b98
 8001370:	20000090 	.word	0x20000090
 8001374:	08006ba0 	.word	0x08006ba0
 8001378:	08006bb4 	.word	0x08006bb4
 800137c:	08006bc8 	.word	0x08006bc8
 8001380:	08006bcc 	.word	0x08006bcc
 8001384:	08006bd8 	.word	0x08006bd8
 8001388:	08006bdc 	.word	0x08006bdc

0800138c <SlaveOut>:

void SlaveOut(Slave _slave) {
 800138c:	b084      	sub	sp, #16
 800138e:	b5b0      	push	{r4, r5, r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	2520      	movs	r5, #32
 8001396:	197c      	adds	r4, r7, r5
 8001398:	6020      	str	r0, [r4, #0]
 800139a:	6061      	str	r1, [r4, #4]
 800139c:	60a2      	str	r2, [r4, #8]
 800139e:	60e3      	str	r3, [r4, #12]
	taskENTER_CRITICAL();
 80013a0:	f004 fc8e 	bl	8005cc0 <vPortEnterCritical>
	uint16_t len = 0;
 80013a4:	1dbb      	adds	r3, r7, #6
 80013a6:	2200      	movs	r2, #0
 80013a8:	801a      	strh	r2, [r3, #0]

	strncpy(outputBuffer, "Slave: ", 8);
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <SlaveOut+0x144>)
 80013ac:	4a49      	ldr	r2, [pc, #292]	; (80014d4 <SlaveOut+0x148>)
 80013ae:	ca03      	ldmia	r2!, {r0, r1}
 80013b0:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 7, 100);
 80013b2:	4947      	ldr	r1, [pc, #284]	; (80014d0 <SlaveOut+0x144>)
 80013b4:	4848      	ldr	r0, [pc, #288]	; (80014d8 <SlaveOut+0x14c>)
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	2207      	movs	r2, #7
 80013ba:	f001 fe35 	bl	8003028 <HAL_UART_Transmit>
	if(REQ_TYPE(_slave)) {
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	001a      	movs	r2, r3
 80013c4:	2301      	movs	r3, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	d010      	beq.n	80013ec <SlaveOut+0x60>
		//read
		strncpy(outputBuffer, "(read)\r\nRegister: ", 19);
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <SlaveOut+0x144>)
 80013cc:	4a43      	ldr	r2, [pc, #268]	; (80014dc <SlaveOut+0x150>)
 80013ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013d0:	c313      	stmia	r3!, {r0, r1, r4}
 80013d2:	6811      	ldr	r1, [r2, #0]
 80013d4:	6019      	str	r1, [r3, #0]
 80013d6:	8891      	ldrh	r1, [r2, #4]
 80013d8:	8099      	strh	r1, [r3, #4]
 80013da:	7992      	ldrb	r2, [r2, #6]
 80013dc:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 18, 100);
 80013de:	493c      	ldr	r1, [pc, #240]	; (80014d0 <SlaveOut+0x144>)
 80013e0:	483d      	ldr	r0, [pc, #244]	; (80014d8 <SlaveOut+0x14c>)
 80013e2:	2364      	movs	r3, #100	; 0x64
 80013e4:	2212      	movs	r2, #18
 80013e6:	f001 fe1f 	bl	8003028 <HAL_UART_Transmit>
 80013ea:	e00b      	b.n	8001404 <SlaveOut+0x78>


	} else {
		strncpy(outputBuffer, "(write)\r\nRegister: ", 20);
 80013ec:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <SlaveOut+0x144>)
 80013ee:	4a3c      	ldr	r2, [pc, #240]	; (80014e0 <SlaveOut+0x154>)
 80013f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013f2:	c313      	stmia	r3!, {r0, r1, r4}
 80013f4:	ca03      	ldmia	r2!, {r0, r1}
 80013f6:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 19, 100);
 80013f8:	4935      	ldr	r1, [pc, #212]	; (80014d0 <SlaveOut+0x144>)
 80013fa:	4837      	ldr	r0, [pc, #220]	; (80014d8 <SlaveOut+0x14c>)
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	2213      	movs	r2, #19
 8001400:	f001 fe12 	bl	8003028 <HAL_UART_Transmit>
	}
	len = sprintf(outputBuffer, "%u", _slave.header.cmd1);
 8001404:	2420      	movs	r4, #32
 8001406:	193b      	adds	r3, r7, r4
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	001a      	movs	r2, r3
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <SlaveOut+0x158>)
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <SlaveOut+0x144>)
 8001410:	0018      	movs	r0, r3
 8001412:	f004 ffef 	bl	80063f4 <siprintf>
 8001416:	0002      	movs	r2, r0
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, len, 100);
 800141c:	1dbb      	adds	r3, r7, #6
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	492b      	ldr	r1, [pc, #172]	; (80014d0 <SlaveOut+0x144>)
 8001422:	482d      	ldr	r0, [pc, #180]	; (80014d8 <SlaveOut+0x14c>)
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	f001 fdff 	bl	8003028 <HAL_UART_Transmit>
	strncpy(outputBuffer, "\r\nData: ", 9);
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <SlaveOut+0x144>)
 800142c:	4a2e      	ldr	r2, [pc, #184]	; (80014e8 <SlaveOut+0x15c>)
 800142e:	ca03      	ldmia	r2!, {r0, r1}
 8001430:	c303      	stmia	r3!, {r0, r1}
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, 8, 100);
 8001436:	4926      	ldr	r1, [pc, #152]	; (80014d0 <SlaveOut+0x144>)
 8001438:	4827      	ldr	r0, [pc, #156]	; (80014d8 <SlaveOut+0x14c>)
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2208      	movs	r2, #8
 800143e:	f001 fdf3 	bl	8003028 <HAL_UART_Transmit>

	len = _slave.header.cmd2;
 8001442:	1dba      	adds	r2, r7, #6
 8001444:	193b      	adds	r3, r7, r4
 8001446:	88db      	ldrh	r3, [r3, #6]
 8001448:	8013      	strh	r3, [r2, #0]

	int index = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<len; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	e01b      	b.n	800148c <SlaveOut+0x100>
		index += sprintf(&outputBuffer[index], "%u ", *(GET_DATA_PTR(_slave) + i));
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <SlaveOut+0x144>)
 8001458:	18d0      	adds	r0, r2, r3
 800145a:	2220      	movs	r2, #32
 800145c:	18bb      	adds	r3, r7, r2
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <SlaveOut+0xe0>
 8001464:	18bb      	adds	r3, r7, r2
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	330a      	adds	r3, #10
 800146a:	e000      	b.n	800146e <SlaveOut+0xe2>
 800146c:	2300      	movs	r3, #0
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	189b      	adds	r3, r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	001a      	movs	r2, r3
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <SlaveOut+0x160>)
 8001478:	0019      	movs	r1, r3
 800147a:	f004 ffbb 	bl	80063f4 <siprintf>
 800147e:	0002      	movs	r2, r0
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	189b      	adds	r3, r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<len; i++)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3301      	adds	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	1dbb      	adds	r3, r7, #6
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbde      	blt.n	8001454 <SlaveOut+0xc8>
	index += sprintf(&outputBuffer[index], "\r\n\n ");
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <SlaveOut+0x144>)
 800149a:	18d3      	adds	r3, r2, r3
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <SlaveOut+0x164>)
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f004 ffa7 	bl	80063f4 <siprintf>
 80014a6:	0002      	movs	r2, r0
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	189b      	adds	r3, r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(&huart2, (uint8_t*)outputBuffer, index, 100);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4907      	ldr	r1, [pc, #28]	; (80014d0 <SlaveOut+0x144>)
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <SlaveOut+0x14c>)
 80014b6:	2364      	movs	r3, #100	; 0x64
 80014b8:	f001 fdb6 	bl	8003028 <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 80014bc:	f004 fc12 	bl	8005ce4 <vPortExitCritical>
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b004      	add	sp, #16
 80014c6:	bcb0      	pop	{r4, r5, r7}
 80014c8:	bc08      	pop	{r3}
 80014ca:	b004      	add	sp, #16
 80014cc:	4718      	bx	r3
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000a28 	.word	0x20000a28
 80014d4:	08006be4 	.word	0x08006be4
 80014d8:	20000090 	.word	0x20000090
 80014dc:	08006ba0 	.word	0x08006ba0
 80014e0:	08006bb4 	.word	0x08006bb4
 80014e4:	08006bc8 	.word	0x08006bc8
 80014e8:	08006bcc 	.word	0x08006bcc
 80014ec:	08006bd8 	.word	0x08006bd8
 80014f0:	08006bdc 	.word	0x08006bdc

080014f4 <HostTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HostTask */
void HostTask(void *argument)
{
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	b097      	sub	sp, #92	; 0x5c
 80014f8:	af06      	add	r7, sp, #24
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  Host pc;
  uint8_t byte = 0;
 80014fc:	230b      	movs	r3, #11
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
  uint8_t* data;
  for(;;)
  {
	  CreateHost(&pc, hostBuffer, 1024, addr_linux, 0x18, REQR);
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	00da      	lsls	r2, r3, #3
 8001508:	4968      	ldr	r1, [pc, #416]	; (80016ac <HostTask+0x1b8>)
 800150a:	240c      	movs	r4, #12
 800150c:	1938      	adds	r0, r7, r4
 800150e:	2301      	movs	r3, #1
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2318      	movs	r3, #24
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2301      	movs	r3, #1
 8001518:	f7ff fa88 	bl	8000a2c <CreateHost>
	  HostOut(pc);
 800151c:	193b      	adds	r3, r7, r4
 800151e:	466a      	mov	r2, sp
 8001520:	0011      	movs	r1, r2
 8001522:	001a      	movs	r2, r3
 8001524:	3210      	adds	r2, #16
 8001526:	ca61      	ldmia	r2!, {r0, r5, r6}
 8001528:	c161      	stmia	r1!, {r0, r5, r6}
 800152a:	ca61      	ldmia	r2!, {r0, r5, r6}
 800152c:	c161      	stmia	r1!, {r0, r5, r6}
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	6859      	ldr	r1, [r3, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f7ff fe71 	bl	800121c <HostOut>

	  data = pc.CreateRequest(&pc);
 800153a:	193b      	adds	r3, r7, r4
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	193a      	adds	r2, r7, r4
 8001540:	0010      	movs	r0, r2
 8001542:	4798      	blx	r3
 8001544:	0003      	movs	r3, r0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34

	  for(int i = 0; i < REQUEST_SIZE(pc); i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800154c:	e011      	b.n	8001572 <HostTask+0x7e>
		  byte = *(data + i);
 800154e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	210b      	movs	r1, #11
 8001558:	187b      	adds	r3, r7, r1
 800155a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart4, &byte, 1, 100);
 800155c:	1879      	adds	r1, r7, r1
 800155e:	4854      	ldr	r0, [pc, #336]	; (80016b0 <HostTask+0x1bc>)
 8001560:	2364      	movs	r3, #100	; 0x64
 8001562:	2201      	movs	r2, #1
 8001564:	f001 fd60 	bl	8003028 <HAL_UART_Transmit>
		  taskYIELD();
 8001568:	f004 fb9a 	bl	8005ca0 <vPortYield>
	  for(int i = 0; i < REQUEST_SIZE(pc); i++) {
 800156c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156e:	3301      	adds	r3, #1
 8001570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001572:	230c      	movs	r3, #12
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff fb05 	bl	8000b86 <GetHostPackageSize>
 800157c:	0003      	movs	r3, r0
 800157e:	3305      	adds	r3, #5
 8001580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001582:	429a      	cmp	r2, r3
 8001584:	dde3      	ble.n	800154e <HostTask+0x5a>

	  }
	  while(pc.header.mode != finish) {
 8001586:	e014      	b.n	80015b2 <HostTask+0xbe>
		 if (HAL_UART_Receive(&huart4, &byte, 1, 100) != HAL_TIMEOUT)
 8001588:	240b      	movs	r4, #11
 800158a:	1939      	adds	r1, r7, r4
 800158c:	4848      	ldr	r0, [pc, #288]	; (80016b0 <HostTask+0x1bc>)
 800158e:	2364      	movs	r3, #100	; 0x64
 8001590:	2201      	movs	r2, #1
 8001592:	f001 fdf1 	bl	8003178 <HAL_UART_Receive>
 8001596:	0003      	movs	r3, r0
 8001598:	2b03      	cmp	r3, #3
 800159a:	d008      	beq.n	80015ae <HostTask+0xba>
		  pc.Read(&pc, byte);
 800159c:	200c      	movs	r0, #12
 800159e:	183b      	adds	r3, r7, r0
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	193a      	adds	r2, r7, r4
 80015a4:	7811      	ldrb	r1, [r2, #0]
 80015a6:	183a      	adds	r2, r7, r0
 80015a8:	0010      	movs	r0, r2
 80015aa:	4798      	blx	r3
 80015ac:	e001      	b.n	80015b2 <HostTask+0xbe>
		 else
			 taskYIELD();
 80015ae:	f004 fb77 	bl	8005ca0 <vPortYield>
	  while(pc.header.mode != finish) {
 80015b2:	240c      	movs	r4, #12
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	7a5b      	ldrb	r3, [r3, #9]
 80015b8:	2b06      	cmp	r3, #6
 80015ba:	d1e5      	bne.n	8001588 <HostTask+0x94>
	  }
	  if(pc.IsValid(&pc) == no_error) {
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	193a      	adds	r2, r7, r4
 80015c2:	0010      	movs	r0, r2
 80015c4:	4798      	blx	r3

		  //OUTPUT
	  }
	  osDelay(100);
 80015c6:	2064      	movs	r0, #100	; 0x64
 80015c8:	f002 fc2a 	bl	8003e20 <osDelay>
	  CreateHost(&pc, hostBuffer, 1024, addr_linux, 0x18, REQW);
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	00da      	lsls	r2, r3, #3
 80015d0:	4936      	ldr	r1, [pc, #216]	; (80016ac <HostTask+0x1b8>)
 80015d2:	1938      	adds	r0, r7, r4
 80015d4:	2302      	movs	r3, #2
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2318      	movs	r3, #24
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	f7ff fa25 	bl	8000a2c <CreateHost>
	  byte = 0x33;
 80015e2:	210b      	movs	r1, #11
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2233      	movs	r2, #51	; 0x33
 80015e8:	701a      	strb	r2, [r3, #0]
	  pc.WriteData(&pc, &byte, 1);
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	1879      	adds	r1, r7, r1
 80015f0:	1938      	adds	r0, r7, r4
 80015f2:	2201      	movs	r2, #1
 80015f4:	4798      	blx	r3
	  data = pc.CreateRequest(&pc);
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	193a      	adds	r2, r7, r4
 80015fc:	0010      	movs	r0, r2
 80015fe:	4798      	blx	r3
 8001600:	0003      	movs	r3, r0
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
	  for(int i = 0; i < REQUEST_SIZE(pc); i++) {
 8001604:	2300      	movs	r3, #0
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
 8001608:	e011      	b.n	800162e <HostTask+0x13a>
	  		  byte = *(data + i);
 800160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800160c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800160e:	18d3      	adds	r3, r2, r3
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	210b      	movs	r1, #11
 8001614:	187b      	adds	r3, r7, r1
 8001616:	701a      	strb	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart4, &byte, 1, 100);
 8001618:	1879      	adds	r1, r7, r1
 800161a:	4825      	ldr	r0, [pc, #148]	; (80016b0 <HostTask+0x1bc>)
 800161c:	2364      	movs	r3, #100	; 0x64
 800161e:	2201      	movs	r2, #1
 8001620:	f001 fd02 	bl	8003028 <HAL_UART_Transmit>
	  		  taskYIELD();
 8001624:	f004 fb3c 	bl	8005ca0 <vPortYield>
	  for(int i = 0; i < REQUEST_SIZE(pc); i++) {
 8001628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162a:	3301      	adds	r3, #1
 800162c:	63bb      	str	r3, [r7, #56]	; 0x38
 800162e:	240c      	movs	r4, #12
 8001630:	193b      	adds	r3, r7, r4
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff faa7 	bl	8000b86 <GetHostPackageSize>
 8001638:	0003      	movs	r3, r0
 800163a:	3305      	adds	r3, #5
 800163c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800163e:	429a      	cmp	r2, r3
 8001640:	dde3      	ble.n	800160a <HostTask+0x116>
	  }
	  HostOut(pc);
 8001642:	193b      	adds	r3, r7, r4
 8001644:	466a      	mov	r2, sp
 8001646:	0011      	movs	r1, r2
 8001648:	001a      	movs	r2, r3
 800164a:	3210      	adds	r2, #16
 800164c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800164e:	c131      	stmia	r1!, {r0, r4, r5}
 8001650:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001652:	c131      	stmia	r1!, {r0, r4, r5}
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f7ff fdde 	bl	800121c <HostOut>
	  while(pc.header.mode != finish) {
 8001660:	e014      	b.n	800168c <HostTask+0x198>
		  if (HAL_UART_Receive(&huart4, &byte, 1, 100) != HAL_TIMEOUT)
 8001662:	240b      	movs	r4, #11
 8001664:	1939      	adds	r1, r7, r4
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <HostTask+0x1bc>)
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	f001 fd84 	bl	8003178 <HAL_UART_Receive>
 8001670:	0003      	movs	r3, r0
 8001672:	2b03      	cmp	r3, #3
 8001674:	d008      	beq.n	8001688 <HostTask+0x194>
		  	pc.Read(&pc, byte);
 8001676:	200c      	movs	r0, #12
 8001678:	183b      	adds	r3, r7, r0
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	193a      	adds	r2, r7, r4
 800167e:	7811      	ldrb	r1, [r2, #0]
 8001680:	183a      	adds	r2, r7, r0
 8001682:	0010      	movs	r0, r2
 8001684:	4798      	blx	r3
 8001686:	e001      	b.n	800168c <HostTask+0x198>
		  else
		  	taskYIELD();
 8001688:	f004 fb0a 	bl	8005ca0 <vPortYield>
	  while(pc.header.mode != finish) {
 800168c:	220c      	movs	r2, #12
 800168e:	18bb      	adds	r3, r7, r2
 8001690:	7a5b      	ldrb	r3, [r3, #9]
 8001692:	2b06      	cmp	r3, #6
 8001694:	d1e5      	bne.n	8001662 <HostTask+0x16e>
	  }
	  if(pc.IsValid(&pc) == no_error) {
 8001696:	18bb      	adds	r3, r7, r2
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	18ba      	adds	r2, r7, r2
 800169c:	0010      	movs	r0, r2
 800169e:	4798      	blx	r3

	  		  //OUTPUT
	  }

	  osDelay(5000);
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <HostTask+0x1c0>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f002 fbbc 	bl	8003e20 <osDelay>
	  CreateHost(&pc, hostBuffer, 1024, addr_linux, 0x18, REQR);
 80016a8:	e72c      	b.n	8001504 <HostTask+0x10>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	20000228 	.word	0x20000228
 80016b0:	20000114 	.word	0x20000114
 80016b4:	00001388 	.word	0x00001388

080016b8 <SlaveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SlaveTask */
void SlaveTask(void *argument)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b099      	sub	sp, #100	; 0x64
 80016bc:	af06      	add	r7, sp, #24
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SlaveTask */
  /* Infinite loop */

  Slave stm;
  uint8_t byte = 0;
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  uint8_t* data;

  CreateSlave(&stm, slaveBuffer, 1024);
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	00da      	lsls	r2, r3, #3
 80016cc:	495d      	ldr	r1, [pc, #372]	; (8001844 <SlaveTask+0x18c>)
 80016ce:	2310      	movs	r3, #16
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff faa0 	bl	8000c18 <CreateSlave>
  for(;;)
  {

	  while(stm.header.mode != finish) {
 80016d8:	e014      	b.n	8001704 <SlaveTask+0x4c>
		  if (HAL_UART_Receive(&huart5, &byte, 1, 100) != HAL_TIMEOUT)
 80016da:	240f      	movs	r4, #15
 80016dc:	1939      	adds	r1, r7, r4
 80016de:	485a      	ldr	r0, [pc, #360]	; (8001848 <SlaveTask+0x190>)
 80016e0:	2364      	movs	r3, #100	; 0x64
 80016e2:	2201      	movs	r2, #1
 80016e4:	f001 fd48 	bl	8003178 <HAL_UART_Receive>
 80016e8:	0003      	movs	r3, r0
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d008      	beq.n	8001700 <SlaveTask+0x48>
			  stm.Read(&stm, byte);
 80016ee:	2010      	movs	r0, #16
 80016f0:	183b      	adds	r3, r7, r0
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	193a      	adds	r2, r7, r4
 80016f6:	7811      	ldrb	r1, [r2, #0]
 80016f8:	183a      	adds	r2, r7, r0
 80016fa:	0010      	movs	r0, r2
 80016fc:	4798      	blx	r3
 80016fe:	e001      	b.n	8001704 <SlaveTask+0x4c>
		  else
		  	taskYIELD();
 8001700:	f004 face 	bl	8005ca0 <vPortYield>
	  while(stm.header.mode != finish) {
 8001704:	2410      	movs	r4, #16
 8001706:	193b      	adds	r3, r7, r4
 8001708:	7a5b      	ldrb	r3, [r3, #9]
 800170a:	2b06      	cmp	r3, #6
 800170c:	d1e5      	bne.n	80016da <SlaveTask+0x22>
	  }
	  if(stm.IsValid(&stm) == no_error) {
 800170e:	193b      	adds	r3, r7, r4
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	193a      	adds	r2, r7, r4
 8001714:	0010      	movs	r0, r2
 8001716:	4798      	blx	r3
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d158      	bne.n	80017ce <SlaveTask+0x116>

		  if(REQ_TYPE(stm)) {
 800171c:	0021      	movs	r1, r4
 800171e:	187b      	adds	r3, r7, r1
 8001720:	789b      	ldrb	r3, [r3, #2]
 8001722:	001a      	movs	r2, r3
 8001724:	2301      	movs	r3, #1
 8001726:	4013      	ands	r3, r2
 8001728:	d02e      	beq.n	8001788 <SlaveTask+0xd0>
			  //Read

			  //Get register address by GET_REG_ADDR
			  byte = 0x34;
 800172a:	200f      	movs	r0, #15
 800172c:	183b      	adds	r3, r7, r0
 800172e:	2234      	movs	r2, #52	; 0x34
 8001730:	701a      	strb	r2, [r3, #0]
			  stm.WriteData(&stm, &byte, 1);
 8001732:	000a      	movs	r2, r1
 8001734:	18bb      	adds	r3, r7, r2
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	1839      	adds	r1, r7, r0
 800173a:	0014      	movs	r4, r2
 800173c:	18b8      	adds	r0, r7, r2
 800173e:	2201      	movs	r2, #1
 8001740:	4798      	blx	r3
			  data = stm.CreateResponse(&stm);
 8001742:	0022      	movs	r2, r4
 8001744:	18bb      	adds	r3, r7, r2
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	18ba      	adds	r2, r7, r2
 800174a:	0010      	movs	r0, r2
 800174c:	4798      	blx	r3
 800174e:	0003      	movs	r3, r0
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
			  for(int i =0; i < RESPONSE_SIZE(stm); i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
 8001756:	e00c      	b.n	8001772 <SlaveTask+0xba>
			  	  HAL_UART_Transmit(&huart5, data + i, 1, 10);
 8001758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800175c:	18d1      	adds	r1, r2, r3
 800175e:	483a      	ldr	r0, [pc, #232]	; (8001848 <SlaveTask+0x190>)
 8001760:	230a      	movs	r3, #10
 8001762:	2201      	movs	r2, #1
 8001764:	f001 fc60 	bl	8003028 <HAL_UART_Transmit>
			  	  taskYIELD();
 8001768:	f004 fa9a 	bl	8005ca0 <vPortYield>
			  for(int i =0; i < RESPONSE_SIZE(stm); i++) {
 800176c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800176e:	3301      	adds	r3, #1
 8001770:	647b      	str	r3, [r7, #68]	; 0x44
 8001772:	2310      	movs	r3, #16
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff faed 	bl	8000d56 <GetSlavePackageSize>
 800177c:	0003      	movs	r3, r0
 800177e:	3305      	adds	r3, #5
 8001780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001782:	429a      	cmp	r2, r3
 8001784:	dde8      	ble.n	8001758 <SlaveTask+0xa0>
 8001786:	e044      	b.n	8001812 <SlaveTask+0x15a>
			  }
		  } else {
			  //Write
			  //Get register address by GET_REG_ADDR
			  //Get data by GET_DATA_PTR
			  data = stm.CreateResponse(&stm);
 8001788:	2210      	movs	r2, #16
 800178a:	18bb      	adds	r3, r7, r2
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	18ba      	adds	r2, r7, r2
 8001790:	0010      	movs	r0, r2
 8001792:	4798      	blx	r3
 8001794:	0003      	movs	r3, r0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
			  for(int i =0; i < RESPONSE_SIZE(stm); i++) {
 8001798:	2300      	movs	r3, #0
 800179a:	643b      	str	r3, [r7, #64]	; 0x40
 800179c:	e00c      	b.n	80017b8 <SlaveTask+0x100>
		  	  	  HAL_UART_Transmit(&huart5, data + i, 1, 10);
 800179e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a2:	18d1      	adds	r1, r2, r3
 80017a4:	4828      	ldr	r0, [pc, #160]	; (8001848 <SlaveTask+0x190>)
 80017a6:	230a      	movs	r3, #10
 80017a8:	2201      	movs	r2, #1
 80017aa:	f001 fc3d 	bl	8003028 <HAL_UART_Transmit>
		  	  	  taskYIELD();
 80017ae:	f004 fa77 	bl	8005ca0 <vPortYield>
			  for(int i =0; i < RESPONSE_SIZE(stm); i++) {
 80017b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b4:	3301      	adds	r3, #1
 80017b6:	643b      	str	r3, [r7, #64]	; 0x40
 80017b8:	2310      	movs	r3, #16
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff faca 	bl	8000d56 <GetSlavePackageSize>
 80017c2:	0003      	movs	r3, r0
 80017c4:	3305      	adds	r3, #5
 80017c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dde8      	ble.n	800179e <SlaveTask+0xe6>
 80017cc:	e021      	b.n	8001812 <SlaveTask+0x15a>
			  }

		  }

	  } else {
		  data = stm.CreateResponse(&stm);
 80017ce:	2210      	movs	r2, #16
 80017d0:	18bb      	adds	r3, r7, r2
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	18ba      	adds	r2, r7, r2
 80017d6:	0010      	movs	r0, r2
 80017d8:	4798      	blx	r3
 80017da:	0003      	movs	r3, r0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
		  for(int i =0; i < RESPONSE_SIZE(stm); i++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e2:	e00c      	b.n	80017fe <SlaveTask+0x146>
		  	  HAL_UART_Transmit(&huart5, data + i, 1, 10);
 80017e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e8:	18d1      	adds	r1, r2, r3
 80017ea:	4817      	ldr	r0, [pc, #92]	; (8001848 <SlaveTask+0x190>)
 80017ec:	230a      	movs	r3, #10
 80017ee:	2201      	movs	r2, #1
 80017f0:	f001 fc1a 	bl	8003028 <HAL_UART_Transmit>
		  	  taskYIELD();
 80017f4:	f004 fa54 	bl	8005ca0 <vPortYield>
		  for(int i =0; i < RESPONSE_SIZE(stm); i++) {
 80017f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fa:	3301      	adds	r3, #1
 80017fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017fe:	2310      	movs	r3, #16
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff faa7 	bl	8000d56 <GetSlavePackageSize>
 8001808:	0003      	movs	r3, r0
 800180a:	3305      	adds	r3, #5
 800180c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800180e:	429a      	cmp	r2, r3
 8001810:	dde8      	ble.n	80017e4 <SlaveTask+0x12c>
		  }

	  }
	  SlaveOut(stm);
 8001812:	2410      	movs	r4, #16
 8001814:	193b      	adds	r3, r7, r4
 8001816:	466a      	mov	r2, sp
 8001818:	0011      	movs	r1, r2
 800181a:	001a      	movs	r2, r3
 800181c:	3210      	adds	r2, #16
 800181e:	ca61      	ldmia	r2!, {r0, r5, r6}
 8001820:	c161      	stmia	r1!, {r0, r5, r6}
 8001822:	ca61      	ldmia	r2!, {r0, r5, r6}
 8001824:	c161      	stmia	r1!, {r0, r5, r6}
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f7ff fdad 	bl	800138c <SlaveOut>
	  CreateSlave(&stm, slaveBuffer, 1024);
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	00da      	lsls	r2, r3, #3
 8001836:	4903      	ldr	r1, [pc, #12]	; (8001844 <SlaveTask+0x18c>)
 8001838:	193b      	adds	r3, r7, r4
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff f9ec 	bl	8000c18 <CreateSlave>
	  while(stm.header.mode != finish) {
 8001840:	e760      	b.n	8001704 <SlaveTask+0x4c>
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	20000628 	.word	0x20000628
 8001848:	20000198 	.word	0x20000198

0800184c <StartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask */
  /* Infinite loop */

  for(;;)
 8001854:	e7fe      	b.n	8001854 <StartTask+0x8>

08001856 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185a:	b672      	cpsid	i
}
 800185c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185e:	e7fe      	b.n	800185e <Error_Handler+0x8>

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_MspInit+0x34>)
 8001866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_MspInit+0x34>)
 800186a:	2101      	movs	r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_MspInit+0x34>)
 8001872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_MspInit+0x34>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	0549      	lsls	r1, r1, #21
 800187a:	430a      	orrs	r2, r1
 800187c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800187e:	2302      	movs	r3, #2
 8001880:	425b      	negs	r3, r3
 8001882:	2200      	movs	r2, #0
 8001884:	2103      	movs	r1, #3
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fa50 	bl	8001d2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b08d      	sub	sp, #52	; 0x34
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	241c      	movs	r4, #28
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	0018      	movs	r0, r3
 80018a6:	2314      	movs	r3, #20
 80018a8:	001a      	movs	r2, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	f004 fc7b 	bl	80061a6 <memset>
  if(huart->Instance==USART2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a59      	ldr	r2, [pc, #356]	; (8001a1c <HAL_UART_MspInit+0x184>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12a      	bne.n	8001910 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80018bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018be:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0289      	lsls	r1, r1, #10
 80018c4:	430a      	orrs	r2, r1
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80018ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018cc:	4b54      	ldr	r3, [pc, #336]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	430a      	orrs	r2, r1
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d4:	4b52      	ldr	r3, [pc, #328]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018e0:	0021      	movs	r1, r4
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	220c      	movs	r2, #12
 80018e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2202      	movs	r2, #2
 80018ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2203      	movs	r2, #3
 80018f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2204      	movs	r2, #4
 80018fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	187a      	adds	r2, r7, r1
 8001902:	23a0      	movs	r3, #160	; 0xa0
 8001904:	05db      	lsls	r3, r3, #23
 8001906:	0011      	movs	r1, r2
 8001908:	0018      	movs	r0, r3
 800190a:	f000 fa31 	bl	8001d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800190e:	e081      	b.n	8001a14 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART4)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <HAL_UART_MspInit+0x18c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12a      	bne.n	8001970 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART4_CLK_ENABLE();
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_UART_MspInit+0x188>)
 800191c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800191e:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_UART_MspInit+0x188>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0309      	lsls	r1, r1, #12
 8001924:	430a      	orrs	r2, r1
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_UART_MspInit+0x188>)
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_UART_MspInit+0x188>)
 800192e:	2101      	movs	r1, #1
 8001930:	430a      	orrs	r2, r1
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
 8001934:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <HAL_UART_MspInit+0x188>)
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	2201      	movs	r2, #1
 800193a:	4013      	ands	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001940:	211c      	movs	r1, #28
 8001942:	187b      	adds	r3, r7, r1
 8001944:	2203      	movs	r2, #3
 8001946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	187b      	adds	r3, r7, r1
 800194a:	2202      	movs	r2, #2
 800194c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	187b      	adds	r3, r7, r1
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	187b      	adds	r3, r7, r1
 8001956:	2203      	movs	r2, #3
 8001958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2206      	movs	r2, #6
 800195e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	187a      	adds	r2, r7, r1
 8001962:	23a0      	movs	r3, #160	; 0xa0
 8001964:	05db      	lsls	r3, r3, #23
 8001966:	0011      	movs	r1, r2
 8001968:	0018      	movs	r0, r3
 800196a:	f000 fa01 	bl	8001d70 <HAL_GPIO_Init>
}
 800196e:	e051      	b.n	8001a14 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART5)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2c      	ldr	r2, [pc, #176]	; (8001a28 <HAL_UART_MspInit+0x190>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d14c      	bne.n	8001a14 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART5_CLK_ENABLE();
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_UART_MspInit+0x188>)
 800197c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_UART_MspInit+0x188>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0349      	lsls	r1, r1, #13
 8001984:	430a      	orrs	r2, r1
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_UART_MspInit+0x188>)
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_UART_MspInit+0x188>)
 800198e:	2104      	movs	r1, #4
 8001990:	430a      	orrs	r2, r1
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_UART_MspInit+0x188>)
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2204      	movs	r2, #4
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80019a6:	2108      	movs	r1, #8
 80019a8:	430a      	orrs	r2, r1
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_UART_MspInit+0x188>)
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2208      	movs	r2, #8
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019b8:	211c      	movs	r1, #28
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	0152      	lsls	r2, r2, #5
 80019c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	000c      	movs	r4, r1
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	2202      	movs	r2, #2
 80019c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	193b      	adds	r3, r7, r4
 80019d2:	2203      	movs	r2, #3
 80019d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	2202      	movs	r2, #2
 80019da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <HAL_UART_MspInit+0x194>)
 80019e0:	0019      	movs	r1, r3
 80019e2:	0010      	movs	r0, r2
 80019e4:	f000 f9c4 	bl	8001d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e8:	0021      	movs	r1, r4
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2204      	movs	r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2202      	movs	r2, #2
 80019f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2203      	movs	r2, #3
 8001a00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2206      	movs	r2, #6
 8001a06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_UART_MspInit+0x198>)
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	0010      	movs	r0, r2
 8001a10:	f000 f9ae 	bl	8001d70 <HAL_GPIO_Init>
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b00d      	add	sp, #52	; 0x34
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40004c00 	.word	0x40004c00
 8001a28:	40005000 	.word	0x40005000
 8001a2c:	50000800 	.word	0x50000800
 8001a30:	50000c00 	.word	0x50000c00

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f8c4 	bl	8001bd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a48:	f003 fcbe 	bl	80053c8 <xTaskGetSchedulerState>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d001      	beq.n	8001a56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a52:	f004 f991 	bl	8005d78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f004 fb56 	bl	800613c <__errno>
 8001a90:	0003      	movs	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	425b      	negs	r3, r3
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	18d2      	adds	r2, r2, r3
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b006      	add	sp, #24
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20005000 	.word	0x20005000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	20000e28 	.word	0x20000e28
 8001ac4:	20002840 	.word	0x20002840

08001ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001ad4:	480d      	ldr	r0, [pc, #52]	; (8001b0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001ad6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ada:	490e      	ldr	r1, [pc, #56]	; (8001b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <LoopForever+0xe>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af0:	4c0b      	ldr	r4, [pc, #44]	; (8001b20 <LoopForever+0x16>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001afe:	f7ff ffe3 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b02:	f004 fb21 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b06:	f7ff f9cf 	bl	8000ea8 <main>

08001b0a <LoopForever>:

LoopForever:
    b LoopForever
 8001b0a:	e7fe      	b.n	8001b0a <LoopForever>
   ldr   r0, =_estack
 8001b0c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b18:	08006fd8 	.word	0x08006fd8
  ldr r2, =_sbss
 8001b1c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b20:	20002840 	.word	0x20002840

08001b24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b24:	e7fe      	b.n	8001b24 <ADC1_COMP_IRQHandler>
	...

08001b28 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_Init+0x3c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_Init+0x3c>)
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f811 	bl	8001b68 <HAL_InitTick>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	e001      	b.n	8001b56 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b52:	f7ff fe85 	bl	8001860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	40022000 	.word	0x40022000

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_InitTick+0x5c>)
 8001b72:	681c      	ldr	r4, [r3, #0]
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_InitTick+0x60>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	0019      	movs	r1, r3
 8001b7a:	23fa      	movs	r3, #250	; 0xfa
 8001b7c:	0098      	lsls	r0, r3, #2
 8001b7e:	f7fe facd 	bl	800011c <__udivsi3>
 8001b82:	0003      	movs	r3, r0
 8001b84:	0019      	movs	r1, r3
 8001b86:	0020      	movs	r0, r4
 8001b88:	f7fe fac8 	bl	800011c <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 f8e1 	bl	8001d56 <HAL_SYSTICK_Config>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e00f      	b.n	8001bbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d80b      	bhi.n	8001bba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	425b      	negs	r3, r3
 8001ba8:	2200      	movs	r2, #0
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f8be 	bl	8001d2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_InitTick+0x64>)
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b003      	add	sp, #12
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	001a      	movs	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	18d2      	adds	r2, r2, r3
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000e2c 	.word	0x20000e2c

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	20000e2c 	.word	0x20000e2c

08001c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	0002      	movs	r2, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c1c:	d828      	bhi.n	8001c70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <__NVIC_SetPriority+0xd4>)
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	33c0      	adds	r3, #192	; 0xc0
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	589b      	ldr	r3, [r3, r2]
 8001c2e:	1dfa      	adds	r2, r7, #7
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	0011      	movs	r1, r2
 8001c34:	2203      	movs	r2, #3
 8001c36:	400a      	ands	r2, r1
 8001c38:	00d2      	lsls	r2, r2, #3
 8001c3a:	21ff      	movs	r1, #255	; 0xff
 8001c3c:	4091      	lsls	r1, r2
 8001c3e:	000a      	movs	r2, r1
 8001c40:	43d2      	mvns	r2, r2
 8001c42:	401a      	ands	r2, r3
 8001c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	019b      	lsls	r3, r3, #6
 8001c4a:	22ff      	movs	r2, #255	; 0xff
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	0018      	movs	r0, r3
 8001c54:	2303      	movs	r3, #3
 8001c56:	4003      	ands	r3, r0
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c5c:	481f      	ldr	r0, [pc, #124]	; (8001cdc <__NVIC_SetPriority+0xd4>)
 8001c5e:	1dfb      	adds	r3, r7, #7
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	430a      	orrs	r2, r1
 8001c68:	33c0      	adds	r3, #192	; 0xc0
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c6e:	e031      	b.n	8001cd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c70:	4a1b      	ldr	r2, [pc, #108]	; (8001ce0 <__NVIC_SetPriority+0xd8>)
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	0019      	movs	r1, r3
 8001c78:	230f      	movs	r3, #15
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	3b08      	subs	r3, #8
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3306      	adds	r3, #6
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	18d3      	adds	r3, r2, r3
 8001c86:	3304      	adds	r3, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	1dfa      	adds	r2, r7, #7
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	0011      	movs	r1, r2
 8001c90:	2203      	movs	r2, #3
 8001c92:	400a      	ands	r2, r1
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	21ff      	movs	r1, #255	; 0xff
 8001c98:	4091      	lsls	r1, r2
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	43d2      	mvns	r2, r2
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	401a      	ands	r2, r3
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	4003      	ands	r3, r0
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <__NVIC_SetPriority+0xd8>)
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	4023      	ands	r3, r4
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	3306      	adds	r3, #6
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	18c3      	adds	r3, r0, r3
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b003      	add	sp, #12
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	045b      	lsls	r3, r3, #17
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d301      	bcc.n	8001cfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e010      	b.n	8001d1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <SysTick_Config+0x44>)
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	3a01      	subs	r2, #1
 8001d02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d04:	2301      	movs	r3, #1
 8001d06:	425b      	negs	r3, r3
 8001d08:	2103      	movs	r1, #3
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff ff7c 	bl	8001c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x44>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x44>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	210f      	movs	r1, #15
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	1c02      	adds	r2, r0, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	0011      	movs	r1, r2
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff ff5d 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff ffbf 	bl	8001ce4 <SysTick_Config>
 8001d66:	0003      	movs	r3, r0
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d86:	e155      	b.n	8002034 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4091      	lsls	r1, r2
 8001d92:	000a      	movs	r2, r1
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d100      	bne.n	8001da0 <HAL_GPIO_Init+0x30>
 8001d9e:	e146      	b.n	800202e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d005      	beq.n	8001db8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d130      	bne.n	8001e1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	0013      	movs	r3, r2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dee:	2201      	movs	r2, #1
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	43da      	mvns	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	2201      	movs	r2, #1
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d017      	beq.n	8001e56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	43da      	mvns	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d123      	bne.n	8001eaa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	58d3      	ldr	r3, [r2, r3]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2207      	movs	r2, #7
 8001e74:	4013      	ands	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2107      	movs	r1, #7
 8001e8e:	400b      	ands	r3, r1
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	08da      	lsrs	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3208      	adds	r2, #8
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	23c0      	movs	r3, #192	; 0xc0
 8001ee4:	029b      	lsls	r3, r3, #10
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d100      	bne.n	8001eec <HAL_GPIO_Init+0x17c>
 8001eea:	e0a0      	b.n	800202e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eec:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_GPIO_Init+0x2dc>)
 8001eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef0:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_GPIO_Init+0x2dc>)
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef8:	4a55      	ldr	r2, [pc, #340]	; (8002050 <HAL_GPIO_Init+0x2e0>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	589b      	ldr	r3, [r3, r2]
 8001f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	409a      	lsls	r2, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	43da      	mvns	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	23a0      	movs	r3, #160	; 0xa0
 8001f20:	05db      	lsls	r3, r3, #23
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d01f      	beq.n	8001f66 <HAL_GPIO_Init+0x1f6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4a      	ldr	r2, [pc, #296]	; (8002054 <HAL_GPIO_Init+0x2e4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d019      	beq.n	8001f62 <HAL_GPIO_Init+0x1f2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a49      	ldr	r2, [pc, #292]	; (8002058 <HAL_GPIO_Init+0x2e8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_GPIO_Init+0x2ec>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00d      	beq.n	8001f5a <HAL_GPIO_Init+0x1ea>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a47      	ldr	r2, [pc, #284]	; (8002060 <HAL_GPIO_Init+0x2f0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <HAL_GPIO_Init+0x1e6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a46      	ldr	r2, [pc, #280]	; (8002064 <HAL_GPIO_Init+0x2f4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_GPIO_Init+0x1e2>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e00a      	b.n	8001f68 <HAL_GPIO_Init+0x1f8>
 8001f52:	2306      	movs	r3, #6
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x1f8>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x1f8>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x1f8>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x1f8>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x1f8>
 8001f66:	2300      	movs	r3, #0
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2e0>)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	035b      	lsls	r3, r3, #13
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43da      	mvns	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	039b      	lsls	r3, r3, #14
 800201c:	4013      	ands	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_GPIO_Init+0x2f8>)
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	40da      	lsrs	r2, r3
 800203c:	1e13      	subs	r3, r2, #0
 800203e:	d000      	beq.n	8002042 <HAL_GPIO_Init+0x2d2>
 8002040:	e6a2      	b.n	8001d88 <HAL_GPIO_Init+0x18>
  }
}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b006      	add	sp, #24
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	50000400 	.word	0x50000400
 8002058:	50000800 	.word	0x50000800
 800205c:	50000c00 	.word	0x50000c00
 8002060:	50001000 	.word	0x50001000
 8002064:	50001c00 	.word	0x50001c00
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	0008      	movs	r0, r1
 8002076:	0011      	movs	r1, r2
 8002078:	1cbb      	adds	r3, r7, #2
 800207a:	1c02      	adds	r2, r0, #0
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	1c7b      	adds	r3, r7, #1
 8002080:	1c0a      	adds	r2, r1, #0
 8002082:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002084:	1c7b      	adds	r3, r7, #1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208c:	1cbb      	adds	r3, r7, #2
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002096:	1cbb      	adds	r3, r7, #2
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f000 fbbf 	bl	800283a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020bc:	4bc9      	ldr	r3, [pc, #804]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	220c      	movs	r2, #12
 80020c2:	4013      	ands	r3, r2
 80020c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c6:	4bc7      	ldr	r3, [pc, #796]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d100      	bne.n	80020de <HAL_RCC_OscConfig+0x36>
 80020dc:	e07e      	b.n	80021dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d112      	bne.n	8002110 <HAL_RCC_OscConfig+0x68>
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	025b      	lsls	r3, r3, #9
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d10d      	bne.n	8002110 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	4bbb      	ldr	r3, [pc, #748]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	029b      	lsls	r3, r3, #10
 80020fc:	4013      	ands	r3, r2
 80020fe:	d100      	bne.n	8002102 <HAL_RCC_OscConfig+0x5a>
 8002100:	e06b      	b.n	80021da <HAL_RCC_OscConfig+0x132>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d167      	bne.n	80021da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f000 fb95 	bl	800283a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <HAL_RCC_OscConfig+0x84>
 800211c:	4bb1      	ldr	r3, [pc, #708]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4bb0      	ldr	r3, [pc, #704]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	0249      	lsls	r1, r1, #9
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e027      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	23a0      	movs	r3, #160	; 0xa0
 8002132:	02db      	lsls	r3, r3, #11
 8002134:	429a      	cmp	r2, r3
 8002136:	d10e      	bne.n	8002156 <HAL_RCC_OscConfig+0xae>
 8002138:	4baa      	ldr	r3, [pc, #680]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4ba9      	ldr	r3, [pc, #676]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	02c9      	lsls	r1, r1, #11
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	4ba7      	ldr	r3, [pc, #668]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4ba6      	ldr	r3, [pc, #664]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	0249      	lsls	r1, r1, #9
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e012      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002156:	4ba3      	ldr	r3, [pc, #652]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4ba2      	ldr	r3, [pc, #648]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800215c:	49a2      	ldr	r1, [pc, #648]	; (80023e8 <HAL_RCC_OscConfig+0x340>)
 800215e:	400a      	ands	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	4ba0      	ldr	r3, [pc, #640]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4b9c      	ldr	r3, [pc, #624]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b9b      	ldr	r3, [pc, #620]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002176:	499d      	ldr	r1, [pc, #628]	; (80023ec <HAL_RCC_OscConfig+0x344>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fd36 	bl	8001bf4 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218e:	f7ff fd31 	bl	8001bf4 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	; 0x64
 800219a:	d902      	bls.n	80021a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	f000 fb4c 	bl	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a2:	4b90      	ldr	r3, [pc, #576]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0ef      	beq.n	800218e <HAL_RCC_OscConfig+0xe6>
 80021ae:	e015      	b.n	80021dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fd20 	bl	8001bf4 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ba:	f7ff fd1b 	bl	8001bf4 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e336      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021cc:	4b85      	ldr	r3, [pc, #532]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	4013      	ands	r3, r2
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x112>
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d100      	bne.n	80021e8 <HAL_RCC_OscConfig+0x140>
 80021e6:	e099      	b.n	800231c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	2220      	movs	r2, #32
 80021f2:	4013      	ands	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80021f6:	4b7b      	ldr	r3, [pc, #492]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80021fc:	2120      	movs	r1, #32
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	2220      	movs	r2, #32
 8002206:	4393      	bics	r3, r2
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d13e      	bne.n	8002294 <HAL_RCC_OscConfig+0x1ec>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d13b      	bne.n	8002294 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2204      	movs	r2, #4
 8002222:	4013      	ands	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_RCC_OscConfig+0x188>
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e304      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x348>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	021a      	lsls	r2, r3, #8
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002246:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2209      	movs	r2, #9
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002258:	f000 fc42 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 800225c:	0001      	movs	r1, r0
 800225e:	4b61      	ldr	r3, [pc, #388]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	220f      	movs	r2, #15
 8002266:	4013      	ands	r3, r2
 8002268:	4a62      	ldr	r2, [pc, #392]	; (80023f4 <HAL_RCC_OscConfig+0x34c>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	000a      	movs	r2, r1
 800226e:	40da      	lsrs	r2, r3
 8002270:	4b61      	ldr	r3, [pc, #388]	; (80023f8 <HAL_RCC_OscConfig+0x350>)
 8002272:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002274:	4b61      	ldr	r3, [pc, #388]	; (80023fc <HAL_RCC_OscConfig+0x354>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2513      	movs	r5, #19
 800227a:	197c      	adds	r4, r7, r5
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff fc73 	bl	8001b68 <HAL_InitTick>
 8002282:	0003      	movs	r3, r0
 8002284:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002286:	197b      	adds	r3, r7, r5
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d046      	beq.n	800231c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800228e:	197b      	adds	r3, r7, r5
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	e2d2      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d027      	beq.n	80022ea <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800229a:	4b52      	ldr	r3, [pc, #328]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2209      	movs	r2, #9
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fca2 	bl	8001bf4 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff fc9d 	bl	8001bf4 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e2b8      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2204      	movs	r2, #4
 80022ce:	4013      	ands	r3, r2
 80022d0:	d0f1      	beq.n	80022b6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b44      	ldr	r3, [pc, #272]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <HAL_RCC_OscConfig+0x348>)
 80022d8:	4013      	ands	r3, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	021a      	lsls	r2, r3, #8
 80022e2:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	e018      	b.n	800231c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80022f0:	2101      	movs	r1, #1
 80022f2:	438a      	bics	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fc7d 	bl	8001bf4 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff fc78 	bl	8001bf4 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e293      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2204      	movs	r2, #4
 8002318:	4013      	ands	r3, r2
 800231a:	d1f1      	bne.n	8002300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2210      	movs	r2, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d100      	bne.n	8002328 <HAL_RCC_OscConfig+0x280>
 8002326:	e0a2      	b.n	800246e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d140      	bne.n	80023b0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4013      	ands	r3, r2
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x29e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e279      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <HAL_RCC_OscConfig+0x358>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	0a19      	lsrs	r1, r3, #8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	061a      	lsls	r2, r3, #24
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	0b5b      	lsrs	r3, r3, #13
 8002374:	3301      	adds	r3, #1
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	0212      	lsls	r2, r2, #8
 800237a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	210f      	movs	r1, #15
 8002384:	400b      	ands	r3, r1
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x34c>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_RCC_OscConfig+0x350>)
 800238e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_OscConfig+0x354>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2513      	movs	r5, #19
 8002396:	197c      	adds	r4, r7, r5
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fbe5 	bl	8001b68 <HAL_InitTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80023a2:	197b      	adds	r3, r7, r5
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d061      	beq.n	800246e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	e244      	b.n	800283a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d040      	beq.n	800243a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_OscConfig+0x33c>)
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fc15 	bl	8001bf4 <HAL_GetTick>
 80023ca:	0003      	movs	r3, r0
 80023cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023ce:	e019      	b.n	8002404 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d0:	f7ff fc10 	bl	8001bf4 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d912      	bls.n	8002404 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e22b      	b.n	800283a <HAL_RCC_OscConfig+0x792>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	fffeffff 	.word	0xfffeffff
 80023ec:	fffbffff 	.word	0xfffbffff
 80023f0:	ffffe0ff 	.word	0xffffe0ff
 80023f4:	08006ea0 	.word	0x08006ea0
 80023f8:	20000000 	.word	0x20000000
 80023fc:	20000004 	.word	0x20000004
 8002400:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002404:	4bca      	ldr	r3, [pc, #808]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4013      	ands	r3, r2
 800240e:	d0df      	beq.n	80023d0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002410:	4bc7      	ldr	r3, [pc, #796]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4ac7      	ldr	r2, [pc, #796]	; (8002734 <HAL_RCC_OscConfig+0x68c>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241e:	4bc4      	ldr	r3, [pc, #784]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002424:	4bc2      	ldr	r3, [pc, #776]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	0a19      	lsrs	r1, r3, #8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	061a      	lsls	r2, r3, #24
 8002432:	4bbf      	ldr	r3, [pc, #764]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	e019      	b.n	800246e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800243a:	4bbd      	ldr	r3, [pc, #756]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4bbc      	ldr	r3, [pc, #752]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002440:	49bd      	ldr	r1, [pc, #756]	; (8002738 <HAL_RCC_OscConfig+0x690>)
 8002442:	400a      	ands	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7ff fbd5 	bl	8001bf4 <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002450:	f7ff fbd0 	bl	8001bf4 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1eb      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002462:	4bb3      	ldr	r3, [pc, #716]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2208      	movs	r2, #8
 8002474:	4013      	ands	r3, r2
 8002476:	d036      	beq.n	80024e6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d019      	beq.n	80024b4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002480:	4bab      	ldr	r3, [pc, #684]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002484:	4baa      	ldr	r3, [pc, #680]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002486:	2101      	movs	r1, #1
 8002488:	430a      	orrs	r2, r1
 800248a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7ff fbb2 	bl	8001bf4 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002496:	f7ff fbad 	bl	8001bf4 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e1c8      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024a8:	4ba1      	ldr	r3, [pc, #644]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80024aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d0f1      	beq.n	8002496 <HAL_RCC_OscConfig+0x3ee>
 80024b2:	e018      	b.n	80024e6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b4:	4b9e      	ldr	r3, [pc, #632]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80024b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024b8:	4b9d      	ldr	r3, [pc, #628]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fb98 	bl	8001bf4 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f7ff fb93 	bl	8001bf4 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1ae      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024dc:	4b94      	ldr	r3, [pc, #592]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1f1      	bne.n	80024ca <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	4013      	ands	r3, r2
 80024ee:	d100      	bne.n	80024f2 <HAL_RCC_OscConfig+0x44a>
 80024f0:	e0ae      	b.n	8002650 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2023      	movs	r0, #35	; 0x23
 80024f4:	183b      	adds	r3, r7, r0
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b8d      	ldr	r3, [pc, #564]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80024fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	055b      	lsls	r3, r3, #21
 8002502:	4013      	ands	r3, r2
 8002504:	d109      	bne.n	800251a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b8a      	ldr	r3, [pc, #552]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	0549      	lsls	r1, r1, #21
 8002510:	430a      	orrs	r2, r1
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002514:	183b      	adds	r3, r7, r0
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x694>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d11a      	bne.n	800255c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_OscConfig+0x694>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b84      	ldr	r3, [pc, #528]	; (800273c <HAL_RCC_OscConfig+0x694>)
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0049      	lsls	r1, r1, #1
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002534:	f7ff fb5e 	bl	8001bf4 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253e:	f7ff fb59 	bl	8001bf4 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e174      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	4b7a      	ldr	r3, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x694>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4013      	ands	r3, r2
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	429a      	cmp	r2, r3
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d0>
 8002568:	4b71      	ldr	r3, [pc, #452]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800256a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800256c:	4b70      	ldr	r3, [pc, #448]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0049      	lsls	r1, r1, #1
 8002572:	430a      	orrs	r2, r1
 8002574:	651a      	str	r2, [r3, #80]	; 0x50
 8002576:	e031      	b.n	80025dc <HAL_RCC_OscConfig+0x534>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x4f2>
 8002580:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002586:	496c      	ldr	r1, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x690>)
 8002588:	400a      	ands	r2, r1
 800258a:	651a      	str	r2, [r3, #80]	; 0x50
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800258e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002590:	4b67      	ldr	r3, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002592:	496b      	ldr	r1, [pc, #428]	; (8002740 <HAL_RCC_OscConfig+0x698>)
 8002594:	400a      	ands	r2, r1
 8002596:	651a      	str	r2, [r3, #80]	; 0x50
 8002598:	e020      	b.n	80025dc <HAL_RCC_OscConfig+0x534>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	23a0      	movs	r3, #160	; 0xa0
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d10e      	bne.n	80025c4 <HAL_RCC_OscConfig+0x51c>
 80025a6:	4b62      	ldr	r3, [pc, #392]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025aa:	4b61      	ldr	r3, [pc, #388]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	00c9      	lsls	r1, r1, #3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	651a      	str	r2, [r3, #80]	; 0x50
 80025b4:	4b5e      	ldr	r3, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025b8:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	0049      	lsls	r1, r1, #1
 80025be:	430a      	orrs	r2, r1
 80025c0:	651a      	str	r2, [r3, #80]	; 0x50
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0x534>
 80025c4:	4b5a      	ldr	r3, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025ca:	495b      	ldr	r1, [pc, #364]	; (8002738 <HAL_RCC_OscConfig+0x690>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	651a      	str	r2, [r3, #80]	; 0x50
 80025d0:	4b57      	ldr	r3, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025d4:	4b56      	ldr	r3, [pc, #344]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80025d6:	495a      	ldr	r1, [pc, #360]	; (8002740 <HAL_RCC_OscConfig+0x698>)
 80025d8:	400a      	ands	r2, r1
 80025da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7ff fb06 	bl	8001bf4 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025ec:	e009      	b.n	8002602 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7ff fb01 	bl	8001bf4 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_RCC_OscConfig+0x69c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e11b      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002602:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d0ef      	beq.n	80025ee <HAL_RCC_OscConfig+0x546>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7ff faf0 	bl	8001bf4 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002618:	e009      	b.n	800262e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7ff faeb 	bl	8001bf4 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_RCC_OscConfig+0x69c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e105      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800262e:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d1ef      	bne.n	800261a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800263a:	2323      	movs	r3, #35	; 0x23
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800264a:	493f      	ldr	r1, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x6a0>)
 800264c:	400a      	ands	r2, r1
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2220      	movs	r2, #32
 8002656:	4013      	ands	r3, r2
 8002658:	d049      	beq.n	80026ee <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d026      	beq.n	80026b0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002668:	2101      	movs	r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	635a      	str	r2, [r3, #52]	; 0x34
 800267a:	4b34      	ldr	r3, [pc, #208]	; (800274c <HAL_RCC_OscConfig+0x6a4>)
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x6a4>)
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0189      	lsls	r1, r1, #6
 8002684:	430a      	orrs	r2, r1
 8002686:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fab4 	bl	8001bf4 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002692:	f7ff faaf 	bl	8001bf4 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ca      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d0f1      	beq.n	8002692 <HAL_RCC_OscConfig+0x5ea>
 80026ae:	e01e      	b.n	80026ee <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	438a      	bics	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_RCC_OscConfig+0x6a4>)
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_RCC_OscConfig+0x6a4>)
 80026c2:	4923      	ldr	r1, [pc, #140]	; (8002750 <HAL_RCC_OscConfig+0x6a8>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fa94 	bl	8001bf4 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026d2:	f7ff fa8f 	bl	8001bf4 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0aa      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2202      	movs	r2, #2
 80026ea:	4013      	ands	r3, r2
 80026ec:	d1f1      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d100      	bne.n	80026f8 <HAL_RCC_OscConfig+0x650>
 80026f6:	e09f      	b.n	8002838 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d100      	bne.n	8002700 <HAL_RCC_OscConfig+0x658>
 80026fe:	e078      	b.n	80027f2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	2b02      	cmp	r3, #2
 8002706:	d159      	bne.n	80027bc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_OscConfig+0x688>)
 800270e:	4911      	ldr	r1, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x6ac>)
 8002710:	400a      	ands	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff fa6e 	bl	8001bf4 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271e:	f7ff fa69 	bl	8001bf4 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d915      	bls.n	8002758 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e084      	b.n	800283a <HAL_RCC_OscConfig+0x792>
 8002730:	40021000 	.word	0x40021000
 8002734:	ffff1fff 	.word	0xffff1fff
 8002738:	fffffeff 	.word	0xfffffeff
 800273c:	40007000 	.word	0x40007000
 8002740:	fffffbff 	.word	0xfffffbff
 8002744:	00001388 	.word	0x00001388
 8002748:	efffffff 	.word	0xefffffff
 800274c:	40010000 	.word	0x40010000
 8002750:	ffffdfff 	.word	0xffffdfff
 8002754:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002758:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	049b      	lsls	r3, r3, #18
 8002760:	4013      	ands	r3, r2
 8002762:	d1dc      	bne.n	800271e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002764:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_RCC_OscConfig+0x7a0>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	431a      	orrs	r2, r3
 800277e:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002784:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	0449      	lsls	r1, r1, #17
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff fa2f 	bl	8001bf4 <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff fa2a 	bl	8001bf4 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e045      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	049b      	lsls	r3, r3, #18
 80027b6:	4013      	ands	r3, r2
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x6f4>
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 80027c2:	4922      	ldr	r1, [pc, #136]	; (800284c <HAL_RCC_OscConfig+0x7a4>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7ff fa14 	bl	8001bf4 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7ff fa0f 	bl	8001bf4 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e02a      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	049b      	lsls	r3, r3, #18
 80027ec:	4013      	ands	r3, r2
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x72a>
 80027f0:	e022      	b.n	8002838 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e01d      	b.n	800283a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_RCC_OscConfig+0x79c>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	025b      	lsls	r3, r3, #9
 800280a:	401a      	ands	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	429a      	cmp	r2, r3
 8002812:	d10f      	bne.n	8002834 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	23f0      	movs	r3, #240	; 0xf0
 8002818:	039b      	lsls	r3, r3, #14
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	23c0      	movs	r3, #192	; 0xc0
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	401a      	ands	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b00a      	add	sp, #40	; 0x28
 8002840:	bdb0      	pop	{r4, r5, r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	40021000 	.word	0x40021000
 8002848:	ff02ffff 	.word	0xff02ffff
 800284c:	feffffff 	.word	0xfeffffff

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b5b0      	push	{r4, r5, r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e128      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b96      	ldr	r3, [pc, #600]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d91e      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b93      	ldr	r3, [pc, #588]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2201      	movs	r2, #1
 8002878:	4393      	bics	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	4b90      	ldr	r3, [pc, #576]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002884:	f7ff f9b6 	bl	8001bf4 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288c:	e009      	b.n	80028a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288e:	f7ff f9b1 	bl	8001bf4 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	4a8a      	ldr	r2, [pc, #552]	; (8002ac4 <HAL_RCC_ClockConfig+0x274>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e109      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b87      	ldr	r3, [pc, #540]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2202      	movs	r2, #2
 80028b6:	4013      	ands	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ba:	4b83      	ldr	r3, [pc, #524]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	22f0      	movs	r2, #240	; 0xf0
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b7f      	ldr	r3, [pc, #508]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_RCC_ClockConfig+0x8a>
 80028d8:	e089      	b.n	80029ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e2:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	4013      	ands	r3, r2
 80028ec:	d120      	bne.n	8002930 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0e1      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028fa:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	049b      	lsls	r3, r3, #18
 8002902:	4013      	ands	r3, r2
 8002904:	d114      	bne.n	8002930 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0d5      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d106      	bne.n	8002920 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002912:	4b6d      	ldr	r3, [pc, #436]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2204      	movs	r2, #4
 8002918:	4013      	ands	r3, r2
 800291a:	d109      	bne.n	8002930 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0ca      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002920:	4b69      	ldr	r3, [pc, #420]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4013      	ands	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0c2      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002930:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2203      	movs	r2, #3
 8002936:	4393      	bics	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7ff f956 	bl	8001bf4 <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d111      	bne.n	8002978 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002954:	e009      	b.n	800296a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002956:	f7ff f94d 	bl	8001bf4 <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x274>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0a5      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800296a:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	220c      	movs	r2, #12
 8002970:	4013      	ands	r3, r2
 8002972:	2b08      	cmp	r3, #8
 8002974:	d1ef      	bne.n	8002956 <HAL_RCC_ClockConfig+0x106>
 8002976:	e03a      	b.n	80029ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d111      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002980:	e009      	b.n	8002996 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002982:	f7ff f937 	bl	8001bf4 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a4d      	ldr	r2, [pc, #308]	; (8002ac4 <HAL_RCC_ClockConfig+0x274>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e08f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002996:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	220c      	movs	r2, #12
 800299c:	4013      	ands	r3, r2
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d1ef      	bne.n	8002982 <HAL_RCC_ClockConfig+0x132>
 80029a2:	e024      	b.n	80029ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d11b      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ae:	f7ff f921 	bl	8001bf4 <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	4a42      	ldr	r2, [pc, #264]	; (8002ac4 <HAL_RCC_ClockConfig+0x274>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e079      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	220c      	movs	r2, #12
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d1ef      	bne.n	80029ae <HAL_RCC_ClockConfig+0x15e>
 80029ce:	e00e      	b.n	80029ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7ff f910 	bl	8001bf4 <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	4a3a      	ldr	r2, [pc, #232]	; (8002ac4 <HAL_RCC_ClockConfig+0x274>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e068      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	220c      	movs	r2, #12
 80029ea:	4013      	ands	r3, r2
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d21e      	bcs.n	8002a3a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4393      	bics	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a0e:	f7ff f8f1 	bl	8001bf4 <HAL_GetTick>
 8002a12:	0003      	movs	r3, r0
 8002a14:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	e009      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7ff f8ec 	bl	8001bf4 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <HAL_RCC_ClockConfig+0x274>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e044      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_ClockConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4013      	ands	r3, r2
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d1ee      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x27c>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <HAL_RCC_ClockConfig+0x280>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00da      	lsls	r2, r3, #3
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002a74:	430a      	orrs	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a78:	f000 f832 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a7c:	0001      	movs	r1, r0
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x278>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	220f      	movs	r2, #15
 8002a86:	4013      	ands	r3, r2
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x284>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	40da      	lsrs	r2, r3
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_RCC_ClockConfig+0x288>)
 8002a92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_ClockConfig+0x28c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	250b      	movs	r5, #11
 8002a9a:	197c      	adds	r4, r7, r5
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff f863 	bl	8001b68 <HAL_InitTick>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002aa6:	197b      	adds	r3, r7, r5
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002aae:	197b      	adds	r3, r7, r5
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bdb0      	pop	{r4, r5, r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	00001388 	.word	0x00001388
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	fffff8ff 	.word	0xfffff8ff
 8002ad0:	ffffc7ff 	.word	0xffffc7ff
 8002ad4:	08006ea0 	.word	0x08006ea0
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b5b0      	push	{r4, r5, r7, lr}
 8002ae2:	b08e      	sub	sp, #56	; 0x38
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ae6:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aee:	230c      	movs	r3, #12
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d014      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x40>
 8002af6:	d900      	bls.n	8002afa <HAL_RCC_GetSysClockFreq+0x1a>
 8002af8:	e07b      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x112>
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x24>
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d00b      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b02:	e076      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b04:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2210      	movs	r2, #16
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b12:	e07c      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b14:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b18:	e079      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b1a:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b1e:	e076      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	0c9a      	lsrs	r2, r3, #18
 8002b24:	230f      	movs	r3, #15
 8002b26:	401a      	ands	r2, r3
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x148>)
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	0d9a      	lsrs	r2, r3, #22
 8002b32:	2303      	movs	r3, #3
 8002b34:	4013      	ands	r3, r2
 8002b36:	3301      	adds	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	025b      	lsls	r3, r3, #9
 8002b42:	4013      	ands	r3, r2
 8002b44:	d01a      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	4a35      	ldr	r2, [pc, #212]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b50:	2300      	movs	r3, #0
 8002b52:	69b8      	ldr	r0, [r7, #24]
 8002b54:	69f9      	ldr	r1, [r7, #28]
 8002b56:	f7fd fb8d 	bl	8000274 <__aeabi_lmul>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	000b      	movs	r3, r1
 8002b5e:	0010      	movs	r0, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f7fd fb61 	bl	8000234 <__aeabi_uldivmod>
 8002b72:	0002      	movs	r2, r0
 8002b74:	000b      	movs	r3, r1
 8002b76:	0013      	movs	r3, r2
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7a:	e037      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2210      	movs	r2, #16
 8002b82:	4013      	ands	r3, r2
 8002b84:	d01a      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b90:	2300      	movs	r3, #0
 8002b92:	68b8      	ldr	r0, [r7, #8]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	f7fd fb6d 	bl	8000274 <__aeabi_lmul>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f7fd fb41 	bl	8000234 <__aeabi_uldivmod>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	000b      	movs	r3, r1
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bba:	e017      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x140>)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f7fd fb54 	bl	8000274 <__aeabi_lmul>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	000b      	movs	r3, r1
 8002bd0:	0010      	movs	r0, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	001c      	movs	r4, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	001d      	movs	r5, r3
 8002bdc:	0022      	movs	r2, r4
 8002bde:	002b      	movs	r3, r5
 8002be0:	f7fd fb28 	bl	8000234 <__aeabi_uldivmod>
 8002be4:	0002      	movs	r2, r0
 8002be6:	000b      	movs	r3, r1
 8002be8:	0013      	movs	r3, r2
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bf0:	e00d      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	0b5b      	lsrs	r3, r3, #13
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	3301      	adds	r3, #1
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	0212      	lsls	r2, r2, #8
 8002c06:	409a      	lsls	r2, r3
 8002c08:	0013      	movs	r3, r2
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c0c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b00e      	add	sp, #56	; 0x38
 8002c16:	bdb0      	pop	{r4, r5, r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	003d0900 	.word	0x003d0900
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200
 8002c28:	08006eb8 	.word	0x08006eb8

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	20000000 	.word	0x20000000

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff2 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c48:	0001      	movs	r1, r0
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	2207      	movs	r2, #7
 8002c52:	4013      	ands	r3, r2
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	40d9      	lsrs	r1, r3
 8002c5a:	000b      	movs	r3, r1
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08006eb0 	.word	0x08006eb0

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c70:	f7ff ffdc 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c74:	0001      	movs	r1, r0
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	0adb      	lsrs	r3, r3, #11
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	4013      	ands	r3, r2
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	40d9      	lsrs	r1, r3
 8002c86:	000b      	movs	r3, r1
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08006eb0 	.word	0x08006eb0

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ca0:	2317      	movs	r3, #23
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2220      	movs	r2, #32
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d100      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002cbe:	e0d9      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc0:	4ba4      	ldr	r3, [pc, #656]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d10a      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4ba1      	ldr	r3, [pc, #644]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd0:	4ba0      	ldr	r3, [pc, #640]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0549      	lsls	r1, r1, #21
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002cda:	2317      	movs	r3, #23
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b9d      	ldr	r3, [pc, #628]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4013      	ands	r3, r2
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b9a      	ldr	r3, [pc, #616]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b99      	ldr	r3, [pc, #612]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0049      	lsls	r1, r1, #1
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe ff7a 	bl	8001bf4 <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe ff75 	bl	8001bf4 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	; 0x64
 8002d12:	d901      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e118      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4013      	ands	r3, r2
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d24:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	039b      	lsls	r3, r3, #14
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	23c0      	movs	r3, #192	; 0xc0
 8002d36:	039b      	lsls	r3, r3, #14
 8002d38:	4013      	ands	r3, r2
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	23c0      	movs	r3, #192	; 0xc0
 8002d46:	039b      	lsls	r3, r3, #14
 8002d48:	4013      	ands	r3, r2
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	23c0      	movs	r3, #192	; 0xc0
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	401a      	ands	r2, r3
 8002d5a:	23c0      	movs	r3, #192	; 0xc0
 8002d5c:	029b      	lsls	r3, r3, #10
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10a      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d62:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d101      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0e8      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d78:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d7c:	23c0      	movs	r3, #192	; 0xc0
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d049      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	23c0      	movs	r3, #192	; 0xc0
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	4013      	ands	r3, r2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d004      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	4013      	ands	r3, r2
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	23c0      	movs	r3, #192	; 0xc0
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	4013      	ands	r3, r2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d034      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d02e      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002dc0:	4b64      	ldr	r3, [pc, #400]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	4b62      	ldr	r3, [pc, #392]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002dcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dce:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002dd0:	2180      	movs	r1, #128	; 0x80
 8002dd2:	0309      	lsls	r1, r1, #12
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd8:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ddc:	4b5d      	ldr	r3, [pc, #372]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002dde:	4960      	ldr	r1, [pc, #384]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002de4:	4b5b      	ldr	r3, [pc, #364]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d014      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fefe 	bl	8001bf4 <HAL_GetTick>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dfc:	e009      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fef9 	bl	8001bf4 <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e09b      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e12:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d0ef      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	23c0      	movs	r3, #192	; 0xc0
 8002e24:	029b      	lsls	r3, r3, #10
 8002e26:	401a      	ands	r2, r3
 8002e28:	23c0      	movs	r3, #192	; 0xc0
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002e30:	4b48      	ldr	r3, [pc, #288]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	23c0      	movs	r3, #192	; 0xc0
 8002e40:	039b      	lsls	r3, r3, #14
 8002e42:	401a      	ands	r2, r3
 8002e44:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	4b42      	ldr	r3, [pc, #264]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	23c0      	movs	r3, #192	; 0xc0
 8002e54:	029b      	lsls	r3, r3, #10
 8002e56:	401a      	ands	r2, r3
 8002e58:	4b3e      	ldr	r3, [pc, #248]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e5e:	2317      	movs	r3, #23
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6c:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e6e:	493f      	ldr	r1, [pc, #252]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7e:	4b35      	ldr	r3, [pc, #212]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	2203      	movs	r2, #3
 8002e84:	4393      	bics	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea0:	220c      	movs	r2, #12
 8002ea2:	4393      	bics	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002edc:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	4013      	ands	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	4013      	ands	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b006      	add	sp, #24
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	fffcffff 	.word	0xfffcffff
 8002f60:	fff7ffff 	.word	0xfff7ffff
 8002f64:	00001388 	.word	0x00001388
 8002f68:	ffcfffff 	.word	0xffcfffff
 8002f6c:	efffffff 	.word	0xefffffff
 8002f70:	fffff3ff 	.word	0xfffff3ff
 8002f74:	ffffcfff 	.word	0xffffcfff
 8002f78:	fbffffff 	.word	0xfbffffff
 8002f7c:	fff3ffff 	.word	0xfff3ffff

08002f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e044      	b.n	800301c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2274      	movs	r2, #116	; 0x74
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fe fc77 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2224      	movs	r2, #36	; 0x24
 8002fae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 f9c6 	bl	8003354 <UART_SetConfig>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e024      	b.n	800301c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fc59 	bl	8003894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	490d      	ldr	r1, [pc, #52]	; (8003024 <HAL_UART_Init+0xa4>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	212a      	movs	r1, #42	; 0x2a
 8002ffe:	438a      	bics	r2, r1
 8003000:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fcf1 	bl	80039fc <UART_CheckIdleState>
 800301a:	0003      	movs	r3, r0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffffb7ff 	.word	0xffffb7ff

08003028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303c:	2b20      	cmp	r3, #32
 800303e:	d000      	beq.n	8003042 <HAL_UART_Transmit+0x1a>
 8003040:	e095      	b.n	800316e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_UART_Transmit+0x28>
 8003048:	1dbb      	adds	r3, r7, #6
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e08d      	b.n	8003170 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	429a      	cmp	r2, r3
 800305e:	d109      	bne.n	8003074 <HAL_UART_Transmit+0x4c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e07d      	b.n	8003170 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2274      	movs	r2, #116	; 0x74
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_UART_Transmit+0x5a>
 800307e:	2302      	movs	r3, #2
 8003080:	e076      	b.n	8003170 <HAL_UART_Transmit+0x148>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2274      	movs	r2, #116	; 0x74
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	2100      	movs	r1, #0
 8003090:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003098:	f7fe fdac 	bl	8001bf4 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1dba      	adds	r2, r7, #6
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1dba      	adds	r2, r7, #6
 80030ae:	2152      	movs	r1, #82	; 0x52
 80030b0:	8812      	ldrh	r2, [r2, #0]
 80030b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	429a      	cmp	r2, r3
 80030be:	d108      	bne.n	80030d2 <HAL_UART_Transmit+0xaa>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e003      	b.n	80030da <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2274      	movs	r2, #116	; 0x74
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80030e2:	e02c      	b.n	800313e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	0013      	movs	r3, r2
 80030ee:	2200      	movs	r2, #0
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	f000 fccb 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d001      	beq.n	80030fe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e038      	b.n	8003170 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	001a      	movs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	05d2      	lsls	r2, r2, #23
 8003110:	0dd2      	lsrs	r2, r2, #23
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	3302      	adds	r3, #2
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e007      	b.n	800312c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3301      	adds	r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2252      	movs	r2, #82	; 0x52
 8003130:	5a9b      	ldrh	r3, [r3, r2]
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b299      	uxth	r1, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2252      	movs	r2, #82	; 0x52
 800313c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2252      	movs	r2, #82	; 0x52
 8003142:	5a9b      	ldrh	r3, [r3, r2]
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1cc      	bne.n	80030e4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	0013      	movs	r3, r2
 8003154:	2200      	movs	r2, #0
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	f000 fc98 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e005      	b.n	8003170 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b008      	add	sp, #32
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	1dbb      	adds	r3, r7, #6
 8003186:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800318c:	2b20      	cmp	r3, #32
 800318e:	d000      	beq.n	8003192 <HAL_UART_Receive+0x1a>
 8003190:	e0d9      	b.n	8003346 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_UART_Receive+0x28>
 8003198:	1dbb      	adds	r3, r7, #6
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0d1      	b.n	8003348 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	015b      	lsls	r3, r3, #5
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d109      	bne.n	80031c4 <HAL_UART_Receive+0x4c>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0c1      	b.n	8003348 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2274      	movs	r2, #116	; 0x74
 80031c8:	5c9b      	ldrb	r3, [r3, r2]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Receive+0x5a>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0ba      	b.n	8003348 <HAL_UART_Receive+0x1d0>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2274      	movs	r2, #116	; 0x74
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	2100      	movs	r1, #0
 80031e0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2222      	movs	r2, #34	; 0x22
 80031e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ee:	f7fe fd01 	bl	8001bf4 <HAL_GetTick>
 80031f2:	0003      	movs	r3, r0
 80031f4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1dba      	adds	r2, r7, #6
 80031fa:	2158      	movs	r1, #88	; 0x58
 80031fc:	8812      	ldrh	r2, [r2, #0]
 80031fe:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1dba      	adds	r2, r7, #6
 8003204:	215a      	movs	r1, #90	; 0x5a
 8003206:	8812      	ldrh	r2, [r2, #0]
 8003208:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	015b      	lsls	r3, r3, #5
 8003212:	429a      	cmp	r2, r3
 8003214:	d10d      	bne.n	8003232 <HAL_UART_Receive+0xba>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <HAL_UART_Receive+0xb0>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	225c      	movs	r2, #92	; 0x5c
 8003222:	494b      	ldr	r1, [pc, #300]	; (8003350 <HAL_UART_Receive+0x1d8>)
 8003224:	5299      	strh	r1, [r3, r2]
 8003226:	e02e      	b.n	8003286 <HAL_UART_Receive+0x10e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	225c      	movs	r2, #92	; 0x5c
 800322c:	21ff      	movs	r1, #255	; 0xff
 800322e:	5299      	strh	r1, [r3, r2]
 8003230:	e029      	b.n	8003286 <HAL_UART_Receive+0x10e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_UART_Receive+0xde>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <HAL_UART_Receive+0xd4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	225c      	movs	r2, #92	; 0x5c
 8003246:	21ff      	movs	r1, #255	; 0xff
 8003248:	5299      	strh	r1, [r3, r2]
 800324a:	e01c      	b.n	8003286 <HAL_UART_Receive+0x10e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	225c      	movs	r2, #92	; 0x5c
 8003250:	217f      	movs	r1, #127	; 0x7f
 8003252:	5299      	strh	r1, [r3, r2]
 8003254:	e017      	b.n	8003286 <HAL_UART_Receive+0x10e>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	055b      	lsls	r3, r3, #21
 800325e:	429a      	cmp	r2, r3
 8003260:	d10d      	bne.n	800327e <HAL_UART_Receive+0x106>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d104      	bne.n	8003274 <HAL_UART_Receive+0xfc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	225c      	movs	r2, #92	; 0x5c
 800326e:	217f      	movs	r1, #127	; 0x7f
 8003270:	5299      	strh	r1, [r3, r2]
 8003272:	e008      	b.n	8003286 <HAL_UART_Receive+0x10e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	225c      	movs	r2, #92	; 0x5c
 8003278:	213f      	movs	r1, #63	; 0x3f
 800327a:	5299      	strh	r1, [r3, r2]
 800327c:	e003      	b.n	8003286 <HAL_UART_Receive+0x10e>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	225c      	movs	r2, #92	; 0x5c
 8003282:	2100      	movs	r1, #0
 8003284:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003286:	2312      	movs	r3, #18
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	215c      	movs	r1, #92	; 0x5c
 800328e:	5a52      	ldrh	r2, [r2, r1]
 8003290:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	015b      	lsls	r3, r3, #5
 800329a:	429a      	cmp	r2, r3
 800329c:	d108      	bne.n	80032b0 <HAL_UART_Receive+0x138>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e003      	b.n	80032b8 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2274      	movs	r2, #116	; 0x74
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032c0:	e036      	b.n	8003330 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	0013      	movs	r3, r2
 80032cc:	2200      	movs	r2, #0
 80032ce:	2120      	movs	r1, #32
 80032d0:	f000 fbdc 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e035      	b.n	8003348 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2212      	movs	r2, #18
 80032ec:	18ba      	adds	r2, r7, r2
 80032ee:	8812      	ldrh	r2, [r2, #0]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3302      	adds	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e00e      	b.n	800331e <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2212      	movs	r2, #18
 800330a:	18ba      	adds	r2, r7, r2
 800330c:	8812      	ldrh	r2, [r2, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	4013      	ands	r3, r2
 8003312:	b2da      	uxtb	r2, r3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	225a      	movs	r2, #90	; 0x5a
 8003322:	5a9b      	ldrh	r3, [r3, r2]
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b299      	uxth	r1, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	225a      	movs	r2, #90	; 0x5a
 800332e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	225a      	movs	r2, #90	; 0x5a
 8003334:	5a9b      	ldrh	r3, [r3, r2]
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1c2      	bne.n	80032c2 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b008      	add	sp, #32
 800334e:	bd80      	pop	{r7, pc}
 8003350:	000001ff 	.word	0x000001ff

08003354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0
 800335a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800335c:	231a      	movs	r3, #26
 800335e:	2218      	movs	r2, #24
 8003360:	189b      	adds	r3, r3, r2
 8003362:	19db      	adds	r3, r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	4313      	orrs	r3, r2
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4ac3      	ldr	r2, [pc, #780]	; (8003694 <UART_SetConfig+0x340>)
 8003388:	4013      	ands	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4abe      	ldr	r2, [pc, #760]	; (8003698 <UART_SetConfig+0x344>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4ab8      	ldr	r2, [pc, #736]	; (800369c <UART_SetConfig+0x348>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c4:	4313      	orrs	r3, r2
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4ab4      	ldr	r2, [pc, #720]	; (80036a0 <UART_SetConfig+0x34c>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4ab0      	ldr	r2, [pc, #704]	; (80036a4 <UART_SetConfig+0x350>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d131      	bne.n	800344c <UART_SetConfig+0xf8>
 80033e8:	4baf      	ldr	r3, [pc, #700]	; (80036a8 <UART_SetConfig+0x354>)
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	2203      	movs	r2, #3
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d01d      	beq.n	8003430 <UART_SetConfig+0xdc>
 80033f4:	d823      	bhi.n	800343e <UART_SetConfig+0xea>
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d00c      	beq.n	8003414 <UART_SetConfig+0xc0>
 80033fa:	d820      	bhi.n	800343e <UART_SetConfig+0xea>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <UART_SetConfig+0xb2>
 8003400:	2b01      	cmp	r3, #1
 8003402:	d00e      	beq.n	8003422 <UART_SetConfig+0xce>
 8003404:	e01b      	b.n	800343e <UART_SetConfig+0xea>
 8003406:	231b      	movs	r3, #27
 8003408:	2218      	movs	r2, #24
 800340a:	189b      	adds	r3, r3, r2
 800340c:	19db      	adds	r3, r3, r7
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e0b4      	b.n	800357e <UART_SetConfig+0x22a>
 8003414:	231b      	movs	r3, #27
 8003416:	2218      	movs	r2, #24
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	2202      	movs	r2, #2
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e0ad      	b.n	800357e <UART_SetConfig+0x22a>
 8003422:	231b      	movs	r3, #27
 8003424:	2218      	movs	r2, #24
 8003426:	189b      	adds	r3, r3, r2
 8003428:	19db      	adds	r3, r3, r7
 800342a:	2204      	movs	r2, #4
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e0a6      	b.n	800357e <UART_SetConfig+0x22a>
 8003430:	231b      	movs	r3, #27
 8003432:	2218      	movs	r2, #24
 8003434:	189b      	adds	r3, r3, r2
 8003436:	19db      	adds	r3, r3, r7
 8003438:	2208      	movs	r2, #8
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e09f      	b.n	800357e <UART_SetConfig+0x22a>
 800343e:	231b      	movs	r3, #27
 8003440:	2218      	movs	r2, #24
 8003442:	189b      	adds	r3, r3, r2
 8003444:	19db      	adds	r3, r3, r7
 8003446:	2210      	movs	r2, #16
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e098      	b.n	800357e <UART_SetConfig+0x22a>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a96      	ldr	r2, [pc, #600]	; (80036ac <UART_SetConfig+0x358>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d131      	bne.n	80034ba <UART_SetConfig+0x166>
 8003456:	4b94      	ldr	r3, [pc, #592]	; (80036a8 <UART_SetConfig+0x354>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	220c      	movs	r2, #12
 800345c:	4013      	ands	r3, r2
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d01d      	beq.n	800349e <UART_SetConfig+0x14a>
 8003462:	d823      	bhi.n	80034ac <UART_SetConfig+0x158>
 8003464:	2b08      	cmp	r3, #8
 8003466:	d00c      	beq.n	8003482 <UART_SetConfig+0x12e>
 8003468:	d820      	bhi.n	80034ac <UART_SetConfig+0x158>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <UART_SetConfig+0x120>
 800346e:	2b04      	cmp	r3, #4
 8003470:	d00e      	beq.n	8003490 <UART_SetConfig+0x13c>
 8003472:	e01b      	b.n	80034ac <UART_SetConfig+0x158>
 8003474:	231b      	movs	r3, #27
 8003476:	2218      	movs	r2, #24
 8003478:	189b      	adds	r3, r3, r2
 800347a:	19db      	adds	r3, r3, r7
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e07d      	b.n	800357e <UART_SetConfig+0x22a>
 8003482:	231b      	movs	r3, #27
 8003484:	2218      	movs	r2, #24
 8003486:	189b      	adds	r3, r3, r2
 8003488:	19db      	adds	r3, r3, r7
 800348a:	2202      	movs	r2, #2
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e076      	b.n	800357e <UART_SetConfig+0x22a>
 8003490:	231b      	movs	r3, #27
 8003492:	2218      	movs	r2, #24
 8003494:	189b      	adds	r3, r3, r2
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2204      	movs	r2, #4
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e06f      	b.n	800357e <UART_SetConfig+0x22a>
 800349e:	231b      	movs	r3, #27
 80034a0:	2218      	movs	r2, #24
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	19db      	adds	r3, r3, r7
 80034a6:	2208      	movs	r2, #8
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e068      	b.n	800357e <UART_SetConfig+0x22a>
 80034ac:	231b      	movs	r3, #27
 80034ae:	2218      	movs	r2, #24
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	2210      	movs	r2, #16
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e061      	b.n	800357e <UART_SetConfig+0x22a>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7c      	ldr	r2, [pc, #496]	; (80036b0 <UART_SetConfig+0x35c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d106      	bne.n	80034d2 <UART_SetConfig+0x17e>
 80034c4:	231b      	movs	r3, #27
 80034c6:	2218      	movs	r2, #24
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	19db      	adds	r3, r3, r7
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	e055      	b.n	800357e <UART_SetConfig+0x22a>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a77      	ldr	r2, [pc, #476]	; (80036b4 <UART_SetConfig+0x360>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d106      	bne.n	80034ea <UART_SetConfig+0x196>
 80034dc:	231b      	movs	r3, #27
 80034de:	2218      	movs	r2, #24
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e049      	b.n	800357e <UART_SetConfig+0x22a>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6b      	ldr	r2, [pc, #428]	; (800369c <UART_SetConfig+0x348>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d13e      	bne.n	8003572 <UART_SetConfig+0x21e>
 80034f4:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <UART_SetConfig+0x354>)
 80034f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034f8:	23c0      	movs	r3, #192	; 0xc0
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4013      	ands	r3, r2
 80034fe:	22c0      	movs	r2, #192	; 0xc0
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	4293      	cmp	r3, r2
 8003504:	d027      	beq.n	8003556 <UART_SetConfig+0x202>
 8003506:	22c0      	movs	r2, #192	; 0xc0
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	4293      	cmp	r3, r2
 800350c:	d82a      	bhi.n	8003564 <UART_SetConfig+0x210>
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	4293      	cmp	r3, r2
 8003514:	d011      	beq.n	800353a <UART_SetConfig+0x1e6>
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	4293      	cmp	r3, r2
 800351c:	d822      	bhi.n	8003564 <UART_SetConfig+0x210>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <UART_SetConfig+0x1d8>
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	00d2      	lsls	r2, r2, #3
 8003526:	4293      	cmp	r3, r2
 8003528:	d00e      	beq.n	8003548 <UART_SetConfig+0x1f4>
 800352a:	e01b      	b.n	8003564 <UART_SetConfig+0x210>
 800352c:	231b      	movs	r3, #27
 800352e:	2218      	movs	r2, #24
 8003530:	189b      	adds	r3, r3, r2
 8003532:	19db      	adds	r3, r3, r7
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e021      	b.n	800357e <UART_SetConfig+0x22a>
 800353a:	231b      	movs	r3, #27
 800353c:	2218      	movs	r2, #24
 800353e:	189b      	adds	r3, r3, r2
 8003540:	19db      	adds	r3, r3, r7
 8003542:	2202      	movs	r2, #2
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e01a      	b.n	800357e <UART_SetConfig+0x22a>
 8003548:	231b      	movs	r3, #27
 800354a:	2218      	movs	r2, #24
 800354c:	189b      	adds	r3, r3, r2
 800354e:	19db      	adds	r3, r3, r7
 8003550:	2204      	movs	r2, #4
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e013      	b.n	800357e <UART_SetConfig+0x22a>
 8003556:	231b      	movs	r3, #27
 8003558:	2218      	movs	r2, #24
 800355a:	189b      	adds	r3, r3, r2
 800355c:	19db      	adds	r3, r3, r7
 800355e:	2208      	movs	r2, #8
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e00c      	b.n	800357e <UART_SetConfig+0x22a>
 8003564:	231b      	movs	r3, #27
 8003566:	2218      	movs	r2, #24
 8003568:	189b      	adds	r3, r3, r2
 800356a:	19db      	adds	r3, r3, r7
 800356c:	2210      	movs	r2, #16
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e005      	b.n	800357e <UART_SetConfig+0x22a>
 8003572:	231b      	movs	r3, #27
 8003574:	2218      	movs	r2, #24
 8003576:	189b      	adds	r3, r3, r2
 8003578:	19db      	adds	r3, r3, r7
 800357a:	2210      	movs	r2, #16
 800357c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a46      	ldr	r2, [pc, #280]	; (800369c <UART_SetConfig+0x348>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d000      	beq.n	800358a <UART_SetConfig+0x236>
 8003588:	e09a      	b.n	80036c0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800358a:	231b      	movs	r3, #27
 800358c:	2218      	movs	r2, #24
 800358e:	189b      	adds	r3, r3, r2
 8003590:	19db      	adds	r3, r3, r7
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d01d      	beq.n	80035d4 <UART_SetConfig+0x280>
 8003598:	dc20      	bgt.n	80035dc <UART_SetConfig+0x288>
 800359a:	2b04      	cmp	r3, #4
 800359c:	d015      	beq.n	80035ca <UART_SetConfig+0x276>
 800359e:	dc1d      	bgt.n	80035dc <UART_SetConfig+0x288>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <UART_SetConfig+0x256>
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d005      	beq.n	80035b4 <UART_SetConfig+0x260>
 80035a8:	e018      	b.n	80035dc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035aa:	f7ff fb49 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80035ae:	0003      	movs	r3, r0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b2:	e01c      	b.n	80035ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035b4:	4b3c      	ldr	r3, [pc, #240]	; (80036a8 <UART_SetConfig+0x354>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2210      	movs	r2, #16
 80035ba:	4013      	ands	r3, r2
 80035bc:	d002      	beq.n	80035c4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035be:	4b3e      	ldr	r3, [pc, #248]	; (80036b8 <UART_SetConfig+0x364>)
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035c2:	e014      	b.n	80035ee <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80035c4:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <UART_SetConfig+0x368>)
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035c8:	e011      	b.n	80035ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ca:	f7ff fa89 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 80035ce:	0003      	movs	r3, r0
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035d2:	e00c      	b.n	80035ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035da:	e008      	b.n	80035ee <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035e0:	231a      	movs	r3, #26
 80035e2:	2218      	movs	r2, #24
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	19db      	adds	r3, r3, r7
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
        break;
 80035ec:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d100      	bne.n	80035f6 <UART_SetConfig+0x2a2>
 80035f4:	e134      	b.n	8003860 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	0013      	movs	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003602:	429a      	cmp	r2, r3
 8003604:	d305      	bcc.n	8003612 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800360c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d906      	bls.n	8003620 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003612:	231a      	movs	r3, #26
 8003614:	2218      	movs	r2, #24
 8003616:	189b      	adds	r3, r3, r2
 8003618:	19db      	adds	r3, r3, r7
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e11f      	b.n	8003860 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	6939      	ldr	r1, [r7, #16]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	000b      	movs	r3, r1
 800362e:	0e1b      	lsrs	r3, r3, #24
 8003630:	0010      	movs	r0, r2
 8003632:	0205      	lsls	r5, r0, #8
 8003634:	431d      	orrs	r5, r3
 8003636:	000b      	movs	r3, r1
 8003638:	021c      	lsls	r4, r3, #8
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68b8      	ldr	r0, [r7, #8]
 8003648:	68f9      	ldr	r1, [r7, #12]
 800364a:	1900      	adds	r0, r0, r4
 800364c:	4169      	adcs	r1, r5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	2300      	movs	r3, #0
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f7fc fdea 	bl	8000234 <__aeabi_uldivmod>
 8003660:	0002      	movs	r2, r0
 8003662:	000b      	movs	r3, r1
 8003664:	0013      	movs	r3, r2
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800366a:	23c0      	movs	r3, #192	; 0xc0
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	429a      	cmp	r2, r3
 8003670:	d309      	bcc.n	8003686 <UART_SetConfig+0x332>
 8003672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	035b      	lsls	r3, r3, #13
 8003678:	429a      	cmp	r2, r3
 800367a:	d204      	bcs.n	8003686 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	e0ec      	b.n	8003860 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003686:	231a      	movs	r3, #26
 8003688:	2218      	movs	r2, #24
 800368a:	189b      	adds	r3, r3, r2
 800368c:	19db      	adds	r3, r3, r7
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e0e5      	b.n	8003860 <UART_SetConfig+0x50c>
 8003694:	efff69f3 	.word	0xefff69f3
 8003698:	ffffcfff 	.word	0xffffcfff
 800369c:	40004800 	.word	0x40004800
 80036a0:	fffff4ff 	.word	0xfffff4ff
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40004400 	.word	0x40004400
 80036b0:	40004c00 	.word	0x40004c00
 80036b4:	40005000 	.word	0x40005000
 80036b8:	003d0900 	.word	0x003d0900
 80036bc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d000      	beq.n	80036ce <UART_SetConfig+0x37a>
 80036cc:	e071      	b.n	80037b2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80036ce:	231b      	movs	r3, #27
 80036d0:	2218      	movs	r2, #24
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	19db      	adds	r3, r3, r7
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d822      	bhi.n	8003722 <UART_SetConfig+0x3ce>
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	4b68      	ldr	r3, [pc, #416]	; (8003880 <UART_SetConfig+0x52c>)
 80036e0:	18d3      	adds	r3, r2, r3
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e6:	f7ff faab 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80036ea:	0003      	movs	r3, r0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036ee:	e021      	b.n	8003734 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7ff fabc 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 80036f4:	0003      	movs	r3, r0
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036f8:	e01c      	b.n	8003734 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036fa:	4b62      	ldr	r3, [pc, #392]	; (8003884 <UART_SetConfig+0x530>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2210      	movs	r2, #16
 8003700:	4013      	ands	r3, r2
 8003702:	d002      	beq.n	800370a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003704:	4b60      	ldr	r3, [pc, #384]	; (8003888 <UART_SetConfig+0x534>)
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003708:	e014      	b.n	8003734 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800370a:	4b60      	ldr	r3, [pc, #384]	; (800388c <UART_SetConfig+0x538>)
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800370e:	e011      	b.n	8003734 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003710:	f7ff f9e6 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8003714:	0003      	movs	r3, r0
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003718:	e00c      	b.n	8003734 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003720:	e008      	b.n	8003734 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003726:	231a      	movs	r3, #26
 8003728:	2218      	movs	r2, #24
 800372a:	189b      	adds	r3, r3, r2
 800372c:	19db      	adds	r3, r3, r7
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
        break;
 8003732:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d100      	bne.n	800373c <UART_SetConfig+0x3e8>
 800373a:	e091      	b.n	8003860 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	005a      	lsls	r2, r3, #1
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	18d2      	adds	r2, r2, r3
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	0019      	movs	r1, r3
 800374e:	0010      	movs	r0, r2
 8003750:	f7fc fce4 	bl	800011c <__udivsi3>
 8003754:	0003      	movs	r3, r0
 8003756:	b29b      	uxth	r3, r3
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d921      	bls.n	80037a4 <UART_SetConfig+0x450>
 8003760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	429a      	cmp	r2, r3
 8003768:	d21c      	bcs.n	80037a4 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	b29a      	uxth	r2, r3
 800376e:	200e      	movs	r0, #14
 8003770:	2418      	movs	r4, #24
 8003772:	1903      	adds	r3, r0, r4
 8003774:	19db      	adds	r3, r3, r7
 8003776:	210f      	movs	r1, #15
 8003778:	438a      	bics	r2, r1
 800377a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	2207      	movs	r2, #7
 8003784:	4013      	ands	r3, r2
 8003786:	b299      	uxth	r1, r3
 8003788:	1903      	adds	r3, r0, r4
 800378a:	19db      	adds	r3, r3, r7
 800378c:	1902      	adds	r2, r0, r4
 800378e:	19d2      	adds	r2, r2, r7
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1902      	adds	r2, r0, r4
 800379c:	19d2      	adds	r2, r2, r7
 800379e:	8812      	ldrh	r2, [r2, #0]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	e05d      	b.n	8003860 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80037a4:	231a      	movs	r3, #26
 80037a6:	2218      	movs	r2, #24
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e056      	b.n	8003860 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037b2:	231b      	movs	r3, #27
 80037b4:	2218      	movs	r2, #24
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	19db      	adds	r3, r3, r7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d822      	bhi.n	8003806 <UART_SetConfig+0x4b2>
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	4b33      	ldr	r3, [pc, #204]	; (8003890 <UART_SetConfig+0x53c>)
 80037c4:	18d3      	adds	r3, r2, r3
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ca:	f7ff fa39 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80037ce:	0003      	movs	r3, r0
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037d2:	e021      	b.n	8003818 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d4:	f7ff fa4a 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 80037d8:	0003      	movs	r3, r0
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037dc:	e01c      	b.n	8003818 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <UART_SetConfig+0x530>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2210      	movs	r2, #16
 80037e4:	4013      	ands	r3, r2
 80037e6:	d002      	beq.n	80037ee <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <UART_SetConfig+0x534>)
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037ec:	e014      	b.n	8003818 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80037ee:	4b27      	ldr	r3, [pc, #156]	; (800388c <UART_SetConfig+0x538>)
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037f2:	e011      	b.n	8003818 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f4:	f7ff f974 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 80037f8:	0003      	movs	r3, r0
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037fc:	e00c      	b.n	8003818 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003804:	e008      	b.n	8003818 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800380a:	231a      	movs	r3, #26
 800380c:	2218      	movs	r2, #24
 800380e:	189b      	adds	r3, r3, r2
 8003810:	19db      	adds	r3, r3, r7
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
        break;
 8003816:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d020      	beq.n	8003860 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085a      	lsrs	r2, r3, #1
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	18d2      	adds	r2, r2, r3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0019      	movs	r1, r3
 800382e:	0010      	movs	r0, r2
 8003830:	f7fc fc74 	bl	800011c <__udivsi3>
 8003834:	0003      	movs	r3, r0
 8003836:	b29b      	uxth	r3, r3
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d909      	bls.n	8003854 <UART_SetConfig+0x500>
 8003840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	025b      	lsls	r3, r3, #9
 8003846:	429a      	cmp	r2, r3
 8003848:	d204      	bcs.n	8003854 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	e005      	b.n	8003860 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003854:	231a      	movs	r3, #26
 8003856:	2218      	movs	r2, #24
 8003858:	189b      	adds	r3, r3, r2
 800385a:	19db      	adds	r3, r3, r7
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2200      	movs	r2, #0
 8003864:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2200      	movs	r2, #0
 800386a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800386c:	231a      	movs	r3, #26
 800386e:	2218      	movs	r2, #24
 8003870:	189b      	adds	r3, r3, r2
 8003872:	19db      	adds	r3, r3, r7
 8003874:	781b      	ldrb	r3, [r3, #0]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b00e      	add	sp, #56	; 0x38
 800387c:	bdb0      	pop	{r4, r5, r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	08006ec4 	.word	0x08006ec4
 8003884:	40021000 	.word	0x40021000
 8003888:	003d0900 	.word	0x003d0900
 800388c:	00f42400 	.word	0x00f42400
 8003890:	08006ee8 	.word	0x08006ee8

08003894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00b      	beq.n	80038be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a4a      	ldr	r2, [pc, #296]	; (80039d8 <UART_AdvFeatureConfig+0x144>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2202      	movs	r2, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a43      	ldr	r2, [pc, #268]	; (80039dc <UART_AdvFeatureConfig+0x148>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2204      	movs	r2, #4
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00b      	beq.n	8003902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a3b      	ldr	r2, [pc, #236]	; (80039e0 <UART_AdvFeatureConfig+0x14c>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2208      	movs	r2, #8
 8003908:	4013      	ands	r3, r2
 800390a:	d00b      	beq.n	8003924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <UART_AdvFeatureConfig+0x150>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2210      	movs	r2, #16
 800392a:	4013      	ands	r3, r2
 800392c:	d00b      	beq.n	8003946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <UART_AdvFeatureConfig+0x154>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2220      	movs	r2, #32
 800394c:	4013      	ands	r3, r2
 800394e:	d00b      	beq.n	8003968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4a25      	ldr	r2, [pc, #148]	; (80039ec <UART_AdvFeatureConfig+0x158>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2240      	movs	r2, #64	; 0x40
 800396e:	4013      	ands	r3, r2
 8003970:	d01d      	beq.n	80039ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <UART_AdvFeatureConfig+0x15c>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	035b      	lsls	r3, r3, #13
 8003992:	429a      	cmp	r2, r3
 8003994:	d10b      	bne.n	80039ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <UART_AdvFeatureConfig+0x160>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	4013      	ands	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <UART_AdvFeatureConfig+0x164>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	fffdffff 	.word	0xfffdffff
 80039dc:	fffeffff 	.word	0xfffeffff
 80039e0:	fffbffff 	.word	0xfffbffff
 80039e4:	ffff7fff 	.word	0xffff7fff
 80039e8:	ffffefff 	.word	0xffffefff
 80039ec:	ffffdfff 	.word	0xffffdfff
 80039f0:	ffefffff 	.word	0xffefffff
 80039f4:	ff9fffff 	.word	0xff9fffff
 80039f8:	fff7ffff 	.word	0xfff7ffff

080039fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	2100      	movs	r1, #0
 8003a0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a0c:	f7fe f8f2 	bl	8001bf4 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d10c      	bne.n	8003a3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	0391      	lsls	r1, r2, #14
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <UART_CheckIdleState+0x8c>)
 8003a2c:	9200      	str	r2, [sp, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f000 f82c 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d001      	beq.n	8003a3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e021      	b.n	8003a80 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2204      	movs	r2, #4
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d10c      	bne.n	8003a64 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	03d1      	lsls	r1, r2, #15
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <UART_CheckIdleState+0x8c>)
 8003a54:	9200      	str	r2, [sp, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f000 f818 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e00d      	b.n	8003a80 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2274      	movs	r2, #116	; 0x74
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	01ffffff 	.word	0x01ffffff

08003a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b094      	sub	sp, #80	; 0x50
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9c:	e0a3      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	d100      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003aa4:	e09f      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe f8a5 	bl	8001bf4 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d13d      	bne.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	494c      	ldr	r1, [pc, #304]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	643b      	str	r3, [r7, #64]	; 0x40
 8003af8:	2301      	movs	r3, #1
 8003afa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	438a      	bics	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2274      	movs	r2, #116	; 0x74
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e067      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4013      	ands	r3, r2
 8003b42:	d050      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	401a      	ands	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d146      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	0112      	lsls	r2, r2, #4
 8003b60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b62:	f3ef 8310 	mrs	r3, PRIMASK
 8003b66:	613b      	str	r3, [r7, #16]
  return(result);
 8003b68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4923      	ldr	r1, [pc, #140]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2274      	movs	r2, #116	; 0x74
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e010      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	425a      	negs	r2, r3
 8003bf6:	4153      	adcs	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d100      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c04:	e74b      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b014      	add	sp, #80	; 0x50
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffffe5f 	.word	0xfffffe5f

08003c14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c26:	f3ef 8305 	mrs	r3, IPSR
 8003c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c32:	f3ef 8310 	mrs	r3, PRIMASK
 8003c36:	607b      	str	r3, [r7, #4]
  return(result);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <osKernelInitialize+0x2e>
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <osKernelInitialize+0x54>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d103      	bne.n	8003c4e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8003c46:	2306      	movs	r3, #6
 8003c48:	425b      	negs	r3, r3
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e00c      	b.n	8003c68 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <osKernelInitialize+0x54>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <osKernelInitialize+0x54>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e002      	b.n	8003c68 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003c62:	2301      	movs	r3, #1
 8003c64:	425b      	negs	r3, r3
 8003c66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c68:	68fb      	ldr	r3, [r7, #12]
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000e30 	.word	0x20000e30

08003c78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c7e:	f3ef 8305 	mrs	r3, IPSR
 8003c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	607b      	str	r3, [r7, #4]
  return(result);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <osKernelStart+0x2e>
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <osKernelStart+0x5c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d103      	bne.n	8003ca6 <osKernelStart+0x2e>
    stat = osErrorISR;
 8003c9e:	2306      	movs	r3, #6
 8003ca0:	425b      	negs	r3, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e010      	b.n	8003cc8 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <osKernelStart+0x5c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d109      	bne.n	8003cc2 <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cae:	f7ff ffb1 	bl	8003c14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <osKernelStart+0x5c>)
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003cb8:	f000 ff9c 	bl	8004bf4 <vTaskStartScheduler>
      stat = osOK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e002      	b.n	8003cc8 <osKernelStart+0x50>
    } else {
      stat = osError;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	20000e30 	.word	0x20000e30

08003cd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cd8:	b5b0      	push	{r4, r5, r7, lr}
 8003cda:	b090      	sub	sp, #64	; 0x40
 8003cdc:	af04      	add	r7, sp, #16
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce8:	f3ef 8305 	mrs	r3, IPSR
 8003cec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d000      	beq.n	8003cf6 <osThreadNew+0x1e>
 8003cf4:	e08c      	b.n	8003e10 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <osThreadNew+0x34>
 8003d02:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <osThreadNew+0x144>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d100      	bne.n	8003d0c <osThreadNew+0x34>
 8003d0a:	e081      	b.n	8003e10 <osThreadNew+0x138>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d100      	bne.n	8003d14 <osThreadNew+0x3c>
 8003d12:	e07d      	b.n	8003e10 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d18:	2318      	movs	r3, #24
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003d20:	2301      	movs	r3, #1
 8003d22:	425b      	negs	r3, r3
 8003d24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d044      	beq.n	8003db6 <osThreadNew+0xde>
      if (attr->name != NULL) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <osThreadNew+0x62>
        name = attr->name;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <osThreadNew+0x86>
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	2b38      	cmp	r3, #56	; 0x38
 8003d52:	d804      	bhi.n	8003d5e <osThreadNew+0x86>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d001      	beq.n	8003d62 <osThreadNew+0x8a>
        return (NULL);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e057      	b.n	8003e12 <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <osThreadNew+0xc0>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2bbb      	cmp	r3, #187	; 0xbb
 8003d80:	d90a      	bls.n	8003d98 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <osThreadNew+0xc0>
        mem = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	e010      	b.n	8003dba <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10c      	bne.n	8003dba <osThreadNew+0xe2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <osThreadNew+0xe2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <osThreadNew+0xe2>
          mem = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	e001      	b.n	8003dba <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d112      	bne.n	8003de6 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dc8:	68bd      	ldr	r5, [r7, #8]
 8003dca:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	9302      	str	r3, [sp, #8]
 8003dd2:	9201      	str	r2, [sp, #4]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	002b      	movs	r3, r5
 8003dda:	0022      	movs	r2, r4
 8003ddc:	f000 fd4b 	bl	8004876 <xTaskCreateStatic>
 8003de0:	0003      	movs	r3, r0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e014      	b.n	8003e10 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d111      	bne.n	8003e10 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68bc      	ldr	r4, [r7, #8]
 8003df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	2314      	movs	r3, #20
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	0023      	movs	r3, r4
 8003e02:	f000 fd7c 	bl	80048fe <xTaskCreate>
 8003e06:	0003      	movs	r3, r0
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d001      	beq.n	8003e10 <osThreadNew+0x138>
          hTask = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e10:	697b      	ldr	r3, [r7, #20]
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b00c      	add	sp, #48	; 0x30
 8003e18:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	20000e30 	.word	0x20000e30

08003e20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e28:	f3ef 8305 	mrs	r3, IPSR
 8003e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8003e2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e34:	f3ef 8310 	mrs	r3, PRIMASK
 8003e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <osDelay+0x30>
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <osDelay+0x4c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d103      	bne.n	8003e50 <osDelay+0x30>
    stat = osErrorISR;
 8003e48:	2306      	movs	r3, #6
 8003e4a:	425b      	negs	r3, r3
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e008      	b.n	8003e62 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <osDelay+0x42>
      vTaskDelay(ticks);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f000 fea3 	bl	8004ba8 <vTaskDelay>
    }
  }

  return (stat);
 8003e62:	697b      	ldr	r3, [r7, #20]
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000e30 	.word	0x20000e30

08003e70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <vApplicationGetIdleTaskMemory+0x28>)
 8003e80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4a05      	ldr	r2, [pc, #20]	; (8003e9c <vApplicationGetIdleTaskMemory+0x2c>)
 8003e86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	20000e34 	.word	0x20000e34
 8003e9c:	20000ef0 	.word	0x20000ef0

08003ea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a06      	ldr	r2, [pc, #24]	; (8003ec8 <vApplicationGetTimerTaskMemory+0x28>)
 8003eb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <vApplicationGetTimerTaskMemory+0x2c>)
 8003eb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2280      	movs	r2, #128	; 0x80
 8003ebc:	0052      	lsls	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	200010f0 	.word	0x200010f0
 8003ecc:	200011ac 	.word	0x200011ac

08003ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3308      	adds	r3, #8
 8003edc:	001a      	movs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4252      	negs	r2, r2
 8003ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3308      	adds	r3, #8
 8003eee:	001a      	movs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	001a      	movs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b004      	add	sp, #16
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	d103      	bne.n	8003f84 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	e00c      	b.n	8003f9e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3308      	adds	r3, #8
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e002      	b.n	8003f92 <vListInsert+0x2c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d2f6      	bcs.n	8003f8c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b004      	add	sp, #16
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6852      	ldr	r2, [r2, #4]
 8003ff2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d103      	bne.n	8004006 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	1e5a      	subs	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}

08004022 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <xQueueGenericReset+0x18>
 8004036:	b672      	cpsid	i
 8004038:	e7fe      	b.n	8004038 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800403a:	f001 fe41 	bl	8005cc0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	434b      	muls	r3, r1
 800404c:	18d2      	adds	r2, r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	1e59      	subs	r1, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	434b      	muls	r3, r1
 8004070:	18d2      	adds	r2, r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2244      	movs	r2, #68	; 0x44
 800407a:	21ff      	movs	r1, #255	; 0xff
 800407c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2245      	movs	r2, #69	; 0x45
 8004082:	21ff      	movs	r1, #255	; 0xff
 8004084:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3310      	adds	r3, #16
 8004098:	0018      	movs	r0, r3
 800409a:	f000 fffd 	bl	8005098 <xTaskRemoveFromEventList>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d00c      	beq.n	80040bc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040a2:	f001 fdfd 	bl	8005ca0 <vPortYield>
 80040a6:	e009      	b.n	80040bc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3310      	adds	r3, #16
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff ff0f 	bl	8003ed0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3324      	adds	r3, #36	; 0x24
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff ff0a 	bl	8003ed0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040bc:	f001 fe12 	bl	8005ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040c0:	2301      	movs	r3, #1
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b004      	add	sp, #16
 80040c8:	bd80      	pop	{r7, pc}

080040ca <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040ca:	b590      	push	{r4, r7, lr}
 80040cc:	b089      	sub	sp, #36	; 0x24
 80040ce:	af02      	add	r7, sp, #8
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <xQueueGenericCreateStatic+0x18>
 80040de:	b672      	cpsid	i
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <xQueueGenericCreateStatic+0x22>
 80040e8:	b672      	cpsid	i
 80040ea:	e7fe      	b.n	80040ea <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <xQueueGenericCreateStatic+0x2e>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <xQueueGenericCreateStatic+0x32>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <xQueueGenericCreateStatic+0x34>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <xQueueGenericCreateStatic+0x3c>
 8004102:	b672      	cpsid	i
 8004104:	e7fe      	b.n	8004104 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <xQueueGenericCreateStatic+0x48>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <xQueueGenericCreateStatic+0x4c>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <xQueueGenericCreateStatic+0x4e>
 8004116:	2300      	movs	r3, #0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <xQueueGenericCreateStatic+0x56>
 800411c:	b672      	cpsid	i
 800411e:	e7fe      	b.n	800411e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004120:	2350      	movs	r3, #80	; 0x50
 8004122:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b50      	cmp	r3, #80	; 0x50
 8004128:	d001      	beq.n	800412e <xQueueGenericCreateStatic+0x64>
 800412a:	b672      	cpsid	i
 800412c:	e7fe      	b.n	800412c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800412e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2246      	movs	r2, #70	; 0x46
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004142:	2328      	movs	r3, #40	; 0x28
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	781c      	ldrb	r4, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	0023      	movs	r3, r4
 8004154:	f000 f805 	bl	8004162 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004158:	697b      	ldr	r3, [r7, #20]
	}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b007      	add	sp, #28
 8004160:	bd90      	pop	{r4, r7, pc}

08004162 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	001a      	movs	r2, r3
 8004170:	1cfb      	adds	r3, r7, #3
 8004172:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	e002      	b.n	8004188 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2101      	movs	r1, #1
 8004198:	0018      	movs	r0, r3
 800419a:	f7ff ff42 	bl	8004022 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1cfa      	adds	r2, r7, #3
 80041a2:	214c      	movs	r1, #76	; 0x4c
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b004      	add	sp, #16
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <xQueueGenericSend+0x20>
 80041cc:	b672      	cpsid	i
 80041ce:	e7fe      	b.n	80041ce <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d103      	bne.n	80041de <xQueueGenericSend+0x2e>
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <xQueueGenericSend+0x32>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <xQueueGenericSend+0x34>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <xQueueGenericSend+0x3c>
 80041e8:	b672      	cpsid	i
 80041ea:	e7fe      	b.n	80041ea <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d103      	bne.n	80041fa <xQueueGenericSend+0x4a>
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <xQueueGenericSend+0x4e>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <xQueueGenericSend+0x50>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <xQueueGenericSend+0x58>
 8004204:	b672      	cpsid	i
 8004206:	e7fe      	b.n	8004206 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004208:	f001 f8de 	bl	80053c8 <xTaskGetSchedulerState>
 800420c:	1e03      	subs	r3, r0, #0
 800420e:	d102      	bne.n	8004216 <xQueueGenericSend+0x66>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <xQueueGenericSend+0x6a>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <xQueueGenericSend+0x6c>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <xQueueGenericSend+0x74>
 8004220:	b672      	cpsid	i
 8004222:	e7fe      	b.n	8004222 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004224:	f001 fd4c 	bl	8005cc0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <xQueueGenericSend+0x8a>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d11e      	bne.n	8004278 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 f99f 	bl	8004584 <prvCopyDataToQueue>
 8004246:	0003      	movs	r3, r0
 8004248:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	3324      	adds	r3, #36	; 0x24
 8004256:	0018      	movs	r0, r3
 8004258:	f000 ff1e 	bl	8005098 <xTaskRemoveFromEventList>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d007      	beq.n	8004270 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004260:	f001 fd1e 	bl	8005ca0 <vPortYield>
 8004264:	e004      	b.n	8004270 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800426c:	f001 fd18 	bl	8005ca0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004270:	f001 fd38 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 8004274:	2301      	movs	r3, #1
 8004276:	e05b      	b.n	8004330 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800427e:	f001 fd31 	bl	8005ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004282:	2300      	movs	r3, #0
 8004284:	e054      	b.n	8004330 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800428c:	2314      	movs	r3, #20
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	0018      	movs	r0, r3
 8004292:	f000 ff5d 	bl	8005150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004296:	2301      	movs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800429a:	f001 fd23 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800429e:	f000 fd07 	bl	8004cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042a2:	f001 fd0d 	bl	8005cc0 <vPortEnterCritical>
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	2244      	movs	r2, #68	; 0x44
 80042aa:	5c9b      	ldrb	r3, [r3, r2]
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	d103      	bne.n	80042ba <xQueueGenericSend+0x10a>
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2244      	movs	r2, #68	; 0x44
 80042b6:	2100      	movs	r1, #0
 80042b8:	5499      	strb	r1, [r3, r2]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	2245      	movs	r2, #69	; 0x45
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	3301      	adds	r3, #1
 80042c4:	d103      	bne.n	80042ce <xQueueGenericSend+0x11e>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2245      	movs	r2, #69	; 0x45
 80042ca:	2100      	movs	r1, #0
 80042cc:	5499      	strb	r1, [r3, r2]
 80042ce:	f001 fd09 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042d2:	1d3a      	adds	r2, r7, #4
 80042d4:	2314      	movs	r3, #20
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	0011      	movs	r1, r2
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 ff4c 	bl	8005178 <xTaskCheckForTimeOut>
 80042e0:	1e03      	subs	r3, r0, #0
 80042e2:	d11e      	bne.n	8004322 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fa51 	bl	800478e <prvIsQueueFull>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d011      	beq.n	8004314 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	3310      	adds	r3, #16
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f000 fe89 	bl	8005010 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	0018      	movs	r0, r3
 8004302:	f000 f9d0 	bl	80046a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004306:	f000 fcdf 	bl	8004cc8 <xTaskResumeAll>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d18a      	bne.n	8004224 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800430e:	f001 fcc7 	bl	8005ca0 <vPortYield>
 8004312:	e787      	b.n	8004224 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	0018      	movs	r0, r3
 8004318:	f000 f9c5 	bl	80046a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800431c:	f000 fcd4 	bl	8004cc8 <xTaskResumeAll>
 8004320:	e780      	b.n	8004224 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	0018      	movs	r0, r3
 8004326:	f000 f9be 	bl	80046a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800432a:	f000 fccd 	bl	8004cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800432e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b00a      	add	sp, #40	; 0x28
 8004336:	bd80      	pop	{r7, pc}

08004338 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b089      	sub	sp, #36	; 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <xQueueGenericSendFromISR+0x1c>
 8004350:	b672      	cpsid	i
 8004352:	e7fe      	b.n	8004352 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <xQueueGenericSendFromISR+0x2a>
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueGenericSendFromISR+0x2e>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericSendFromISR+0x30>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <xQueueGenericSendFromISR+0x38>
 800436c:	b672      	cpsid	i
 800436e:	e7fe      	b.n	800436e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d103      	bne.n	800437e <xQueueGenericSendFromISR+0x46>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <xQueueGenericSendFromISR+0x4a>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <xQueueGenericSendFromISR+0x4c>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <xQueueGenericSendFromISR+0x54>
 8004388:	b672      	cpsid	i
 800438a:	e7fe      	b.n	800438a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800438c:	f001 fcc2 	bl	8005d14 <ulSetInterruptMaskFromISR>
 8004390:	0003      	movs	r3, r0
 8004392:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <xQueueGenericSendFromISR+0x6e>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d12e      	bne.n	8004404 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043a6:	2413      	movs	r4, #19
 80043a8:	193b      	adds	r3, r7, r4
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	2145      	movs	r1, #69	; 0x45
 80043ae:	5c52      	ldrb	r2, [r2, r1]
 80043b0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 f8e3 	bl	8004584 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043be:	193b      	adds	r3, r7, r4
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b25b      	sxtb	r3, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	d111      	bne.n	80043ec <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 fe5f 	bl	8005098 <xTaskRemoveFromEventList>
 80043da:	1e03      	subs	r3, r0, #0
 80043dc:	d00f      	beq.n	80043fe <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e008      	b.n	80043fe <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043ec:	2313      	movs	r3, #19
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	b259      	sxtb	r1, r3
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2245      	movs	r2, #69	; 0x45
 80043fc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80043fe:	2301      	movs	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
		{
 8004402:	e001      	b.n	8004408 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	0018      	movs	r0, r3
 800440c:	f001 fc88 	bl	8005d20 <vClearInterruptMaskFromISR>

	return xReturn;
 8004410:	69fb      	ldr	r3, [r7, #28]
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b009      	add	sp, #36	; 0x24
 8004418:	bd90      	pop	{r4, r7, pc}

0800441a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08a      	sub	sp, #40	; 0x28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <xQueueReceive+0x1e>
 8004434:	b672      	cpsid	i
 8004436:	e7fe      	b.n	8004436 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <xQueueReceive+0x2c>
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueReceive+0x30>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueReceive+0x32>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <xQueueReceive+0x3a>
 8004450:	b672      	cpsid	i
 8004452:	e7fe      	b.n	8004452 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004454:	f000 ffb8 	bl	80053c8 <xTaskGetSchedulerState>
 8004458:	1e03      	subs	r3, r0, #0
 800445a:	d102      	bne.n	8004462 <xQueueReceive+0x48>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <xQueueReceive+0x4c>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <xQueueReceive+0x4e>
 8004466:	2300      	movs	r3, #0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <xQueueReceive+0x56>
 800446c:	b672      	cpsid	i
 800446e:	e7fe      	b.n	800446e <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004470:	f001 fc26 	bl	8005cc0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	0011      	movs	r1, r2
 8004486:	0018      	movs	r0, r3
 8004488:	f000 f8e7 	bl	800465a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	1e5a      	subs	r2, r3, #1
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	3310      	adds	r3, #16
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 fdf9 	bl	8005098 <xTaskRemoveFromEventList>
 80044a6:	1e03      	subs	r3, r0, #0
 80044a8:	d001      	beq.n	80044ae <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044aa:	f001 fbf9 	bl	8005ca0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044ae:	f001 fc19 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e062      	b.n	800457c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d103      	bne.n	80044c4 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044bc:	f001 fc12 	bl	8005ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e05b      	b.n	800457c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044ca:	2314      	movs	r3, #20
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 fe3e 	bl	8005150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044d8:	f001 fc04 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044dc:	f000 fbe8 	bl	8004cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044e0:	f001 fbee 	bl	8005cc0 <vPortEnterCritical>
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2244      	movs	r2, #68	; 0x44
 80044e8:	5c9b      	ldrb	r3, [r3, r2]
 80044ea:	b25b      	sxtb	r3, r3
 80044ec:	3301      	adds	r3, #1
 80044ee:	d103      	bne.n	80044f8 <xQueueReceive+0xde>
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2244      	movs	r2, #68	; 0x44
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	2245      	movs	r2, #69	; 0x45
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	d103      	bne.n	800450c <xQueueReceive+0xf2>
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2245      	movs	r2, #69	; 0x45
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]
 800450c:	f001 fbea 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004510:	1d3a      	adds	r2, r7, #4
 8004512:	2314      	movs	r3, #20
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	0011      	movs	r1, r2
 8004518:	0018      	movs	r0, r3
 800451a:	f000 fe2d 	bl	8005178 <xTaskCheckForTimeOut>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d11e      	bne.n	8004560 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f91c 	bl	8004762 <prvIsQueueEmpty>
 800452a:	1e03      	subs	r3, r0, #0
 800452c:	d011      	beq.n	8004552 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	3324      	adds	r3, #36	; 0x24
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	0011      	movs	r1, r2
 8004536:	0018      	movs	r0, r3
 8004538:	f000 fd6a 	bl	8005010 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	0018      	movs	r0, r3
 8004540:	f000 f8b1 	bl	80046a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004544:	f000 fbc0 	bl	8004cc8 <xTaskResumeAll>
 8004548:	1e03      	subs	r3, r0, #0
 800454a:	d191      	bne.n	8004470 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800454c:	f001 fba8 	bl	8005ca0 <vPortYield>
 8004550:	e78e      	b.n	8004470 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	0018      	movs	r0, r3
 8004556:	f000 f8a6 	bl	80046a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800455a:	f000 fbb5 	bl	8004cc8 <xTaskResumeAll>
 800455e:	e787      	b.n	8004470 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	0018      	movs	r0, r3
 8004564:	f000 f89f 	bl	80046a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004568:	f000 fbae 	bl	8004cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 f8f7 	bl	8004762 <prvIsQueueEmpty>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d100      	bne.n	800457a <xQueueReceive+0x160>
 8004578:	e77a      	b.n	8004470 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800457a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b00a      	add	sp, #40	; 0x28
 8004582:	bd80      	pop	{r7, pc}

08004584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10e      	bne.n	80045c0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d14e      	bne.n	8004648 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 ff26 	bl	8005400 <xTaskPriorityDisinherit>
 80045b4:	0003      	movs	r3, r0
 80045b6:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	e043      	b.n	8004648 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d119      	bne.n	80045fa <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6858      	ldr	r0, [r3, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	0019      	movs	r1, r3
 80045d2:	f001 fddf 	bl	8006194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	18d2      	adds	r2, r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d32b      	bcc.n	8004648 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	e026      	b.n	8004648 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68d8      	ldr	r0, [r3, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0019      	movs	r1, r3
 8004606:	f001 fdc5 	bl	8006194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	425b      	negs	r3, r3
 8004614:	18d2      	adds	r2, r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d207      	bcs.n	8004636 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	425b      	negs	r3, r3
 8004630:	18d2      	adds	r2, r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d105      	bne.n	8004648 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3b01      	subs	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004650:	697b      	ldr	r3, [r7, #20]
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b006      	add	sp, #24
 8004658:	bd80      	pop	{r7, pc}

0800465a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d018      	beq.n	800469e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	18d2      	adds	r2, r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d303      	bcc.n	800468e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68d9      	ldr	r1, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	0018      	movs	r0, r3
 800469a:	f001 fd7b 	bl	8006194 <memcpy>
	}
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046ae:	f001 fb07 	bl	8005cc0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046b2:	230f      	movs	r3, #15
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	2145      	movs	r1, #69	; 0x45
 80046ba:	5c52      	ldrb	r2, [r2, r1]
 80046bc:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046be:	e013      	b.n	80046e8 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d016      	beq.n	80046f6 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3324      	adds	r3, #36	; 0x24
 80046cc:	0018      	movs	r0, r3
 80046ce:	f000 fce3 	bl	8005098 <xTaskRemoveFromEventList>
 80046d2:	1e03      	subs	r3, r0, #0
 80046d4:	d001      	beq.n	80046da <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046d6:	f000 fd9f 	bl	8005218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046da:	210f      	movs	r1, #15
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	187b      	adds	r3, r7, r1
 80046e6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046e8:	230f      	movs	r3, #15
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	dce5      	bgt.n	80046c0 <prvUnlockQueue+0x1a>
 80046f4:	e000      	b.n	80046f8 <prvUnlockQueue+0x52>
					break;
 80046f6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2245      	movs	r2, #69	; 0x45
 80046fc:	21ff      	movs	r1, #255	; 0xff
 80046fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004700:	f001 faf0 	bl	8005ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004704:	f001 fadc 	bl	8005cc0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004708:	230e      	movs	r3, #14
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	2144      	movs	r1, #68	; 0x44
 8004710:	5c52      	ldrb	r2, [r2, r1]
 8004712:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004714:	e013      	b.n	800473e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3310      	adds	r3, #16
 8004722:	0018      	movs	r0, r3
 8004724:	f000 fcb8 	bl	8005098 <xTaskRemoveFromEventList>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d001      	beq.n	8004730 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800472c:	f000 fd74 	bl	8005218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004730:	210e      	movs	r1, #14
 8004732:	187b      	adds	r3, r7, r1
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	3b01      	subs	r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	187b      	adds	r3, r7, r1
 800473c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800473e:	230e      	movs	r3, #14
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b25b      	sxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	dce5      	bgt.n	8004716 <prvUnlockQueue+0x70>
 800474a:	e000      	b.n	800474e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800474c:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2244      	movs	r2, #68	; 0x44
 8004752:	21ff      	movs	r1, #255	; 0xff
 8004754:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004756:	f001 fac5 	bl	8005ce4 <vPortExitCritical>
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}

08004762 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800476a:	f001 faa9 	bl	8005cc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004776:	2301      	movs	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e001      	b.n	8004780 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004780:	f001 fab0 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8004784:	68fb      	ldr	r3, [r7, #12]
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}

0800478e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004796:	f001 fa93 	bl	8005cc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d102      	bne.n	80047ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e001      	b.n	80047b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047b0:	f001 fa98 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 80047b4:	68fb      	ldr	r3, [r7, #12]
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b004      	add	sp, #16
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e015      	b.n	80047fc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047d0:	4b0e      	ldr	r3, [pc, #56]	; (800480c <vQueueAddToRegistry+0x4c>)
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	00d2      	lsls	r2, r2, #3
 80047d6:	58d3      	ldr	r3, [r2, r3]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10c      	bne.n	80047f6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <vQueueAddToRegistry+0x4c>)
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	00d2      	lsls	r2, r2, #3
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <vQueueAddToRegistry+0x4c>)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	18d3      	adds	r3, r2, r3
 80047ee:	3304      	adds	r3, #4
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047f4:	e006      	b.n	8004804 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b07      	cmp	r3, #7
 8004800:	d9e6      	bls.n	80047d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b004      	add	sp, #16
 800480a:	bd80      	pop	{r7, pc}
 800480c:	200015ac 	.word	0x200015ac

08004810 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004820:	f001 fa4e 	bl	8005cc0 <vPortEnterCritical>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2244      	movs	r2, #68	; 0x44
 8004828:	5c9b      	ldrb	r3, [r3, r2]
 800482a:	b25b      	sxtb	r3, r3
 800482c:	3301      	adds	r3, #1
 800482e:	d103      	bne.n	8004838 <vQueueWaitForMessageRestricted+0x28>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2244      	movs	r2, #68	; 0x44
 8004834:	2100      	movs	r1, #0
 8004836:	5499      	strb	r1, [r3, r2]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2245      	movs	r2, #69	; 0x45
 800483c:	5c9b      	ldrb	r3, [r3, r2]
 800483e:	b25b      	sxtb	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	d103      	bne.n	800484c <vQueueWaitForMessageRestricted+0x3c>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2245      	movs	r2, #69	; 0x45
 8004848:	2100      	movs	r1, #0
 800484a:	5499      	strb	r1, [r3, r2]
 800484c:	f001 fa4a 	bl	8005ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3324      	adds	r3, #36	; 0x24
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 fbf3 	bl	800504c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff ff1c 	bl	80046a6 <prvUnlockQueue>
	}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b006      	add	sp, #24
 8004874:	bd80      	pop	{r7, pc}

08004876 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004876:	b590      	push	{r4, r7, lr}
 8004878:	b08d      	sub	sp, #52	; 0x34
 800487a:	af04      	add	r7, sp, #16
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <xTaskCreateStatic+0x18>
 800488a:	b672      	cpsid	i
 800488c:	e7fe      	b.n	800488c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <xTaskCreateStatic+0x22>
 8004894:	b672      	cpsid	i
 8004896:	e7fe      	b.n	8004896 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004898:	23bc      	movs	r3, #188	; 0xbc
 800489a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2bbc      	cmp	r3, #188	; 0xbc
 80048a0:	d001      	beq.n	80048a6 <xTaskCreateStatic+0x30>
 80048a2:	b672      	cpsid	i
 80048a4:	e7fe      	b.n	80048a4 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048a6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <xTaskCreateStatic+0x7a>
 80048ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01d      	beq.n	80048f0 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	22b9      	movs	r2, #185	; 0xb9
 80048c2:	2102      	movs	r1, #2
 80048c4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048c6:	683c      	ldr	r4, [r7, #0]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9303      	str	r3, [sp, #12]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	9302      	str	r3, [sp, #8]
 80048d6:	2318      	movs	r3, #24
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	0023      	movs	r3, r4
 80048e2:	f000 f859 	bl	8004998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 f8f5 	bl	8004ad8 <prvAddNewTaskToReadyList>
 80048ee:	e001      	b.n	80048f4 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048f4:	69bb      	ldr	r3, [r7, #24]
	}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b009      	add	sp, #36	; 0x24
 80048fc:	bd90      	pop	{r4, r7, pc}

080048fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048fe:	b590      	push	{r4, r7, lr}
 8004900:	b08d      	sub	sp, #52	; 0x34
 8004902:	af04      	add	r7, sp, #16
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	1dbb      	adds	r3, r7, #6
 800490c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800490e:	1dbb      	adds	r3, r7, #6
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	0018      	movs	r0, r3
 8004916:	f001 fa6b 	bl	8005df0 <pvPortMalloc>
 800491a:	0003      	movs	r3, r0
 800491c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d010      	beq.n	8004946 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004924:	20bc      	movs	r0, #188	; 0xbc
 8004926:	f001 fa63 	bl	8005df0 <pvPortMalloc>
 800492a:	0003      	movs	r3, r0
 800492c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
 800493a:	e006      	b.n	800494a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	0018      	movs	r0, r3
 8004940:	f001 fafc 	bl	8005f3c <vPortFree>
 8004944:	e001      	b.n	800494a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	22b9      	movs	r2, #185	; 0xb9
 8004954:	2100      	movs	r1, #0
 8004956:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004958:	1dbb      	adds	r3, r7, #6
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	683c      	ldr	r4, [r7, #0]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	2300      	movs	r3, #0
 8004964:	9303      	str	r3, [sp, #12]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	0023      	movs	r3, r4
 8004974:	f000 f810 	bl	8004998 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	0018      	movs	r0, r3
 800497c:	f000 f8ac 	bl	8004ad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004980:	2301      	movs	r3, #1
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e002      	b.n	800498c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004986:	2301      	movs	r3, #1
 8004988:	425b      	negs	r3, r3
 800498a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800498c:	69bb      	ldr	r3, [r7, #24]
	}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b009      	add	sp, #36	; 0x24
 8004994:	bd90      	pop	{r4, r7, pc}
	...

08004998 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	001a      	movs	r2, r3
 80049b0:	21a5      	movs	r1, #165	; 0xa5
 80049b2:	f001 fbf8 	bl	80061a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4942      	ldr	r1, [pc, #264]	; (8004ac8 <prvInitialiseNewTask+0x130>)
 80049be:	468c      	mov	ip, r1
 80049c0:	4463      	add	r3, ip
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	18d3      	adds	r3, r2, r3
 80049c6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2207      	movs	r2, #7
 80049cc:	4393      	bics	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2207      	movs	r2, #7
 80049d4:	4013      	ands	r3, r2
 80049d6:	d001      	beq.n	80049dc <prvInitialiseNewTask+0x44>
 80049d8:	b672      	cpsid	i
 80049da:	e7fe      	b.n	80049da <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d020      	beq.n	8004a24 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e013      	b.n	8004a10 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	18d3      	adds	r3, r2, r3
 80049ee:	7818      	ldrb	r0, [r3, #0]
 80049f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f2:	2134      	movs	r1, #52	; 0x34
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	18d3      	adds	r3, r2, r3
 80049f8:	185b      	adds	r3, r3, r1
 80049fa:	1c02      	adds	r2, r0, #0
 80049fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	d9e8      	bls.n	80049e8 <prvInitialiseNewTask+0x50>
 8004a16:	e000      	b.n	8004a1a <prvInitialiseNewTask+0x82>
			{
				break;
 8004a18:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2243      	movs	r2, #67	; 0x43
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5499      	strb	r1, [r3, r2]
 8004a22:	e003      	b.n	8004a2c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2234      	movs	r2, #52	; 0x34
 8004a28:	2100      	movs	r1, #0
 8004a2a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	2b37      	cmp	r3, #55	; 0x37
 8004a30:	d901      	bls.n	8004a36 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a32:	2337      	movs	r3, #55	; 0x37
 8004a34:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	6a3a      	ldr	r2, [r7, #32]
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	6a3a      	ldr	r2, [r7, #32]
 8004a40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	2200      	movs	r2, #0
 8004a46:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff fa5d 	bl	8003f0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	3318      	adds	r3, #24
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7ff fa58 	bl	8003f0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2238      	movs	r2, #56	; 0x38
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	22b4      	movs	r2, #180	; 0xb4
 8004a76:	2100      	movs	r1, #0
 8004a78:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	22b8      	movs	r2, #184	; 0xb8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	3354      	adds	r3, #84	; 0x54
 8004a86:	2260      	movs	r2, #96	; 0x60
 8004a88:	2100      	movs	r1, #0
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f001 fb8b 	bl	80061a6 <memset>
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <prvInitialiseNewTask+0x134>)
 8004a94:	659a      	str	r2, [r3, #88]	; 0x58
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <prvInitialiseNewTask+0x138>)
 8004a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <prvInitialiseNewTask+0x13c>)
 8004aa0:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	68f9      	ldr	r1, [r7, #12]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f001 f86b 	bl	8005b84 <pxPortInitialiseStack>
 8004aae:	0002      	movs	r2, r0
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004abe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b006      	add	sp, #24
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	3fffffff 	.word	0x3fffffff
 8004acc:	08006f54 	.word	0x08006f54
 8004ad0:	08006f74 	.word	0x08006f74
 8004ad4:	08006f34 	.word	0x08006f34

08004ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ae0:	f001 f8ee 	bl	8005cc0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <prvAddNewTaskToReadyList+0xb8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <prvAddNewTaskToReadyList+0xb8>)
 8004aec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004af6:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <prvAddNewTaskToReadyList+0xb8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d110      	bne.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b04:	f000 fba2 	bl	800524c <prvInitialiseTaskLists>
 8004b08:	e00d      	b.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <prvAddNewTaskToReadyList+0xc0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d802      	bhi.n	8004b26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b20:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <prvAddNewTaskToReadyList+0xc4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <prvAddNewTaskToReadyList+0xc4>)
 8004b2e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <prvAddNewTaskToReadyList+0xc4>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <prvAddNewTaskToReadyList+0xc8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d903      	bls.n	8004b4c <prvAddNewTaskToReadyList+0x74>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <prvAddNewTaskToReadyList+0xc8>)
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	0013      	movs	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	189b      	adds	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <prvAddNewTaskToReadyList+0xcc>)
 8004b5a:	189a      	adds	r2, r3, r2
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	0019      	movs	r1, r3
 8004b62:	0010      	movs	r0, r2
 8004b64:	f7ff f9dd 	bl	8003f22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b68:	f001 f8bc 	bl	8005ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvAddNewTaskToReadyList+0xc0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <prvAddNewTaskToReadyList+0xbc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d201      	bcs.n	8004b86 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b82:	f001 f88d 	bl	8005ca0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b002      	add	sp, #8
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	20001ac0 	.word	0x20001ac0
 8004b94:	200015ec 	.word	0x200015ec
 8004b98:	20001acc 	.word	0x20001acc
 8004b9c:	20001adc 	.word	0x20001adc
 8004ba0:	20001ac8 	.word	0x20001ac8
 8004ba4:	200015f0 	.word	0x200015f0

08004ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d010      	beq.n	8004bdc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <vTaskDelay+0x48>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <vTaskDelay+0x1e>
 8004bc2:	b672      	cpsid	i
 8004bc4:	e7fe      	b.n	8004bc4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004bc6:	f000 f873 	bl	8004cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 fc72 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bd4:	f000 f878 	bl	8004cc8 <xTaskResumeAll>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004be2:	f001 f85d 	bl	8005ca0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b004      	add	sp, #16
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	20001ae8 	.word	0x20001ae8

08004bf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c02:	003a      	movs	r2, r7
 8004c04:	1d39      	adds	r1, r7, #4
 8004c06:	2308      	movs	r3, #8
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff f930 	bl	8003e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c10:	683c      	ldr	r4, [r7, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	491e      	ldr	r1, [pc, #120]	; (8004c90 <vTaskStartScheduler+0x9c>)
 8004c18:	481e      	ldr	r0, [pc, #120]	; (8004c94 <vTaskStartScheduler+0xa0>)
 8004c1a:	9202      	str	r2, [sp, #8]
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	2300      	movs	r3, #0
 8004c24:	0022      	movs	r2, r4
 8004c26:	f7ff fe26 	bl	8004876 <xTaskCreateStatic>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <vTaskStartScheduler+0xa4>)
 8004c2e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c30:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <vTaskStartScheduler+0xa4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e001      	b.n	8004c42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d103      	bne.n	8004c50 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004c48:	f000 fc8a 	bl	8005560 <xTimerCreateTimerTask>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d113      	bne.n	8004c7e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004c56:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <vTaskStartScheduler+0xa8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3354      	adds	r3, #84	; 0x54
 8004c5e:	001a      	movs	r2, r3
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <vTaskStartScheduler+0xac>)
 8004c62:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <vTaskStartScheduler+0xb0>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	4252      	negs	r2, r2
 8004c6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <vTaskStartScheduler+0xb4>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <vTaskStartScheduler+0xb8>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c78:	f000 ffee 	bl	8005c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c7c:	e004      	b.n	8004c88 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	d101      	bne.n	8004c88 <vTaskStartScheduler+0x94>
 8004c84:	b672      	cpsid	i
 8004c86:	e7fe      	b.n	8004c86 <vTaskStartScheduler+0x92>
}
 8004c88:	46c0      	nop			; (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b005      	add	sp, #20
 8004c8e:	bd90      	pop	{r4, r7, pc}
 8004c90:	08006bec 	.word	0x08006bec
 8004c94:	0800522d 	.word	0x0800522d
 8004c98:	20001ae4 	.word	0x20001ae4
 8004c9c:	200015ec 	.word	0x200015ec
 8004ca0:	20000010 	.word	0x20000010
 8004ca4:	20001ae0 	.word	0x20001ae0
 8004ca8:	20001acc 	.word	0x20001acc
 8004cac:	20001ac4 	.word	0x20001ac4

08004cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <vTaskSuspendAll+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <vTaskSuspendAll+0x14>)
 8004cbc:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20001ae8 	.word	0x20001ae8

08004cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cd6:	4b3a      	ldr	r3, [pc, #232]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <xTaskResumeAll+0x1a>
 8004cde:	b672      	cpsid	i
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ce2:	f000 ffed 	bl	8005cc0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1e5a      	subs	r2, r3, #1
 8004cec:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004cee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d15b      	bne.n	8004db0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cf8:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <xTaskResumeAll+0xfc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d057      	beq.n	8004db0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d00:	e02f      	b.n	8004d62 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <xTaskResumeAll+0x100>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff f95f 	bl	8003fd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3304      	adds	r3, #4
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f7ff f95a 	bl	8003fd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <xTaskResumeAll+0x104>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d903      	bls.n	8004d32 <xTaskResumeAll+0x6a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <xTaskResumeAll+0x104>)
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	0013      	movs	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <xTaskResumeAll+0x108>)
 8004d40:	189a      	adds	r2, r3, r2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	0019      	movs	r1, r3
 8004d48:	0010      	movs	r0, r2
 8004d4a:	f7ff f8ea 	bl	8003f22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <xTaskResumeAll+0x10c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <xTaskResumeAll+0x110>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <xTaskResumeAll+0x100>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1cb      	bne.n	8004d02 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d70:	f000 fb0c 	bl	800538c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <xTaskResumeAll+0x114>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00f      	beq.n	8004da0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d80:	f000 f83c 	bl	8004dfc <xTaskIncrementTick>
 8004d84:	1e03      	subs	r3, r0, #0
 8004d86:	d002      	beq.n	8004d8e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <xTaskResumeAll+0x110>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f2      	bne.n	8004d80 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <xTaskResumeAll+0x114>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <xTaskResumeAll+0x110>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dac:	f000 ff78 	bl	8005ca0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db0:	f000 ff98 	bl	8005ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8004db4:	68bb      	ldr	r3, [r7, #8]
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	20001ae8 	.word	0x20001ae8
 8004dc4:	20001ac0 	.word	0x20001ac0
 8004dc8:	20001a80 	.word	0x20001a80
 8004dcc:	20001ac8 	.word	0x20001ac8
 8004dd0:	200015f0 	.word	0x200015f0
 8004dd4:	200015ec 	.word	0x200015ec
 8004dd8:	20001ad4 	.word	0x20001ad4
 8004ddc:	20001ad0 	.word	0x20001ad0

08004de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004de6:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <xTaskGetTickCount+0x18>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dec:	687b      	ldr	r3, [r7, #4]
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b002      	add	sp, #8
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	20001ac4 	.word	0x20001ac4

08004dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e06:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <xTaskIncrementTick+0x134>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d000      	beq.n	8004e10 <xTaskIncrementTick+0x14>
 8004e0e:	e07e      	b.n	8004f0e <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e10:	4b48      	ldr	r3, [pc, #288]	; (8004f34 <xTaskIncrementTick+0x138>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e18:	4b46      	ldr	r3, [pc, #280]	; (8004f34 <xTaskIncrementTick+0x138>)
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d117      	bne.n	8004e54 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e24:	4b44      	ldr	r3, [pc, #272]	; (8004f38 <xTaskIncrementTick+0x13c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <xTaskIncrementTick+0x36>
 8004e2e:	b672      	cpsid	i
 8004e30:	e7fe      	b.n	8004e30 <xTaskIncrementTick+0x34>
 8004e32:	4b41      	ldr	r3, [pc, #260]	; (8004f38 <xTaskIncrementTick+0x13c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	4b40      	ldr	r3, [pc, #256]	; (8004f3c <xTaskIncrementTick+0x140>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	; (8004f38 <xTaskIncrementTick+0x13c>)
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	4b3e      	ldr	r3, [pc, #248]	; (8004f3c <xTaskIncrementTick+0x140>)
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <xTaskIncrementTick+0x144>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	4b3c      	ldr	r3, [pc, #240]	; (8004f40 <xTaskIncrementTick+0x144>)
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f000 fa9c 	bl	800538c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e54:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <xTaskIncrementTick+0x148>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d349      	bcc.n	8004ef2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e5e:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <xTaskIncrementTick+0x13c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e68:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <xTaskIncrementTick+0x148>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4252      	negs	r2, r2
 8004e6e:	601a      	str	r2, [r3, #0]
					break;
 8004e70:	e03f      	b.n	8004ef2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <xTaskIncrementTick+0x13c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d203      	bcs.n	8004e92 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e8a:	4b2e      	ldr	r3, [pc, #184]	; (8004f44 <xTaskIncrementTick+0x148>)
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e90:	e02f      	b.n	8004ef2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	3304      	adds	r3, #4
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7ff f89b 	bl	8003fd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3318      	adds	r3, #24
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7ff f892 	bl	8003fd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <xTaskIncrementTick+0x14c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d903      	bls.n	8004ec2 <xTaskIncrementTick+0xc6>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <xTaskIncrementTick+0x14c>)
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	0013      	movs	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <xTaskIncrementTick+0x150>)
 8004ed0:	189a      	adds	r2, r3, r2
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	0010      	movs	r0, r2
 8004eda:	f7ff f822 	bl	8003f22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <xTaskIncrementTick+0x154>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3b8      	bcc.n	8004e5e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004eec:	2301      	movs	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef0:	e7b5      	b.n	8004e5e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <xTaskIncrementTick+0x154>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4914      	ldr	r1, [pc, #80]	; (8004f4c <xTaskIncrementTick+0x150>)
 8004efa:	0013      	movs	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	585b      	ldr	r3, [r3, r1]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d907      	bls.n	8004f18 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e004      	b.n	8004f18 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <xTaskIncrementTick+0x158>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <xTaskIncrementTick+0x158>)
 8004f16:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <xTaskIncrementTick+0x15c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f24:	697b      	ldr	r3, [r7, #20]
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b006      	add	sp, #24
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	20001ae8 	.word	0x20001ae8
 8004f34:	20001ac4 	.word	0x20001ac4
 8004f38:	20001a78 	.word	0x20001a78
 8004f3c:	20001a7c 	.word	0x20001a7c
 8004f40:	20001ad8 	.word	0x20001ad8
 8004f44:	20001ae0 	.word	0x20001ae0
 8004f48:	20001ac8 	.word	0x20001ac8
 8004f4c:	200015f0 	.word	0x200015f0
 8004f50:	200015ec 	.word	0x200015ec
 8004f54:	20001ad0 	.word	0x20001ad0
 8004f58:	20001ad4 	.word	0x20001ad4

08004f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f62:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <vTaskSwitchContext+0x9c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <vTaskSwitchContext+0xa0>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f70:	e03d      	b.n	8004fee <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <vTaskSwitchContext+0xa0>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f78:	4b21      	ldr	r3, [pc, #132]	; (8005000 <vTaskSwitchContext+0xa4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	e007      	b.n	8004f90 <vTaskSwitchContext+0x34>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <vTaskSwitchContext+0x2e>
 8004f86:	b672      	cpsid	i
 8004f88:	e7fe      	b.n	8004f88 <vTaskSwitchContext+0x2c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	491c      	ldr	r1, [pc, #112]	; (8005004 <vTaskSwitchContext+0xa8>)
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	0013      	movs	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	585b      	ldr	r3, [r3, r1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ee      	beq.n	8004f80 <vTaskSwitchContext+0x24>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	0013      	movs	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	189b      	adds	r3, r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <vTaskSwitchContext+0xa8>)
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d104      	bne.n	8004fd2 <vTaskSwitchContext+0x76>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <vTaskSwitchContext+0xac>)
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <vTaskSwitchContext+0xa4>)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <vTaskSwitchContext+0xac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3354      	adds	r3, #84	; 0x54
 8004fe8:	001a      	movs	r2, r3
 8004fea:	4b08      	ldr	r3, [pc, #32]	; (800500c <vTaskSwitchContext+0xb0>)
 8004fec:	601a      	str	r2, [r3, #0]
}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b002      	add	sp, #8
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	20001ae8 	.word	0x20001ae8
 8004ffc:	20001ad4 	.word	0x20001ad4
 8005000:	20001ac8 	.word	0x20001ac8
 8005004:	200015f0 	.word	0x200015f0
 8005008:	200015ec 	.word	0x200015ec
 800500c:	20000010 	.word	0x20000010

08005010 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <vTaskPlaceOnEventList+0x14>
 8005020:	b672      	cpsid	i
 8005022:	e7fe      	b.n	8005022 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <vTaskPlaceOnEventList+0x38>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3318      	adds	r3, #24
 800502a:	001a      	movs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	0011      	movs	r1, r2
 8005030:	0018      	movs	r0, r3
 8005032:	f7fe ff98 	bl	8003f66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2101      	movs	r1, #1
 800503a:	0018      	movs	r0, r3
 800503c:	f000 fa3c 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b002      	add	sp, #8
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200015ec 	.word	0x200015ec

0800504c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <vTaskPlaceOnEventListRestricted+0x16>
 800505e:	b672      	cpsid	i
 8005060:	e7fe      	b.n	8005060 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <vTaskPlaceOnEventListRestricted+0x48>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3318      	adds	r3, #24
 8005068:	001a      	movs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	0011      	movs	r1, r2
 800506e:	0018      	movs	r0, r3
 8005070:	f7fe ff57 	bl	8003f22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800507a:	2301      	movs	r3, #1
 800507c:	425b      	negs	r3, r3
 800507e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	0011      	movs	r1, r2
 8005086:	0018      	movs	r0, r3
 8005088:	f000 fa16 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
	}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	b004      	add	sp, #16
 8005092:	bd80      	pop	{r7, pc}
 8005094:	200015ec 	.word	0x200015ec

08005098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <xTaskRemoveFromEventList+0x1a>
 80050ae:	b672      	cpsid	i
 80050b0:	e7fe      	b.n	80050b0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3318      	adds	r3, #24
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7fe ff8b 	bl	8003fd2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050bc:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <xTaskRemoveFromEventList+0xa0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11d      	bne.n	8005100 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3304      	adds	r3, #4
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fe ff82 	bl	8003fd2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <xTaskRemoveFromEventList+0xa4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d903      	bls.n	80050e2 <xTaskRemoveFromEventList+0x4a>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <xTaskRemoveFromEventList+0xa4>)
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	0013      	movs	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a14      	ldr	r2, [pc, #80]	; (8005140 <xTaskRemoveFromEventList+0xa8>)
 80050f0:	189a      	adds	r2, r3, r2
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3304      	adds	r3, #4
 80050f6:	0019      	movs	r1, r3
 80050f8:	0010      	movs	r0, r2
 80050fa:	f7fe ff12 	bl	8003f22 <vListInsertEnd>
 80050fe:	e007      	b.n	8005110 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3318      	adds	r3, #24
 8005104:	001a      	movs	r2, r3
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <xTaskRemoveFromEventList+0xac>)
 8005108:	0011      	movs	r1, r2
 800510a:	0018      	movs	r0, r3
 800510c:	f7fe ff09 	bl	8003f22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <xTaskRemoveFromEventList+0xb0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	429a      	cmp	r2, r3
 800511c:	d905      	bls.n	800512a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800511e:	2301      	movs	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <xTaskRemoveFromEventList+0xb4>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e001      	b.n	800512e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	b004      	add	sp, #16
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20001ae8 	.word	0x20001ae8
 800513c:	20001ac8 	.word	0x20001ac8
 8005140:	200015f0 	.word	0x200015f0
 8005144:	20001a80 	.word	0x20001a80
 8005148:	200015ec 	.word	0x200015ec
 800514c:	20001ad4 	.word	0x20001ad4

08005150 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <vTaskInternalSetTimeOutState+0x20>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <vTaskInternalSetTimeOutState+0x24>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	605a      	str	r2, [r3, #4]
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b002      	add	sp, #8
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20001ad8 	.word	0x20001ad8
 8005174:	20001ac4 	.word	0x20001ac4

08005178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <xTaskCheckForTimeOut+0x14>
 8005188:	b672      	cpsid	i
 800518a:	e7fe      	b.n	800518a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <xTaskCheckForTimeOut+0x1e>
 8005192:	b672      	cpsid	i
 8005194:	e7fe      	b.n	8005194 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005196:	f000 fd93 	bl	8005cc0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800519a:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <xTaskCheckForTimeOut+0x98>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3301      	adds	r3, #1
 80051b0:	d102      	bne.n	80051b8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e024      	b.n	8005202 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b15      	ldr	r3, [pc, #84]	; (8005214 <xTaskCheckForTimeOut+0x9c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d007      	beq.n	80051d4 <xTaskCheckForTimeOut+0x5c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e016      	b.n	8005202 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d20c      	bcs.n	80051f8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f7ff ffaf 	bl	8005150 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e004      	b.n	8005202 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051fe:	2301      	movs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005202:	f000 fd6f 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8005206:	697b      	ldr	r3, [r7, #20]
}
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b006      	add	sp, #24
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20001ac4 	.word	0x20001ac4
 8005214:	20001ad8 	.word	0x20001ad8

08005218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800521c:	4b02      	ldr	r3, [pc, #8]	; (8005228 <vTaskMissedYield+0x10>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]
}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20001ad4 	.word	0x20001ad4

0800522c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005234:	f000 f84e 	bl	80052d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <prvIdleTask+0x1c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d9f9      	bls.n	8005234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005240:	f000 fd2e 	bl	8005ca0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005244:	e7f6      	b.n	8005234 <prvIdleTask+0x8>
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	200015f0 	.word	0x200015f0

0800524c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	e00c      	b.n	8005272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	0013      	movs	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	189b      	adds	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <prvInitialiseTaskLists+0x68>)
 8005264:	189b      	adds	r3, r3, r2
 8005266:	0018      	movs	r0, r3
 8005268:	f7fe fe32 	bl	8003ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3301      	adds	r3, #1
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b37      	cmp	r3, #55	; 0x37
 8005276:	d9ef      	bls.n	8005258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <prvInitialiseTaskLists+0x6c>)
 800527a:	0018      	movs	r0, r3
 800527c:	f7fe fe28 	bl	8003ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005280:	4b0e      	ldr	r3, [pc, #56]	; (80052bc <prvInitialiseTaskLists+0x70>)
 8005282:	0018      	movs	r0, r3
 8005284:	f7fe fe24 	bl	8003ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005288:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <prvInitialiseTaskLists+0x74>)
 800528a:	0018      	movs	r0, r3
 800528c:	f7fe fe20 	bl	8003ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <prvInitialiseTaskLists+0x78>)
 8005292:	0018      	movs	r0, r3
 8005294:	f7fe fe1c 	bl	8003ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <prvInitialiseTaskLists+0x7c>)
 800529a:	0018      	movs	r0, r3
 800529c:	f7fe fe18 	bl	8003ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <prvInitialiseTaskLists+0x80>)
 80052a2:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <prvInitialiseTaskLists+0x6c>)
 80052a4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <prvInitialiseTaskLists+0x84>)
 80052a8:	4a04      	ldr	r2, [pc, #16]	; (80052bc <prvInitialiseTaskLists+0x70>)
 80052aa:	601a      	str	r2, [r3, #0]
}
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	200015f0 	.word	0x200015f0
 80052b8:	20001a50 	.word	0x20001a50
 80052bc:	20001a64 	.word	0x20001a64
 80052c0:	20001a80 	.word	0x20001a80
 80052c4:	20001a94 	.word	0x20001a94
 80052c8:	20001aac 	.word	0x20001aac
 80052cc:	20001a78 	.word	0x20001a78
 80052d0:	20001a7c 	.word	0x20001a7c

080052d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052da:	e01a      	b.n	8005312 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80052dc:	f000 fcf0 	bl	8005cc0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e0:	4b10      	ldr	r3, [pc, #64]	; (8005324 <prvCheckTasksWaitingTermination+0x50>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7fe fe70 	bl	8003fd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <prvCheckTasksWaitingTermination+0x54>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	1e5a      	subs	r2, r3, #1
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <prvCheckTasksWaitingTermination+0x54>)
 80052fa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <prvCheckTasksWaitingTermination+0x58>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	1e5a      	subs	r2, r3, #1
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <prvCheckTasksWaitingTermination+0x58>)
 8005304:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005306:	f000 fced 	bl	8005ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f000 f80f 	bl	8005330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <prvCheckTasksWaitingTermination+0x58>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e0      	bne.n	80052dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b002      	add	sp, #8
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20001a94 	.word	0x20001a94
 8005328:	20001ac0 	.word	0x20001ac0
 800532c:	20001aa8 	.word	0x20001aa8

08005330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3354      	adds	r3, #84	; 0x54
 800533c:	0018      	movs	r0, r3
 800533e:	f000 ffe1 	bl	8006304 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	22b9      	movs	r2, #185	; 0xb9
 8005346:	5c9b      	ldrb	r3, [r3, r2]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	0018      	movs	r0, r3
 8005352:	f000 fdf3 	bl	8005f3c <vPortFree>
				vPortFree( pxTCB );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 fdef 	bl	8005f3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800535e:	e010      	b.n	8005382 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	22b9      	movs	r2, #185	; 0xb9
 8005364:	5c9b      	ldrb	r3, [r3, r2]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d104      	bne.n	8005374 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 fde5 	bl	8005f3c <vPortFree>
	}
 8005372:	e006      	b.n	8005382 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	22b9      	movs	r2, #185	; 0xb9
 8005378:	5c9b      	ldrb	r3, [r3, r2]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d001      	beq.n	8005382 <prvDeleteTCB+0x52>
 800537e:	b672      	cpsid	i
 8005380:	e7fe      	b.n	8005380 <prvDeleteTCB+0x50>
	}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	46bd      	mov	sp, r7
 8005386:	b002      	add	sp, #8
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <prvResetNextTaskUnblockTime+0x34>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <prvResetNextTaskUnblockTime+0x38>)
 800539e:	2201      	movs	r2, #1
 80053a0:	4252      	negs	r2, r2
 80053a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053a4:	e008      	b.n	80053b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <prvResetNextTaskUnblockTime+0x34>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <prvResetNextTaskUnblockTime+0x38>)
 80053b6:	601a      	str	r2, [r3, #0]
}
 80053b8:	46c0      	nop			; (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b002      	add	sp, #8
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20001a78 	.word	0x20001a78
 80053c4:	20001ae0 	.word	0x20001ae0

080053c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <xTaskGetSchedulerState+0x30>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053d6:	2301      	movs	r3, #1
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	e008      	b.n	80053ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <xTaskGetSchedulerState+0x34>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053e4:	2302      	movs	r3, #2
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	e001      	b.n	80053ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053ee:	687b      	ldr	r3, [r7, #4]
	}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b002      	add	sp, #8
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20001acc 	.word	0x20001acc
 80053fc:	20001ae8 	.word	0x20001ae8

08005400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005416:	4b25      	ldr	r3, [pc, #148]	; (80054ac <xTaskPriorityDisinherit+0xac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <xTaskPriorityDisinherit+0x24>
 8005420:	b672      	cpsid	i
 8005422:	e7fe      	b.n	8005422 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <xTaskPriorityDisinherit+0x30>
 800542c:	b672      	cpsid	i
 800542e:	e7fe      	b.n	800542e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	429a      	cmp	r2, r3
 8005444:	d02c      	beq.n	80054a0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544a:	2b00      	cmp	r3, #0
 800544c:	d128      	bne.n	80054a0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3304      	adds	r3, #4
 8005452:	0018      	movs	r0, r3
 8005454:	f7fe fdbd 	bl	8003fd2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	2238      	movs	r2, #56	; 0x38
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <xTaskPriorityDisinherit+0xb0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d903      	bls.n	8005480 <xTaskPriorityDisinherit+0x80>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <xTaskPriorityDisinherit+0xb0>)
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	0013      	movs	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	189b      	adds	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <xTaskPriorityDisinherit+0xb4>)
 800548e:	189a      	adds	r2, r3, r2
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	3304      	adds	r3, #4
 8005494:	0019      	movs	r1, r3
 8005496:	0010      	movs	r0, r2
 8005498:	f7fe fd43 	bl	8003f22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054a0:	68fb      	ldr	r3, [r7, #12]
	}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b004      	add	sp, #16
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	200015ec 	.word	0x200015ec
 80054b0:	20001ac8 	.word	0x20001ac8
 80054b4:	200015f0 	.word	0x200015f0

080054b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054c2:	4b21      	ldr	r3, [pc, #132]	; (8005548 <prvAddCurrentTaskToDelayedList+0x90>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c8:	4b20      	ldr	r3, [pc, #128]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3304      	adds	r3, #4
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fe fd7f 	bl	8003fd2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3301      	adds	r3, #1
 80054d8:	d10b      	bne.n	80054f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e0:	4b1a      	ldr	r3, [pc, #104]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <prvAddCurrentTaskToDelayedList+0x98>)
 80054e8:	0011      	movs	r1, r2
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7fe fd19 	bl	8003f22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054f0:	e026      	b.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	18d3      	adds	r3, r2, r3
 80054f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	429a      	cmp	r2, r3
 8005508:	d209      	bcs.n	800551e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3304      	adds	r3, #4
 8005514:	0019      	movs	r1, r3
 8005516:	0010      	movs	r0, r2
 8005518:	f7fe fd25 	bl	8003f66 <vListInsert>
}
 800551c:	e010      	b.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3304      	adds	r3, #4
 8005528:	0019      	movs	r1, r3
 800552a:	0010      	movs	r0, r2
 800552c:	f7fe fd1b 	bl	8003f66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d202      	bcs.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <prvAddCurrentTaskToDelayedList+0xa4>)
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	601a      	str	r2, [r3, #0]
}
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b004      	add	sp, #16
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20001ac4 	.word	0x20001ac4
 800554c:	200015ec 	.word	0x200015ec
 8005550:	20001aac 	.word	0x20001aac
 8005554:	20001a7c 	.word	0x20001a7c
 8005558:	20001a78 	.word	0x20001a78
 800555c:	20001ae0 	.word	0x20001ae0

08005560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b089      	sub	sp, #36	; 0x24
 8005564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800556a:	f000 fac9 	bl	8005b00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800556e:	4b17      	ldr	r3, [pc, #92]	; (80055cc <xTimerCreateTimerTask+0x6c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d020      	beq.n	80055b8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800557e:	003a      	movs	r2, r7
 8005580:	1d39      	adds	r1, r7, #4
 8005582:	2308      	movs	r3, #8
 8005584:	18fb      	adds	r3, r7, r3
 8005586:	0018      	movs	r0, r3
 8005588:	f7fe fc8a 	bl	8003ea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800558c:	683c      	ldr	r4, [r7, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	490f      	ldr	r1, [pc, #60]	; (80055d0 <xTimerCreateTimerTask+0x70>)
 8005594:	480f      	ldr	r0, [pc, #60]	; (80055d4 <xTimerCreateTimerTask+0x74>)
 8005596:	9202      	str	r2, [sp, #8]
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	2302      	movs	r3, #2
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	0022      	movs	r2, r4
 80055a2:	f7ff f968 	bl	8004876 <xTaskCreateStatic>
 80055a6:	0002      	movs	r2, r0
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <xTimerCreateTimerTask+0x78>)
 80055aa:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <xTimerCreateTimerTask+0x78>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80055b4:	2301      	movs	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <xTimerCreateTimerTask+0x62>
 80055be:	b672      	cpsid	i
 80055c0:	e7fe      	b.n	80055c0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80055c2:	68fb      	ldr	r3, [r7, #12]
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b005      	add	sp, #20
 80055ca:	bd90      	pop	{r4, r7, pc}
 80055cc:	20001b1c 	.word	0x20001b1c
 80055d0:	08006bf4 	.word	0x08006bf4
 80055d4:	080056f9 	.word	0x080056f9
 80055d8:	20001b20 	.word	0x20001b20

080055dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b08b      	sub	sp, #44	; 0x2c
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <xTimerGenericCommand+0x1c>
 80055f4:	b672      	cpsid	i
 80055f6:	e7fe      	b.n	80055f6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055f8:	4b1c      	ldr	r3, [pc, #112]	; (800566c <xTimerGenericCommand+0x90>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d030      	beq.n	8005662 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005600:	2414      	movs	r4, #20
 8005602:	193b      	adds	r3, r7, r4
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005608:	193b      	adds	r3, r7, r4
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800560e:	193b      	adds	r3, r7, r4
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b05      	cmp	r3, #5
 8005618:	dc19      	bgt.n	800564e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800561a:	f7ff fed5 	bl	80053c8 <xTaskGetSchedulerState>
 800561e:	0003      	movs	r3, r0
 8005620:	2b02      	cmp	r3, #2
 8005622:	d109      	bne.n	8005638 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005624:	4b11      	ldr	r3, [pc, #68]	; (800566c <xTimerGenericCommand+0x90>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562a:	1939      	adds	r1, r7, r4
 800562c:	2300      	movs	r3, #0
 800562e:	f7fe fdbf 	bl	80041b0 <xQueueGenericSend>
 8005632:	0003      	movs	r3, r0
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
 8005636:	e014      	b.n	8005662 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <xTimerGenericCommand+0x90>)
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	2314      	movs	r3, #20
 800563e:	18f9      	adds	r1, r7, r3
 8005640:	2300      	movs	r3, #0
 8005642:	2200      	movs	r2, #0
 8005644:	f7fe fdb4 	bl	80041b0 <xQueueGenericSend>
 8005648:	0003      	movs	r3, r0
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
 800564c:	e009      	b.n	8005662 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800564e:	4b07      	ldr	r3, [pc, #28]	; (800566c <xTimerGenericCommand+0x90>)
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	2314      	movs	r3, #20
 8005656:	18f9      	adds	r1, r7, r3
 8005658:	2300      	movs	r3, #0
 800565a:	f7fe fe6d 	bl	8004338 <xQueueGenericSendFromISR>
 800565e:	0003      	movs	r3, r0
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	b00b      	add	sp, #44	; 0x2c
 800566a:	bd90      	pop	{r4, r7, pc}
 800566c:	20001b1c 	.word	0x20001b1c

08005670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af02      	add	r7, sp, #8
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567a:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <prvProcessExpiredTimer+0x84>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3304      	adds	r3, #4
 8005688:	0018      	movs	r0, r3
 800568a:	f7fe fca2 	bl	8003fd2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2228      	movs	r2, #40	; 0x28
 8005692:	5c9b      	ldrb	r3, [r3, r2]
 8005694:	001a      	movs	r2, r3
 8005696:	2304      	movs	r3, #4
 8005698:	4013      	ands	r3, r2
 800569a:	d019      	beq.n	80056d0 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699a      	ldr	r2, [r3, #24]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	18d1      	adds	r1, r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f8c3 	bl	8005834 <prvInsertTimerInActiveList>
 80056ae:	1e03      	subs	r3, r0, #0
 80056b0:	d017      	beq.n	80056e2 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	2100      	movs	r1, #0
 80056be:	f7ff ff8d 	bl	80055dc <xTimerGenericCommand>
 80056c2:	0003      	movs	r3, r0
 80056c4:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <prvProcessExpiredTimer+0x72>
 80056cc:	b672      	cpsid	i
 80056ce:	e7fe      	b.n	80056ce <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2228      	movs	r2, #40	; 0x28
 80056d4:	5c9b      	ldrb	r3, [r3, r2]
 80056d6:	2201      	movs	r2, #1
 80056d8:	4393      	bics	r3, r2
 80056da:	b2d9      	uxtb	r1, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2228      	movs	r2, #40	; 0x28
 80056e0:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	0010      	movs	r0, r2
 80056ea:	4798      	blx	r3
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b004      	add	sp, #16
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20001b14 	.word	0x20001b14

080056f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005700:	2308      	movs	r3, #8
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	0018      	movs	r0, r3
 8005706:	f000 f853 	bl	80057b0 <prvGetNextExpireTime>
 800570a:	0003      	movs	r3, r0
 800570c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f000 f803 	bl	8005720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800571a:	f000 f8cd 	bl	80058b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800571e:	e7ef      	b.n	8005700 <prvTimerTask+0x8>

08005720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800572a:	f7ff fac1 	bl	8004cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800572e:	2308      	movs	r3, #8
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f85e 	bl	80057f4 <prvSampleTimeNow>
 8005738:	0003      	movs	r3, r0
 800573a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d12b      	bne.n	800579a <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10c      	bne.n	8005762 <prvProcessTimerOrBlockTask+0x42>
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d808      	bhi.n	8005762 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005750:	f7ff faba 	bl	8004cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0011      	movs	r1, r2
 800575a:	0018      	movs	r0, r3
 800575c:	f7ff ff88 	bl	8005670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005760:	e01d      	b.n	800579e <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <prvProcessTimerOrBlockTask+0x88>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <prvProcessTimerOrBlockTask+0x56>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <prvProcessTimerOrBlockTask+0x58>
 8005776:	2300      	movs	r3, #0
 8005778:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800577a:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <prvProcessTimerOrBlockTask+0x8c>)
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	0019      	movs	r1, r3
 8005788:	f7ff f842 	bl	8004810 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800578c:	f7ff fa9c 	bl	8004cc8 <xTaskResumeAll>
 8005790:	1e03      	subs	r3, r0, #0
 8005792:	d104      	bne.n	800579e <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8005794:	f000 fa84 	bl	8005ca0 <vPortYield>
}
 8005798:	e001      	b.n	800579e <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800579a:	f7ff fa95 	bl	8004cc8 <xTaskResumeAll>
}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b004      	add	sp, #16
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	20001b18 	.word	0x20001b18
 80057ac:	20001b1c 	.word	0x20001b1c

080057b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057b8:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <prvGetNextExpireTime+0x40>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <prvGetNextExpireTime+0x16>
 80057c2:	2201      	movs	r2, #1
 80057c4:	e000      	b.n	80057c8 <prvGetNextExpireTime+0x18>
 80057c6:	2200      	movs	r2, #0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <prvGetNextExpireTime+0x40>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e001      	b.n	80057e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b004      	add	sp, #16
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	20001b14 	.word	0x20001b14

080057f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057fc:	f7ff faf0 	bl	8004de0 <xTaskGetTickCount>
 8005800:	0003      	movs	r3, r0
 8005802:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <prvSampleTimeNow+0x3c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	429a      	cmp	r2, r3
 800580c:	d205      	bcs.n	800581a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800580e:	f000 f919 	bl	8005a44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e002      	b.n	8005820 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <prvSampleTimeNow+0x3c>)
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b004      	add	sp, #16
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20001b24 	.word	0x20001b24

08005834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d812      	bhi.n	8005880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e01b      	b.n	80058a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <prvInsertTimerInActiveList+0x7c>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	0019      	movs	r1, r3
 8005878:	0010      	movs	r0, r2
 800587a:	f7fe fb74 	bl	8003f66 <vListInsert>
 800587e:	e012      	b.n	80058a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d206      	bcs.n	8005896 <prvInsertTimerInActiveList+0x62>
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d302      	bcc.n	8005896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e007      	b.n	80058a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <prvInsertTimerInActiveList+0x80>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3304      	adds	r3, #4
 800589e:	0019      	movs	r1, r3
 80058a0:	0010      	movs	r0, r2
 80058a2:	f7fe fb60 	bl	8003f66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058a6:	697b      	ldr	r3, [r7, #20]
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b006      	add	sp, #24
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20001b18 	.word	0x20001b18
 80058b4:	20001b14 	.word	0x20001b14

080058b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b08d      	sub	sp, #52	; 0x34
 80058bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058be:	e0ac      	b.n	8005a1a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058c0:	2208      	movs	r2, #8
 80058c2:	18bb      	adds	r3, r7, r2
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da0f      	bge.n	80058ea <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058ca:	18bb      	adds	r3, r7, r2
 80058cc:	3304      	adds	r3, #4
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <prvProcessReceivedCommands+0x22>
 80058d6:	b672      	cpsid	i
 80058d8:	e7fe      	b.n	80058d8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	6858      	ldr	r0, [r3, #4]
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0019      	movs	r1, r3
 80058e8:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058ea:	2208      	movs	r2, #8
 80058ec:	18bb      	adds	r3, r7, r2
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da00      	bge.n	80058f6 <prvProcessReceivedCommands+0x3e>
 80058f4:	e090      	b.n	8005a18 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058f6:	18bb      	adds	r3, r7, r2
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	3304      	adds	r3, #4
 8005908:	0018      	movs	r0, r3
 800590a:	f7fe fb62 	bl	8003fd2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff ff6f 	bl	80057f4 <prvSampleTimeNow>
 8005916:	0003      	movs	r3, r0
 8005918:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800591a:	2308      	movs	r3, #8
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b09      	cmp	r3, #9
 8005922:	d900      	bls.n	8005926 <prvProcessReceivedCommands+0x6e>
 8005924:	e079      	b.n	8005a1a <prvProcessReceivedCommands+0x162>
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	4b44      	ldr	r3, [pc, #272]	; (8005a3c <prvProcessReceivedCommands+0x184>)
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2228      	movs	r2, #40	; 0x28
 8005934:	5c9b      	ldrb	r3, [r3, r2]
 8005936:	2201      	movs	r2, #1
 8005938:	4313      	orrs	r3, r2
 800593a:	b2d9      	uxtb	r1, r3
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	2228      	movs	r2, #40	; 0x28
 8005940:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005942:	2408      	movs	r4, #8
 8005944:	193b      	adds	r3, r7, r4
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	18d1      	adds	r1, r2, r3
 800594e:	193b      	adds	r3, r7, r4
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	6a38      	ldr	r0, [r7, #32]
 8005956:	f7ff ff6d 	bl	8005834 <prvInsertTimerInActiveList>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d05d      	beq.n	8005a1a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	6a3a      	ldr	r2, [r7, #32]
 8005964:	0010      	movs	r0, r2
 8005966:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2228      	movs	r2, #40	; 0x28
 800596c:	5c9b      	ldrb	r3, [r3, r2]
 800596e:	001a      	movs	r2, r3
 8005970:	2304      	movs	r3, #4
 8005972:	4013      	ands	r3, r2
 8005974:	d051      	beq.n	8005a1a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005976:	193b      	adds	r3, r7, r4
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	18d2      	adds	r2, r2, r3
 8005980:	6a38      	ldr	r0, [r7, #32]
 8005982:	2300      	movs	r3, #0
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2300      	movs	r3, #0
 8005988:	2100      	movs	r1, #0
 800598a:	f7ff fe27 	bl	80055dc <xTimerGenericCommand>
 800598e:	0003      	movs	r3, r0
 8005990:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d140      	bne.n	8005a1a <prvProcessReceivedCommands+0x162>
 8005998:	b672      	cpsid	i
 800599a:	e7fe      	b.n	800599a <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	2228      	movs	r2, #40	; 0x28
 80059a0:	5c9b      	ldrb	r3, [r3, r2]
 80059a2:	2201      	movs	r2, #1
 80059a4:	4393      	bics	r3, r2
 80059a6:	b2d9      	uxtb	r1, r3
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2228      	movs	r2, #40	; 0x28
 80059ac:	5499      	strb	r1, [r3, r2]
					break;
 80059ae:	e034      	b.n	8005a1a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2228      	movs	r2, #40	; 0x28
 80059b4:	5c9b      	ldrb	r3, [r3, r2]
 80059b6:	2201      	movs	r2, #1
 80059b8:	4313      	orrs	r3, r2
 80059ba:	b2d9      	uxtb	r1, r3
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2228      	movs	r2, #40	; 0x28
 80059c0:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059c2:	2308      	movs	r3, #8
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <prvProcessReceivedCommands+0x120>
 80059d4:	b672      	cpsid	i
 80059d6:	e7fe      	b.n	80059d6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	18d1      	adds	r1, r2, r3
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	6a38      	ldr	r0, [r7, #32]
 80059e6:	f7ff ff25 	bl	8005834 <prvInsertTimerInActiveList>
					break;
 80059ea:	e016      	b.n	8005a1a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	2228      	movs	r2, #40	; 0x28
 80059f0:	5c9b      	ldrb	r3, [r3, r2]
 80059f2:	001a      	movs	r2, r3
 80059f4:	2302      	movs	r3, #2
 80059f6:	4013      	ands	r3, r2
 80059f8:	d104      	bne.n	8005a04 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 fa9d 	bl	8005f3c <vPortFree>
 8005a02:	e00a      	b.n	8005a1a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2228      	movs	r2, #40	; 0x28
 8005a08:	5c9b      	ldrb	r3, [r3, r2]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4393      	bics	r3, r2
 8005a0e:	b2d9      	uxtb	r1, r3
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	2228      	movs	r2, #40	; 0x28
 8005a14:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a16:	e000      	b.n	8005a1a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a18:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <prvProcessReceivedCommands+0x188>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2208      	movs	r2, #8
 8005a20:	18b9      	adds	r1, r7, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	0018      	movs	r0, r3
 8005a26:	f7fe fcf8 	bl	800441a <xQueueReceive>
 8005a2a:	1e03      	subs	r3, r0, #0
 8005a2c:	d000      	beq.n	8005a30 <prvProcessReceivedCommands+0x178>
 8005a2e:	e747      	b.n	80058c0 <prvProcessReceivedCommands+0x8>
	}
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b00b      	add	sp, #44	; 0x2c
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	08006f0c 	.word	0x08006f0c
 8005a40:	20001b1c 	.word	0x20001b1c

08005a44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a4a:	e041      	b.n	8005ad0 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <prvSwitchTimerLists+0xb4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a56:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <prvSwitchTimerLists+0xb4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3304      	adds	r3, #4
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7fe fab4 	bl	8003fd2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	0010      	movs	r0, r2
 8005a72:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2228      	movs	r2, #40	; 0x28
 8005a78:	5c9b      	ldrb	r3, [r3, r2]
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d026      	beq.n	8005ad0 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	18d3      	adds	r3, r2, r3
 8005a8a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d90e      	bls.n	8005ab2 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aa0:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <prvSwitchTimerLists+0xb4>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	0010      	movs	r0, r2
 8005aac:	f7fe fa5b 	bl	8003f66 <vListInsert>
 8005ab0:	e00e      	b.n	8005ad0 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2300      	movs	r3, #0
 8005abc:	2100      	movs	r1, #0
 8005abe:	f7ff fd8d 	bl	80055dc <xTimerGenericCommand>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <prvSwitchTimerLists+0x8c>
 8005acc:	b672      	cpsid	i
 8005ace:	e7fe      	b.n	8005ace <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <prvSwitchTimerLists+0xb4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1b8      	bne.n	8005a4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <prvSwitchTimerLists+0xb4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ae0:	4b06      	ldr	r3, [pc, #24]	; (8005afc <prvSwitchTimerLists+0xb8>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <prvSwitchTimerLists+0xb4>)
 8005ae6:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005ae8:	4b04      	ldr	r3, [pc, #16]	; (8005afc <prvSwitchTimerLists+0xb8>)
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b006      	add	sp, #24
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	20001b14 	.word	0x20001b14
 8005afc:	20001b18 	.word	0x20001b18

08005b00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b06:	f000 f8db 	bl	8005cc0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b0a:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <prvCheckForValidListAndQueue+0x64>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d123      	bne.n	8005b5a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <prvCheckForValidListAndQueue+0x68>)
 8005b14:	0018      	movs	r0, r3
 8005b16:	f7fe f9db 	bl	8003ed0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <prvCheckForValidListAndQueue+0x6c>)
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7fe f9d7 	bl	8003ed0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <prvCheckForValidListAndQueue+0x70>)
 8005b24:	4a10      	ldr	r2, [pc, #64]	; (8005b68 <prvCheckForValidListAndQueue+0x68>)
 8005b26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b28:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <prvCheckForValidListAndQueue+0x74>)
 8005b2a:	4a10      	ldr	r2, [pc, #64]	; (8005b6c <prvCheckForValidListAndQueue+0x6c>)
 8005b2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b2e:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <prvCheckForValidListAndQueue+0x78>)
 8005b30:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <prvCheckForValidListAndQueue+0x7c>)
 8005b32:	2100      	movs	r1, #0
 8005b34:	9100      	str	r1, [sp, #0]
 8005b36:	2110      	movs	r1, #16
 8005b38:	200a      	movs	r0, #10
 8005b3a:	f7fe fac6 	bl	80040ca <xQueueGenericCreateStatic>
 8005b3e:	0002      	movs	r2, r0
 8005b40:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <prvCheckForValidListAndQueue+0x64>)
 8005b42:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <prvCheckForValidListAndQueue+0x64>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d006      	beq.n	8005b5a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <prvCheckForValidListAndQueue+0x64>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0b      	ldr	r2, [pc, #44]	; (8005b80 <prvCheckForValidListAndQueue+0x80>)
 8005b52:	0011      	movs	r1, r2
 8005b54:	0018      	movs	r0, r3
 8005b56:	f7fe fe33 	bl	80047c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b5a:	f000 f8c3 	bl	8005ce4 <vPortExitCritical>
}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20001b1c 	.word	0x20001b1c
 8005b68:	20001aec 	.word	0x20001aec
 8005b6c:	20001b00 	.word	0x20001b00
 8005b70:	20001b14 	.word	0x20001b14
 8005b74:	20001b18 	.word	0x20001b18
 8005b78:	20001bc8 	.word	0x20001bc8
 8005b7c:	20001b28 	.word	0x20001b28
 8005b80:	08006bfc 	.word	0x08006bfc

08005b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3b04      	subs	r3, #4
 8005b94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2280      	movs	r2, #128	; 0x80
 8005b9a:	0452      	lsls	r2, r2, #17
 8005b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3b04      	subs	r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b04      	subs	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bb0:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <pxPortInitialiseStack+0x50>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3b14      	subs	r3, #20
 8005bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3b20      	subs	r3, #32
 8005bc6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	08005bd9 	.word	0x08005bd9

08005bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005be2:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <prvTaskExitError+0x2c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	d001      	beq.n	8005bee <prvTaskExitError+0x16>
 8005bea:	b672      	cpsid	i
 8005bec:	e7fe      	b.n	8005bec <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005bee:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0fc      	beq.n	8005bf2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bf8:	46c0      	nop			; (mov r8, r8)
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b002      	add	sp, #8
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	2000000c 	.word	0x2000000c

08005c08 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005c20:	4a0b      	ldr	r2, [pc, #44]	; (8005c50 <pxCurrentTCBConst2>)
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	3020      	adds	r0, #32
 8005c28:	f380 8809 	msr	PSP, r0
 8005c2c:	2002      	movs	r0, #2
 8005c2e:	f380 8814 	msr	CONTROL, r0
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005c38:	46ae      	mov	lr, r5
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	bc04      	pop	{r2}
 8005c3e:	b662      	cpsie	i
 8005c40:	4718      	bx	r3
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	46c0      	nop			; (mov r8, r8)

08005c50 <pxCurrentTCBConst2>:
 8005c50:	200015ec 	.word	0x200015ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46c0      	nop			; (mov r8, r8)

08005c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <xPortStartScheduler+0x40>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <xPortStartScheduler+0x40>)
 8005c62:	21ff      	movs	r1, #255	; 0xff
 8005c64:	0409      	lsls	r1, r1, #16
 8005c66:	430a      	orrs	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <xPortStartScheduler+0x40>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <xPortStartScheduler+0x40>)
 8005c70:	21ff      	movs	r1, #255	; 0xff
 8005c72:	0609      	lsls	r1, r1, #24
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005c78:	f000 f898 	bl	8005dac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c7c:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <xPortStartScheduler+0x44>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005c82:	f7ff ffcd 	bl	8005c20 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c86:	f7ff f969 	bl	8004f5c <vTaskSwitchContext>
	prvTaskExitError();
 8005c8a:	f7ff ffa5 	bl	8005bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	e000ed20 	.word	0xe000ed20
 8005c9c:	2000000c 	.word	0x2000000c

08005ca0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <vPortYield+0x1c>)
 8005ca6:	2280      	movs	r2, #128	; 0x80
 8005ca8:	0552      	lsls	r2, r2, #21
 8005caa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005cac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005cb0:	f3bf 8f6f 	isb	sy
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005cc4:	b672      	cpsid	i
    uxCriticalNesting++;
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <vPortEnterCritical+0x20>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <vPortEnterCritical+0x20>)
 8005cce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005cd0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005cd4:	f3bf 8f6f 	isb	sy
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	2000000c 	.word	0x2000000c

08005ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ce8:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <vPortExitCritical+0x2c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <vPortExitCritical+0x10>
 8005cf0:	b672      	cpsid	i
 8005cf2:	e7fe      	b.n	8005cf2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005cf4:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <vPortExitCritical+0x2c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	1e5a      	subs	r2, r3, #1
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <vPortExitCritical+0x2c>)
 8005cfc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <vPortExitCritical+0x2c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d100      	bne.n	8005d08 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005d06:	b662      	cpsie	i
    }
}
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	2000000c 	.word	0x2000000c

08005d14 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005d14:	f3ef 8010 	mrs	r0, PRIMASK
 8005d18:	b672      	cpsid	i
 8005d1a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	0018      	movs	r0, r3

08005d20 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005d20:	f380 8810 	msr	PRIMASK, r0
 8005d24:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005d26:	46c0      	nop			; (mov r8, r8)
	...

08005d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d30:	f3ef 8009 	mrs	r0, PSP
 8005d34:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <pxCurrentTCBConst>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	3820      	subs	r0, #32
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d3e:	4644      	mov	r4, r8
 8005d40:	464d      	mov	r5, r9
 8005d42:	4656      	mov	r6, sl
 8005d44:	465f      	mov	r7, fp
 8005d46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d48:	b508      	push	{r3, lr}
 8005d4a:	b672      	cpsid	i
 8005d4c:	f7ff f906 	bl	8004f5c <vTaskSwitchContext>
 8005d50:	b662      	cpsie	i
 8005d52:	bc0c      	pop	{r2, r3}
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	6808      	ldr	r0, [r1, #0]
 8005d58:	3010      	adds	r0, #16
 8005d5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d5c:	46a0      	mov	r8, r4
 8005d5e:	46a9      	mov	r9, r5
 8005d60:	46b2      	mov	sl, r6
 8005d62:	46bb      	mov	fp, r7
 8005d64:	f380 8809 	msr	PSP, r0
 8005d68:	3820      	subs	r0, #32
 8005d6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d6c:	4718      	bx	r3
 8005d6e:	46c0      	nop			; (mov r8, r8)

08005d70 <pxCurrentTCBConst>:
 8005d70:	200015ec 	.word	0x200015ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005d74:	46c0      	nop			; (mov r8, r8)
 8005d76:	46c0      	nop			; (mov r8, r8)

08005d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d7e:	f7ff ffc9 	bl	8005d14 <ulSetInterruptMaskFromISR>
 8005d82:	0003      	movs	r3, r0
 8005d84:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d86:	f7ff f839 	bl	8004dfc <xTaskIncrementTick>
 8005d8a:	1e03      	subs	r3, r0, #0
 8005d8c:	d003      	beq.n	8005d96 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <xPortSysTickHandler+0x30>)
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	0552      	lsls	r2, r2, #21
 8005d94:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7ff ffc1 	bl	8005d20 <vClearInterruptMaskFromISR>
}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b002      	add	sp, #8
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <prvSetupTimerInterrupt+0x34>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <prvSetupTimerInterrupt+0x38>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <prvSetupTimerInterrupt+0x3c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	22fa      	movs	r2, #250	; 0xfa
 8005dc2:	0091      	lsls	r1, r2, #2
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7fa f9a9 	bl	800011c <__udivsi3>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	001a      	movs	r2, r3
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <prvSetupTimerInterrupt+0x40>)
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <prvSetupTimerInterrupt+0x34>)
 8005dd6:	2207      	movs	r2, #7
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	e000e010 	.word	0xe000e010
 8005de4:	e000e018 	.word	0xe000e018
 8005de8:	20000000 	.word	0x20000000
 8005dec:	e000e014 	.word	0xe000e014

08005df0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005dfc:	f7fe ff58 	bl	8004cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e00:	4b49      	ldr	r3, [pc, #292]	; (8005f28 <pvPortMalloc+0x138>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e08:	f000 f8e0 	bl	8005fcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e0c:	4b47      	ldr	r3, [pc, #284]	; (8005f2c <pvPortMalloc+0x13c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4013      	ands	r3, r2
 8005e14:	d000      	beq.n	8005e18 <pvPortMalloc+0x28>
 8005e16:	e079      	b.n	8005f0c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d012      	beq.n	8005e44 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005e1e:	2208      	movs	r2, #8
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2207      	movs	r2, #7
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d00a      	beq.n	8005e44 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2207      	movs	r2, #7
 8005e32:	4393      	bics	r3, r2
 8005e34:	3308      	adds	r3, #8
 8005e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2207      	movs	r2, #7
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d001      	beq.n	8005e44 <pvPortMalloc+0x54>
 8005e40:	b672      	cpsid	i
 8005e42:	e7fe      	b.n	8005e42 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d060      	beq.n	8005f0c <pvPortMalloc+0x11c>
 8005e4a:	4b39      	ldr	r3, [pc, #228]	; (8005f30 <pvPortMalloc+0x140>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d85b      	bhi.n	8005f0c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e54:	4b37      	ldr	r3, [pc, #220]	; (8005f34 <pvPortMalloc+0x144>)
 8005e56:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005e58:	4b36      	ldr	r3, [pc, #216]	; (8005f34 <pvPortMalloc+0x144>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e5e:	e004      	b.n	8005e6a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d903      	bls.n	8005e7c <pvPortMalloc+0x8c>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f1      	bne.n	8005e60 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <pvPortMalloc+0x138>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d042      	beq.n	8005f0c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	189b      	adds	r3, r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d916      	bls.n	8005ed6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	18d3      	adds	r3, r2, r3
 8005eae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2207      	movs	r2, #7
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d001      	beq.n	8005ebc <pvPortMalloc+0xcc>
 8005eb8:	b672      	cpsid	i
 8005eba:	e7fe      	b.n	8005eba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 f8db 	bl	800608c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ed6:	4b16      	ldr	r3, [pc, #88]	; (8005f30 <pvPortMalloc+0x140>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <pvPortMalloc+0x140>)
 8005ee2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <pvPortMalloc+0x140>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <pvPortMalloc+0x148>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d203      	bcs.n	8005ef8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <pvPortMalloc+0x140>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <pvPortMalloc+0x148>)
 8005ef6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <pvPortMalloc+0x13c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	431a      	orrs	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f0c:	f7fe fedc 	bl	8004cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2207      	movs	r2, #7
 8005f14:	4013      	ands	r3, r2
 8005f16:	d001      	beq.n	8005f1c <pvPortMalloc+0x12c>
 8005f18:	b672      	cpsid	i
 8005f1a:	e7fe      	b.n	8005f1a <pvPortMalloc+0x12a>
	return pvReturn;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
}
 8005f1e:	0018      	movs	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b006      	add	sp, #24
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	20002820 	.word	0x20002820
 8005f2c:	2000282c 	.word	0x2000282c
 8005f30:	20002824 	.word	0x20002824
 8005f34:	20002818 	.word	0x20002818
 8005f38:	20002828 	.word	0x20002828

08005f3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d035      	beq.n	8005fba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f4e:	2308      	movs	r3, #8
 8005f50:	425b      	negs	r3, r3
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <vPortFree+0x88>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4013      	ands	r3, r2
 8005f66:	d101      	bne.n	8005f6c <vPortFree+0x30>
 8005f68:	b672      	cpsid	i
 8005f6a:	e7fe      	b.n	8005f6a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <vPortFree+0x3c>
 8005f74:	b672      	cpsid	i
 8005f76:	e7fe      	b.n	8005f76 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <vPortFree+0x88>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4013      	ands	r3, r2
 8005f82:	d01a      	beq.n	8005fba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d116      	bne.n	8005fba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <vPortFree+0x88>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	401a      	ands	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f9c:	f7fe fe88 	bl	8004cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <vPortFree+0x8c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	18d2      	adds	r2, r2, r3
 8005faa:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <vPortFree+0x8c>)
 8005fac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f000 f86b 	bl	800608c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005fb6:	f7fe fe87 	bl	8004cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	b004      	add	sp, #16
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	2000282c 	.word	0x2000282c
 8005fc8:	20002824 	.word	0x20002824

08005fcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fd2:	23c0      	movs	r3, #192	; 0xc0
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fd8:	4b26      	ldr	r3, [pc, #152]	; (8006074 <prvHeapInit+0xa8>)
 8005fda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2207      	movs	r2, #7
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d00c      	beq.n	8005ffe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3307      	adds	r3, #7
 8005fe8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2207      	movs	r2, #7
 8005fee:	4393      	bics	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	1ad2      	subs	r2, r2, r3
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <prvHeapInit+0xa8>)
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006002:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <prvHeapInit+0xac>)
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006008:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <prvHeapInit+0xac>)
 800600a:	2200      	movs	r2, #0
 800600c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	18d3      	adds	r3, r2, r3
 8006014:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006016:	2208      	movs	r2, #8
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2207      	movs	r2, #7
 8006022:	4393      	bics	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <prvHeapInit+0xb0>)
 800602a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800602c:	4b13      	ldr	r3, [pc, #76]	; (800607c <prvHeapInit+0xb0>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2200      	movs	r2, #0
 8006032:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006034:	4b11      	ldr	r3, [pc, #68]	; (800607c <prvHeapInit+0xb0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	1ad2      	subs	r2, r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <prvHeapInit+0xb0>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <prvHeapInit+0xb4>)
 8006058:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <prvHeapInit+0xb8>)
 8006060:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <prvHeapInit+0xbc>)
 8006064:	2280      	movs	r2, #128	; 0x80
 8006066:	0612      	lsls	r2, r2, #24
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	20001c18 	.word	0x20001c18
 8006078:	20002818 	.word	0x20002818
 800607c:	20002820 	.word	0x20002820
 8006080:	20002828 	.word	0x20002828
 8006084:	20002824 	.word	0x20002824
 8006088:	2000282c 	.word	0x2000282c

0800608c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006094:	4b27      	ldr	r3, [pc, #156]	; (8006134 <prvInsertBlockIntoFreeList+0xa8>)
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	e002      	b.n	80060a0 <prvInsertBlockIntoFreeList+0x14>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d8f7      	bhi.n	800609a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	18d3      	adds	r3, r2, r3
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d108      	bne.n	80060ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	18d2      	adds	r2, r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	18d2      	adds	r2, r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d118      	bne.n	8006114 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <prvInsertBlockIntoFreeList+0xac>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d00d      	beq.n	800610a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	18d2      	adds	r2, r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	e008      	b.n	800611c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <prvInsertBlockIntoFreeList+0xac>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e003      	b.n	800611c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d002      	beq.n	800612a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	b004      	add	sp, #16
 8006130:	bd80      	pop	{r7, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	20002818 	.word	0x20002818
 8006138:	20002820 	.word	0x20002820

0800613c <__errno>:
 800613c:	4b01      	ldr	r3, [pc, #4]	; (8006144 <__errno+0x8>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	4770      	bx	lr
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	20000010 	.word	0x20000010

08006148 <__libc_init_array>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	2600      	movs	r6, #0
 800614c:	4d0c      	ldr	r5, [pc, #48]	; (8006180 <__libc_init_array+0x38>)
 800614e:	4c0d      	ldr	r4, [pc, #52]	; (8006184 <__libc_init_array+0x3c>)
 8006150:	1b64      	subs	r4, r4, r5
 8006152:	10a4      	asrs	r4, r4, #2
 8006154:	42a6      	cmp	r6, r4
 8006156:	d109      	bne.n	800616c <__libc_init_array+0x24>
 8006158:	2600      	movs	r6, #0
 800615a:	f000 fcff 	bl	8006b5c <_init>
 800615e:	4d0a      	ldr	r5, [pc, #40]	; (8006188 <__libc_init_array+0x40>)
 8006160:	4c0a      	ldr	r4, [pc, #40]	; (800618c <__libc_init_array+0x44>)
 8006162:	1b64      	subs	r4, r4, r5
 8006164:	10a4      	asrs	r4, r4, #2
 8006166:	42a6      	cmp	r6, r4
 8006168:	d105      	bne.n	8006176 <__libc_init_array+0x2e>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	00b3      	lsls	r3, r6, #2
 800616e:	58eb      	ldr	r3, [r5, r3]
 8006170:	4798      	blx	r3
 8006172:	3601      	adds	r6, #1
 8006174:	e7ee      	b.n	8006154 <__libc_init_array+0xc>
 8006176:	00b3      	lsls	r3, r6, #2
 8006178:	58eb      	ldr	r3, [r5, r3]
 800617a:	4798      	blx	r3
 800617c:	3601      	adds	r6, #1
 800617e:	e7f2      	b.n	8006166 <__libc_init_array+0x1e>
 8006180:	08006fd0 	.word	0x08006fd0
 8006184:	08006fd0 	.word	0x08006fd0
 8006188:	08006fd0 	.word	0x08006fd0
 800618c:	08006fd4 	.word	0x08006fd4

08006190 <__retarget_lock_acquire_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_release_recursive>:
 8006192:	4770      	bx	lr

08006194 <memcpy>:
 8006194:	2300      	movs	r3, #0
 8006196:	b510      	push	{r4, lr}
 8006198:	429a      	cmp	r2, r3
 800619a:	d100      	bne.n	800619e <memcpy+0xa>
 800619c:	bd10      	pop	{r4, pc}
 800619e:	5ccc      	ldrb	r4, [r1, r3]
 80061a0:	54c4      	strb	r4, [r0, r3]
 80061a2:	3301      	adds	r3, #1
 80061a4:	e7f8      	b.n	8006198 <memcpy+0x4>

080061a6 <memset>:
 80061a6:	0003      	movs	r3, r0
 80061a8:	1882      	adds	r2, r0, r2
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d100      	bne.n	80061b0 <memset+0xa>
 80061ae:	4770      	bx	lr
 80061b0:	7019      	strb	r1, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	e7f9      	b.n	80061aa <memset+0x4>
	...

080061b8 <sbrk_aligned>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4e0f      	ldr	r6, [pc, #60]	; (80061f8 <sbrk_aligned+0x40>)
 80061bc:	000d      	movs	r5, r1
 80061be:	6831      	ldr	r1, [r6, #0]
 80061c0:	0004      	movs	r4, r0
 80061c2:	2900      	cmp	r1, #0
 80061c4:	d102      	bne.n	80061cc <sbrk_aligned+0x14>
 80061c6:	f000 f903 	bl	80063d0 <_sbrk_r>
 80061ca:	6030      	str	r0, [r6, #0]
 80061cc:	0029      	movs	r1, r5
 80061ce:	0020      	movs	r0, r4
 80061d0:	f000 f8fe 	bl	80063d0 <_sbrk_r>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d00a      	beq.n	80061ee <sbrk_aligned+0x36>
 80061d8:	2303      	movs	r3, #3
 80061da:	1cc5      	adds	r5, r0, #3
 80061dc:	439d      	bics	r5, r3
 80061de:	42a8      	cmp	r0, r5
 80061e0:	d007      	beq.n	80061f2 <sbrk_aligned+0x3a>
 80061e2:	1a29      	subs	r1, r5, r0
 80061e4:	0020      	movs	r0, r4
 80061e6:	f000 f8f3 	bl	80063d0 <_sbrk_r>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d101      	bne.n	80061f2 <sbrk_aligned+0x3a>
 80061ee:	2501      	movs	r5, #1
 80061f0:	426d      	negs	r5, r5
 80061f2:	0028      	movs	r0, r5
 80061f4:	bd70      	pop	{r4, r5, r6, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	20002838 	.word	0x20002838

080061fc <_malloc_r>:
 80061fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061fe:	2203      	movs	r2, #3
 8006200:	1ccb      	adds	r3, r1, #3
 8006202:	4393      	bics	r3, r2
 8006204:	3308      	adds	r3, #8
 8006206:	0006      	movs	r6, r0
 8006208:	001f      	movs	r7, r3
 800620a:	2b0c      	cmp	r3, #12
 800620c:	d232      	bcs.n	8006274 <_malloc_r+0x78>
 800620e:	270c      	movs	r7, #12
 8006210:	42b9      	cmp	r1, r7
 8006212:	d831      	bhi.n	8006278 <_malloc_r+0x7c>
 8006214:	0030      	movs	r0, r6
 8006216:	f000 f90d 	bl	8006434 <__malloc_lock>
 800621a:	4d32      	ldr	r5, [pc, #200]	; (80062e4 <_malloc_r+0xe8>)
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	001c      	movs	r4, r3
 8006220:	2c00      	cmp	r4, #0
 8006222:	d12e      	bne.n	8006282 <_malloc_r+0x86>
 8006224:	0039      	movs	r1, r7
 8006226:	0030      	movs	r0, r6
 8006228:	f7ff ffc6 	bl	80061b8 <sbrk_aligned>
 800622c:	0004      	movs	r4, r0
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d11e      	bne.n	8006270 <_malloc_r+0x74>
 8006232:	682c      	ldr	r4, [r5, #0]
 8006234:	0025      	movs	r5, r4
 8006236:	2d00      	cmp	r5, #0
 8006238:	d14a      	bne.n	80062d0 <_malloc_r+0xd4>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	0029      	movs	r1, r5
 800623e:	18e3      	adds	r3, r4, r3
 8006240:	0030      	movs	r0, r6
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	f000 f8c4 	bl	80063d0 <_sbrk_r>
 8006248:	9b01      	ldr	r3, [sp, #4]
 800624a:	4283      	cmp	r3, r0
 800624c:	d143      	bne.n	80062d6 <_malloc_r+0xda>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	3703      	adds	r7, #3
 8006252:	1aff      	subs	r7, r7, r3
 8006254:	2303      	movs	r3, #3
 8006256:	439f      	bics	r7, r3
 8006258:	3708      	adds	r7, #8
 800625a:	2f0c      	cmp	r7, #12
 800625c:	d200      	bcs.n	8006260 <_malloc_r+0x64>
 800625e:	270c      	movs	r7, #12
 8006260:	0039      	movs	r1, r7
 8006262:	0030      	movs	r0, r6
 8006264:	f7ff ffa8 	bl	80061b8 <sbrk_aligned>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d034      	beq.n	80062d6 <_malloc_r+0xda>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	19df      	adds	r7, r3, r7
 8006270:	6027      	str	r7, [r4, #0]
 8006272:	e013      	b.n	800629c <_malloc_r+0xa0>
 8006274:	2b00      	cmp	r3, #0
 8006276:	dacb      	bge.n	8006210 <_malloc_r+0x14>
 8006278:	230c      	movs	r3, #12
 800627a:	2500      	movs	r5, #0
 800627c:	6033      	str	r3, [r6, #0]
 800627e:	0028      	movs	r0, r5
 8006280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006282:	6822      	ldr	r2, [r4, #0]
 8006284:	1bd1      	subs	r1, r2, r7
 8006286:	d420      	bmi.n	80062ca <_malloc_r+0xce>
 8006288:	290b      	cmp	r1, #11
 800628a:	d917      	bls.n	80062bc <_malloc_r+0xc0>
 800628c:	19e2      	adds	r2, r4, r7
 800628e:	6027      	str	r7, [r4, #0]
 8006290:	42a3      	cmp	r3, r4
 8006292:	d111      	bne.n	80062b8 <_malloc_r+0xbc>
 8006294:	602a      	str	r2, [r5, #0]
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	6053      	str	r3, [r2, #4]
 800629c:	0030      	movs	r0, r6
 800629e:	0025      	movs	r5, r4
 80062a0:	f000 f8d0 	bl	8006444 <__malloc_unlock>
 80062a4:	2207      	movs	r2, #7
 80062a6:	350b      	adds	r5, #11
 80062a8:	1d23      	adds	r3, r4, #4
 80062aa:	4395      	bics	r5, r2
 80062ac:	1aea      	subs	r2, r5, r3
 80062ae:	429d      	cmp	r5, r3
 80062b0:	d0e5      	beq.n	800627e <_malloc_r+0x82>
 80062b2:	1b5b      	subs	r3, r3, r5
 80062b4:	50a3      	str	r3, [r4, r2]
 80062b6:	e7e2      	b.n	800627e <_malloc_r+0x82>
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	e7ec      	b.n	8006296 <_malloc_r+0x9a>
 80062bc:	6862      	ldr	r2, [r4, #4]
 80062be:	42a3      	cmp	r3, r4
 80062c0:	d101      	bne.n	80062c6 <_malloc_r+0xca>
 80062c2:	602a      	str	r2, [r5, #0]
 80062c4:	e7ea      	b.n	800629c <_malloc_r+0xa0>
 80062c6:	605a      	str	r2, [r3, #4]
 80062c8:	e7e8      	b.n	800629c <_malloc_r+0xa0>
 80062ca:	0023      	movs	r3, r4
 80062cc:	6864      	ldr	r4, [r4, #4]
 80062ce:	e7a7      	b.n	8006220 <_malloc_r+0x24>
 80062d0:	002c      	movs	r4, r5
 80062d2:	686d      	ldr	r5, [r5, #4]
 80062d4:	e7af      	b.n	8006236 <_malloc_r+0x3a>
 80062d6:	230c      	movs	r3, #12
 80062d8:	0030      	movs	r0, r6
 80062da:	6033      	str	r3, [r6, #0]
 80062dc:	f000 f8b2 	bl	8006444 <__malloc_unlock>
 80062e0:	e7cd      	b.n	800627e <_malloc_r+0x82>
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	20002834 	.word	0x20002834

080062e8 <cleanup_glue>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	000d      	movs	r5, r1
 80062ec:	6809      	ldr	r1, [r1, #0]
 80062ee:	0004      	movs	r4, r0
 80062f0:	2900      	cmp	r1, #0
 80062f2:	d001      	beq.n	80062f8 <cleanup_glue+0x10>
 80062f4:	f7ff fff8 	bl	80062e8 <cleanup_glue>
 80062f8:	0029      	movs	r1, r5
 80062fa:	0020      	movs	r0, r4
 80062fc:	f000 f8aa 	bl	8006454 <_free_r>
 8006300:	bd70      	pop	{r4, r5, r6, pc}
	...

08006304 <_reclaim_reent>:
 8006304:	4b31      	ldr	r3, [pc, #196]	; (80063cc <_reclaim_reent+0xc8>)
 8006306:	b570      	push	{r4, r5, r6, lr}
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	0004      	movs	r4, r0
 800630c:	4283      	cmp	r3, r0
 800630e:	d049      	beq.n	80063a4 <_reclaim_reent+0xa0>
 8006310:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <_reclaim_reent+0x28>
 8006316:	2500      	movs	r5, #0
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	42ab      	cmp	r3, r5
 800631c:	d147      	bne.n	80063ae <_reclaim_reent+0xaa>
 800631e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	2900      	cmp	r1, #0
 8006324:	d002      	beq.n	800632c <_reclaim_reent+0x28>
 8006326:	0020      	movs	r0, r4
 8006328:	f000 f894 	bl	8006454 <_free_r>
 800632c:	6961      	ldr	r1, [r4, #20]
 800632e:	2900      	cmp	r1, #0
 8006330:	d002      	beq.n	8006338 <_reclaim_reent+0x34>
 8006332:	0020      	movs	r0, r4
 8006334:	f000 f88e 	bl	8006454 <_free_r>
 8006338:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800633a:	2900      	cmp	r1, #0
 800633c:	d002      	beq.n	8006344 <_reclaim_reent+0x40>
 800633e:	0020      	movs	r0, r4
 8006340:	f000 f888 	bl	8006454 <_free_r>
 8006344:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006346:	2900      	cmp	r1, #0
 8006348:	d002      	beq.n	8006350 <_reclaim_reent+0x4c>
 800634a:	0020      	movs	r0, r4
 800634c:	f000 f882 	bl	8006454 <_free_r>
 8006350:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006352:	2900      	cmp	r1, #0
 8006354:	d002      	beq.n	800635c <_reclaim_reent+0x58>
 8006356:	0020      	movs	r0, r4
 8006358:	f000 f87c 	bl	8006454 <_free_r>
 800635c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800635e:	2900      	cmp	r1, #0
 8006360:	d002      	beq.n	8006368 <_reclaim_reent+0x64>
 8006362:	0020      	movs	r0, r4
 8006364:	f000 f876 	bl	8006454 <_free_r>
 8006368:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800636a:	2900      	cmp	r1, #0
 800636c:	d002      	beq.n	8006374 <_reclaim_reent+0x70>
 800636e:	0020      	movs	r0, r4
 8006370:	f000 f870 	bl	8006454 <_free_r>
 8006374:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006376:	2900      	cmp	r1, #0
 8006378:	d002      	beq.n	8006380 <_reclaim_reent+0x7c>
 800637a:	0020      	movs	r0, r4
 800637c:	f000 f86a 	bl	8006454 <_free_r>
 8006380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006382:	2900      	cmp	r1, #0
 8006384:	d002      	beq.n	800638c <_reclaim_reent+0x88>
 8006386:	0020      	movs	r0, r4
 8006388:	f000 f864 	bl	8006454 <_free_r>
 800638c:	69a3      	ldr	r3, [r4, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d008      	beq.n	80063a4 <_reclaim_reent+0xa0>
 8006392:	0020      	movs	r0, r4
 8006394:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006396:	4798      	blx	r3
 8006398:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800639a:	2900      	cmp	r1, #0
 800639c:	d002      	beq.n	80063a4 <_reclaim_reent+0xa0>
 800639e:	0020      	movs	r0, r4
 80063a0:	f7ff ffa2 	bl	80062e8 <cleanup_glue>
 80063a4:	bd70      	pop	{r4, r5, r6, pc}
 80063a6:	5949      	ldr	r1, [r1, r5]
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d108      	bne.n	80063be <_reclaim_reent+0xba>
 80063ac:	3504      	adds	r5, #4
 80063ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b0:	68d9      	ldr	r1, [r3, #12]
 80063b2:	2d80      	cmp	r5, #128	; 0x80
 80063b4:	d1f7      	bne.n	80063a6 <_reclaim_reent+0xa2>
 80063b6:	0020      	movs	r0, r4
 80063b8:	f000 f84c 	bl	8006454 <_free_r>
 80063bc:	e7af      	b.n	800631e <_reclaim_reent+0x1a>
 80063be:	680e      	ldr	r6, [r1, #0]
 80063c0:	0020      	movs	r0, r4
 80063c2:	f000 f847 	bl	8006454 <_free_r>
 80063c6:	0031      	movs	r1, r6
 80063c8:	e7ee      	b.n	80063a8 <_reclaim_reent+0xa4>
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	20000010 	.word	0x20000010

080063d0 <_sbrk_r>:
 80063d0:	2300      	movs	r3, #0
 80063d2:	b570      	push	{r4, r5, r6, lr}
 80063d4:	4d06      	ldr	r5, [pc, #24]	; (80063f0 <_sbrk_r+0x20>)
 80063d6:	0004      	movs	r4, r0
 80063d8:	0008      	movs	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fb fb3e 	bl	8001a5c <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d103      	bne.n	80063ec <_sbrk_r+0x1c>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d000      	beq.n	80063ec <_sbrk_r+0x1c>
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	2000283c 	.word	0x2000283c

080063f4 <siprintf>:
 80063f4:	b40e      	push	{r1, r2, r3}
 80063f6:	b500      	push	{lr}
 80063f8:	490b      	ldr	r1, [pc, #44]	; (8006428 <siprintf+0x34>)
 80063fa:	b09c      	sub	sp, #112	; 0x70
 80063fc:	ab1d      	add	r3, sp, #116	; 0x74
 80063fe:	9002      	str	r0, [sp, #8]
 8006400:	9006      	str	r0, [sp, #24]
 8006402:	9107      	str	r1, [sp, #28]
 8006404:	9104      	str	r1, [sp, #16]
 8006406:	4809      	ldr	r0, [pc, #36]	; (800642c <siprintf+0x38>)
 8006408:	4909      	ldr	r1, [pc, #36]	; (8006430 <siprintf+0x3c>)
 800640a:	cb04      	ldmia	r3!, {r2}
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	6800      	ldr	r0, [r0, #0]
 8006410:	a902      	add	r1, sp, #8
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	f000 f8ca 	bl	80065ac <_svfiprintf_r>
 8006418:	2300      	movs	r3, #0
 800641a:	9a02      	ldr	r2, [sp, #8]
 800641c:	7013      	strb	r3, [r2, #0]
 800641e:	b01c      	add	sp, #112	; 0x70
 8006420:	bc08      	pop	{r3}
 8006422:	b003      	add	sp, #12
 8006424:	4718      	bx	r3
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	7fffffff 	.word	0x7fffffff
 800642c:	20000010 	.word	0x20000010
 8006430:	ffff0208 	.word	0xffff0208

08006434 <__malloc_lock>:
 8006434:	b510      	push	{r4, lr}
 8006436:	4802      	ldr	r0, [pc, #8]	; (8006440 <__malloc_lock+0xc>)
 8006438:	f7ff feaa 	bl	8006190 <__retarget_lock_acquire_recursive>
 800643c:	bd10      	pop	{r4, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	20002830 	.word	0x20002830

08006444 <__malloc_unlock>:
 8006444:	b510      	push	{r4, lr}
 8006446:	4802      	ldr	r0, [pc, #8]	; (8006450 <__malloc_unlock+0xc>)
 8006448:	f7ff fea3 	bl	8006192 <__retarget_lock_release_recursive>
 800644c:	bd10      	pop	{r4, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	20002830 	.word	0x20002830

08006454 <_free_r>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	0005      	movs	r5, r0
 8006458:	2900      	cmp	r1, #0
 800645a:	d010      	beq.n	800647e <_free_r+0x2a>
 800645c:	1f0c      	subs	r4, r1, #4
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	da00      	bge.n	8006466 <_free_r+0x12>
 8006464:	18e4      	adds	r4, r4, r3
 8006466:	0028      	movs	r0, r5
 8006468:	f7ff ffe4 	bl	8006434 <__malloc_lock>
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <_free_r+0x90>)
 800646e:	6813      	ldr	r3, [r2, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <_free_r+0x2c>
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	6014      	str	r4, [r2, #0]
 8006478:	0028      	movs	r0, r5
 800647a:	f7ff ffe3 	bl	8006444 <__malloc_unlock>
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	42a3      	cmp	r3, r4
 8006482:	d908      	bls.n	8006496 <_free_r+0x42>
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	1860      	adds	r0, r4, r1
 8006488:	4283      	cmp	r3, r0
 800648a:	d1f3      	bne.n	8006474 <_free_r+0x20>
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	1841      	adds	r1, r0, r1
 8006492:	6021      	str	r1, [r4, #0]
 8006494:	e7ee      	b.n	8006474 <_free_r+0x20>
 8006496:	001a      	movs	r2, r3
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <_free_r+0x4e>
 800649e:	42a3      	cmp	r3, r4
 80064a0:	d9f9      	bls.n	8006496 <_free_r+0x42>
 80064a2:	6811      	ldr	r1, [r2, #0]
 80064a4:	1850      	adds	r0, r2, r1
 80064a6:	42a0      	cmp	r0, r4
 80064a8:	d10b      	bne.n	80064c2 <_free_r+0x6e>
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	1809      	adds	r1, r1, r0
 80064ae:	1850      	adds	r0, r2, r1
 80064b0:	6011      	str	r1, [r2, #0]
 80064b2:	4283      	cmp	r3, r0
 80064b4:	d1e0      	bne.n	8006478 <_free_r+0x24>
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	1841      	adds	r1, r0, r1
 80064bc:	6011      	str	r1, [r2, #0]
 80064be:	6053      	str	r3, [r2, #4]
 80064c0:	e7da      	b.n	8006478 <_free_r+0x24>
 80064c2:	42a0      	cmp	r0, r4
 80064c4:	d902      	bls.n	80064cc <_free_r+0x78>
 80064c6:	230c      	movs	r3, #12
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	e7d5      	b.n	8006478 <_free_r+0x24>
 80064cc:	6821      	ldr	r1, [r4, #0]
 80064ce:	1860      	adds	r0, r4, r1
 80064d0:	4283      	cmp	r3, r0
 80064d2:	d103      	bne.n	80064dc <_free_r+0x88>
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	1841      	adds	r1, r0, r1
 80064da:	6021      	str	r1, [r4, #0]
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	6054      	str	r4, [r2, #4]
 80064e0:	e7ca      	b.n	8006478 <_free_r+0x24>
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	20002834 	.word	0x20002834

080064e8 <__ssputs_r>:
 80064e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ea:	688e      	ldr	r6, [r1, #8]
 80064ec:	b085      	sub	sp, #20
 80064ee:	0007      	movs	r7, r0
 80064f0:	000c      	movs	r4, r1
 80064f2:	9203      	str	r2, [sp, #12]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	429e      	cmp	r6, r3
 80064f8:	d83c      	bhi.n	8006574 <__ssputs_r+0x8c>
 80064fa:	2390      	movs	r3, #144	; 0x90
 80064fc:	898a      	ldrh	r2, [r1, #12]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	421a      	tst	r2, r3
 8006502:	d034      	beq.n	800656e <__ssputs_r+0x86>
 8006504:	6909      	ldr	r1, [r1, #16]
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	6960      	ldr	r0, [r4, #20]
 800650a:	1a5b      	subs	r3, r3, r1
 800650c:	9302      	str	r3, [sp, #8]
 800650e:	2303      	movs	r3, #3
 8006510:	4343      	muls	r3, r0
 8006512:	0fdd      	lsrs	r5, r3, #31
 8006514:	18ed      	adds	r5, r5, r3
 8006516:	9b01      	ldr	r3, [sp, #4]
 8006518:	9802      	ldr	r0, [sp, #8]
 800651a:	3301      	adds	r3, #1
 800651c:	181b      	adds	r3, r3, r0
 800651e:	106d      	asrs	r5, r5, #1
 8006520:	42ab      	cmp	r3, r5
 8006522:	d900      	bls.n	8006526 <__ssputs_r+0x3e>
 8006524:	001d      	movs	r5, r3
 8006526:	0553      	lsls	r3, r2, #21
 8006528:	d532      	bpl.n	8006590 <__ssputs_r+0xa8>
 800652a:	0029      	movs	r1, r5
 800652c:	0038      	movs	r0, r7
 800652e:	f7ff fe65 	bl	80061fc <_malloc_r>
 8006532:	1e06      	subs	r6, r0, #0
 8006534:	d109      	bne.n	800654a <__ssputs_r+0x62>
 8006536:	230c      	movs	r3, #12
 8006538:	603b      	str	r3, [r7, #0]
 800653a:	2340      	movs	r3, #64	; 0x40
 800653c:	2001      	movs	r0, #1
 800653e:	89a2      	ldrh	r2, [r4, #12]
 8006540:	4240      	negs	r0, r0
 8006542:	4313      	orrs	r3, r2
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	b005      	add	sp, #20
 8006548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654a:	9a02      	ldr	r2, [sp, #8]
 800654c:	6921      	ldr	r1, [r4, #16]
 800654e:	f7ff fe21 	bl	8006194 <memcpy>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <__ssputs_r+0xc0>)
 8006556:	401a      	ands	r2, r3
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	4313      	orrs	r3, r2
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	9b02      	ldr	r3, [sp, #8]
 8006560:	6126      	str	r6, [r4, #16]
 8006562:	18f6      	adds	r6, r6, r3
 8006564:	6026      	str	r6, [r4, #0]
 8006566:	6165      	str	r5, [r4, #20]
 8006568:	9e01      	ldr	r6, [sp, #4]
 800656a:	1aed      	subs	r5, r5, r3
 800656c:	60a5      	str	r5, [r4, #8]
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	429e      	cmp	r6, r3
 8006572:	d900      	bls.n	8006576 <__ssputs_r+0x8e>
 8006574:	9e01      	ldr	r6, [sp, #4]
 8006576:	0032      	movs	r2, r6
 8006578:	9903      	ldr	r1, [sp, #12]
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	f000 faa3 	bl	8006ac6 <memmove>
 8006580:	68a3      	ldr	r3, [r4, #8]
 8006582:	2000      	movs	r0, #0
 8006584:	1b9b      	subs	r3, r3, r6
 8006586:	60a3      	str	r3, [r4, #8]
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	199e      	adds	r6, r3, r6
 800658c:	6026      	str	r6, [r4, #0]
 800658e:	e7da      	b.n	8006546 <__ssputs_r+0x5e>
 8006590:	002a      	movs	r2, r5
 8006592:	0038      	movs	r0, r7
 8006594:	f000 faaa 	bl	8006aec <_realloc_r>
 8006598:	1e06      	subs	r6, r0, #0
 800659a:	d1e0      	bne.n	800655e <__ssputs_r+0x76>
 800659c:	0038      	movs	r0, r7
 800659e:	6921      	ldr	r1, [r4, #16]
 80065a0:	f7ff ff58 	bl	8006454 <_free_r>
 80065a4:	e7c7      	b.n	8006536 <__ssputs_r+0x4e>
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	fffffb7f 	.word	0xfffffb7f

080065ac <_svfiprintf_r>:
 80065ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ae:	b0a1      	sub	sp, #132	; 0x84
 80065b0:	9003      	str	r0, [sp, #12]
 80065b2:	001d      	movs	r5, r3
 80065b4:	898b      	ldrh	r3, [r1, #12]
 80065b6:	000f      	movs	r7, r1
 80065b8:	0016      	movs	r6, r2
 80065ba:	061b      	lsls	r3, r3, #24
 80065bc:	d511      	bpl.n	80065e2 <_svfiprintf_r+0x36>
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10e      	bne.n	80065e2 <_svfiprintf_r+0x36>
 80065c4:	2140      	movs	r1, #64	; 0x40
 80065c6:	f7ff fe19 	bl	80061fc <_malloc_r>
 80065ca:	6038      	str	r0, [r7, #0]
 80065cc:	6138      	str	r0, [r7, #16]
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d105      	bne.n	80065de <_svfiprintf_r+0x32>
 80065d2:	230c      	movs	r3, #12
 80065d4:	9a03      	ldr	r2, [sp, #12]
 80065d6:	3801      	subs	r0, #1
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	b021      	add	sp, #132	; 0x84
 80065dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065de:	2340      	movs	r3, #64	; 0x40
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	2300      	movs	r3, #0
 80065e4:	ac08      	add	r4, sp, #32
 80065e6:	6163      	str	r3, [r4, #20]
 80065e8:	3320      	adds	r3, #32
 80065ea:	7663      	strb	r3, [r4, #25]
 80065ec:	3310      	adds	r3, #16
 80065ee:	76a3      	strb	r3, [r4, #26]
 80065f0:	9507      	str	r5, [sp, #28]
 80065f2:	0035      	movs	r5, r6
 80065f4:	782b      	ldrb	r3, [r5, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <_svfiprintf_r+0x52>
 80065fa:	2b25      	cmp	r3, #37	; 0x25
 80065fc:	d147      	bne.n	800668e <_svfiprintf_r+0xe2>
 80065fe:	1bab      	subs	r3, r5, r6
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	42b5      	cmp	r5, r6
 8006604:	d00c      	beq.n	8006620 <_svfiprintf_r+0x74>
 8006606:	0032      	movs	r2, r6
 8006608:	0039      	movs	r1, r7
 800660a:	9803      	ldr	r0, [sp, #12]
 800660c:	f7ff ff6c 	bl	80064e8 <__ssputs_r>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d100      	bne.n	8006616 <_svfiprintf_r+0x6a>
 8006614:	e0ae      	b.n	8006774 <_svfiprintf_r+0x1c8>
 8006616:	6962      	ldr	r2, [r4, #20]
 8006618:	9b05      	ldr	r3, [sp, #20]
 800661a:	4694      	mov	ip, r2
 800661c:	4463      	add	r3, ip
 800661e:	6163      	str	r3, [r4, #20]
 8006620:	782b      	ldrb	r3, [r5, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d100      	bne.n	8006628 <_svfiprintf_r+0x7c>
 8006626:	e0a5      	b.n	8006774 <_svfiprintf_r+0x1c8>
 8006628:	2201      	movs	r2, #1
 800662a:	2300      	movs	r3, #0
 800662c:	4252      	negs	r2, r2
 800662e:	6062      	str	r2, [r4, #4]
 8006630:	a904      	add	r1, sp, #16
 8006632:	3254      	adds	r2, #84	; 0x54
 8006634:	1852      	adds	r2, r2, r1
 8006636:	1c6e      	adds	r6, r5, #1
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	60e3      	str	r3, [r4, #12]
 800663c:	60a3      	str	r3, [r4, #8]
 800663e:	7013      	strb	r3, [r2, #0]
 8006640:	65a3      	str	r3, [r4, #88]	; 0x58
 8006642:	2205      	movs	r2, #5
 8006644:	7831      	ldrb	r1, [r6, #0]
 8006646:	4854      	ldr	r0, [pc, #336]	; (8006798 <_svfiprintf_r+0x1ec>)
 8006648:	f000 fa32 	bl	8006ab0 <memchr>
 800664c:	1c75      	adds	r5, r6, #1
 800664e:	2800      	cmp	r0, #0
 8006650:	d11f      	bne.n	8006692 <_svfiprintf_r+0xe6>
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	06d3      	lsls	r3, r2, #27
 8006656:	d504      	bpl.n	8006662 <_svfiprintf_r+0xb6>
 8006658:	2353      	movs	r3, #83	; 0x53
 800665a:	a904      	add	r1, sp, #16
 800665c:	185b      	adds	r3, r3, r1
 800665e:	2120      	movs	r1, #32
 8006660:	7019      	strb	r1, [r3, #0]
 8006662:	0713      	lsls	r3, r2, #28
 8006664:	d504      	bpl.n	8006670 <_svfiprintf_r+0xc4>
 8006666:	2353      	movs	r3, #83	; 0x53
 8006668:	a904      	add	r1, sp, #16
 800666a:	185b      	adds	r3, r3, r1
 800666c:	212b      	movs	r1, #43	; 0x2b
 800666e:	7019      	strb	r1, [r3, #0]
 8006670:	7833      	ldrb	r3, [r6, #0]
 8006672:	2b2a      	cmp	r3, #42	; 0x2a
 8006674:	d016      	beq.n	80066a4 <_svfiprintf_r+0xf8>
 8006676:	0035      	movs	r5, r6
 8006678:	2100      	movs	r1, #0
 800667a:	200a      	movs	r0, #10
 800667c:	68e3      	ldr	r3, [r4, #12]
 800667e:	782a      	ldrb	r2, [r5, #0]
 8006680:	1c6e      	adds	r6, r5, #1
 8006682:	3a30      	subs	r2, #48	; 0x30
 8006684:	2a09      	cmp	r2, #9
 8006686:	d94e      	bls.n	8006726 <_svfiprintf_r+0x17a>
 8006688:	2900      	cmp	r1, #0
 800668a:	d111      	bne.n	80066b0 <_svfiprintf_r+0x104>
 800668c:	e017      	b.n	80066be <_svfiprintf_r+0x112>
 800668e:	3501      	adds	r5, #1
 8006690:	e7b0      	b.n	80065f4 <_svfiprintf_r+0x48>
 8006692:	4b41      	ldr	r3, [pc, #260]	; (8006798 <_svfiprintf_r+0x1ec>)
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	1ac0      	subs	r0, r0, r3
 8006698:	2301      	movs	r3, #1
 800669a:	4083      	lsls	r3, r0
 800669c:	4313      	orrs	r3, r2
 800669e:	002e      	movs	r6, r5
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	e7ce      	b.n	8006642 <_svfiprintf_r+0x96>
 80066a4:	9b07      	ldr	r3, [sp, #28]
 80066a6:	1d19      	adds	r1, r3, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	9107      	str	r1, [sp, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	db01      	blt.n	80066b4 <_svfiprintf_r+0x108>
 80066b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b2:	e004      	b.n	80066be <_svfiprintf_r+0x112>
 80066b4:	425b      	negs	r3, r3
 80066b6:	60e3      	str	r3, [r4, #12]
 80066b8:	2302      	movs	r3, #2
 80066ba:	4313      	orrs	r3, r2
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	782b      	ldrb	r3, [r5, #0]
 80066c0:	2b2e      	cmp	r3, #46	; 0x2e
 80066c2:	d10a      	bne.n	80066da <_svfiprintf_r+0x12e>
 80066c4:	786b      	ldrb	r3, [r5, #1]
 80066c6:	2b2a      	cmp	r3, #42	; 0x2a
 80066c8:	d135      	bne.n	8006736 <_svfiprintf_r+0x18a>
 80066ca:	9b07      	ldr	r3, [sp, #28]
 80066cc:	3502      	adds	r5, #2
 80066ce:	1d1a      	adds	r2, r3, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	9207      	str	r2, [sp, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	db2b      	blt.n	8006730 <_svfiprintf_r+0x184>
 80066d8:	9309      	str	r3, [sp, #36]	; 0x24
 80066da:	4e30      	ldr	r6, [pc, #192]	; (800679c <_svfiprintf_r+0x1f0>)
 80066dc:	2203      	movs	r2, #3
 80066de:	0030      	movs	r0, r6
 80066e0:	7829      	ldrb	r1, [r5, #0]
 80066e2:	f000 f9e5 	bl	8006ab0 <memchr>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d006      	beq.n	80066f8 <_svfiprintf_r+0x14c>
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	1b80      	subs	r0, r0, r6
 80066ee:	4083      	lsls	r3, r0
 80066f0:	6822      	ldr	r2, [r4, #0]
 80066f2:	3501      	adds	r5, #1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	6023      	str	r3, [r4, #0]
 80066f8:	7829      	ldrb	r1, [r5, #0]
 80066fa:	2206      	movs	r2, #6
 80066fc:	4828      	ldr	r0, [pc, #160]	; (80067a0 <_svfiprintf_r+0x1f4>)
 80066fe:	1c6e      	adds	r6, r5, #1
 8006700:	7621      	strb	r1, [r4, #24]
 8006702:	f000 f9d5 	bl	8006ab0 <memchr>
 8006706:	2800      	cmp	r0, #0
 8006708:	d03c      	beq.n	8006784 <_svfiprintf_r+0x1d8>
 800670a:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <_svfiprintf_r+0x1f8>)
 800670c:	2b00      	cmp	r3, #0
 800670e:	d125      	bne.n	800675c <_svfiprintf_r+0x1b0>
 8006710:	2207      	movs	r2, #7
 8006712:	9b07      	ldr	r3, [sp, #28]
 8006714:	3307      	adds	r3, #7
 8006716:	4393      	bics	r3, r2
 8006718:	3308      	adds	r3, #8
 800671a:	9307      	str	r3, [sp, #28]
 800671c:	6963      	ldr	r3, [r4, #20]
 800671e:	9a04      	ldr	r2, [sp, #16]
 8006720:	189b      	adds	r3, r3, r2
 8006722:	6163      	str	r3, [r4, #20]
 8006724:	e765      	b.n	80065f2 <_svfiprintf_r+0x46>
 8006726:	4343      	muls	r3, r0
 8006728:	0035      	movs	r5, r6
 800672a:	2101      	movs	r1, #1
 800672c:	189b      	adds	r3, r3, r2
 800672e:	e7a6      	b.n	800667e <_svfiprintf_r+0xd2>
 8006730:	2301      	movs	r3, #1
 8006732:	425b      	negs	r3, r3
 8006734:	e7d0      	b.n	80066d8 <_svfiprintf_r+0x12c>
 8006736:	2300      	movs	r3, #0
 8006738:	200a      	movs	r0, #10
 800673a:	001a      	movs	r2, r3
 800673c:	3501      	adds	r5, #1
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	7829      	ldrb	r1, [r5, #0]
 8006742:	1c6e      	adds	r6, r5, #1
 8006744:	3930      	subs	r1, #48	; 0x30
 8006746:	2909      	cmp	r1, #9
 8006748:	d903      	bls.n	8006752 <_svfiprintf_r+0x1a6>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0c5      	beq.n	80066da <_svfiprintf_r+0x12e>
 800674e:	9209      	str	r2, [sp, #36]	; 0x24
 8006750:	e7c3      	b.n	80066da <_svfiprintf_r+0x12e>
 8006752:	4342      	muls	r2, r0
 8006754:	0035      	movs	r5, r6
 8006756:	2301      	movs	r3, #1
 8006758:	1852      	adds	r2, r2, r1
 800675a:	e7f1      	b.n	8006740 <_svfiprintf_r+0x194>
 800675c:	ab07      	add	r3, sp, #28
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	003a      	movs	r2, r7
 8006762:	0021      	movs	r1, r4
 8006764:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <_svfiprintf_r+0x1fc>)
 8006766:	9803      	ldr	r0, [sp, #12]
 8006768:	e000      	b.n	800676c <_svfiprintf_r+0x1c0>
 800676a:	bf00      	nop
 800676c:	9004      	str	r0, [sp, #16]
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	3301      	adds	r3, #1
 8006772:	d1d3      	bne.n	800671c <_svfiprintf_r+0x170>
 8006774:	89bb      	ldrh	r3, [r7, #12]
 8006776:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006778:	065b      	lsls	r3, r3, #25
 800677a:	d400      	bmi.n	800677e <_svfiprintf_r+0x1d2>
 800677c:	e72d      	b.n	80065da <_svfiprintf_r+0x2e>
 800677e:	2001      	movs	r0, #1
 8006780:	4240      	negs	r0, r0
 8006782:	e72a      	b.n	80065da <_svfiprintf_r+0x2e>
 8006784:	ab07      	add	r3, sp, #28
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	003a      	movs	r2, r7
 800678a:	0021      	movs	r1, r4
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <_svfiprintf_r+0x1fc>)
 800678e:	9803      	ldr	r0, [sp, #12]
 8006790:	f000 f87c 	bl	800688c <_printf_i>
 8006794:	e7ea      	b.n	800676c <_svfiprintf_r+0x1c0>
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	08006f94 	.word	0x08006f94
 800679c:	08006f9a 	.word	0x08006f9a
 80067a0:	08006f9e 	.word	0x08006f9e
 80067a4:	00000000 	.word	0x00000000
 80067a8:	080064e9 	.word	0x080064e9

080067ac <_printf_common>:
 80067ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ae:	0015      	movs	r5, r2
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	688a      	ldr	r2, [r1, #8]
 80067b4:	690b      	ldr	r3, [r1, #16]
 80067b6:	000c      	movs	r4, r1
 80067b8:	9000      	str	r0, [sp, #0]
 80067ba:	4293      	cmp	r3, r2
 80067bc:	da00      	bge.n	80067c0 <_printf_common+0x14>
 80067be:	0013      	movs	r3, r2
 80067c0:	0022      	movs	r2, r4
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	3243      	adds	r2, #67	; 0x43
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	d001      	beq.n	80067d0 <_printf_common+0x24>
 80067cc:	3301      	adds	r3, #1
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	069b      	lsls	r3, r3, #26
 80067d4:	d502      	bpl.n	80067dc <_printf_common+0x30>
 80067d6:	682b      	ldr	r3, [r5, #0]
 80067d8:	3302      	adds	r3, #2
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	2306      	movs	r3, #6
 80067e0:	0017      	movs	r7, r2
 80067e2:	401f      	ands	r7, r3
 80067e4:	421a      	tst	r2, r3
 80067e6:	d027      	beq.n	8006838 <_printf_common+0x8c>
 80067e8:	0023      	movs	r3, r4
 80067ea:	3343      	adds	r3, #67	; 0x43
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	1e5a      	subs	r2, r3, #1
 80067f0:	4193      	sbcs	r3, r2
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	0692      	lsls	r2, r2, #26
 80067f6:	d430      	bmi.n	800685a <_printf_common+0xae>
 80067f8:	0022      	movs	r2, r4
 80067fa:	9901      	ldr	r1, [sp, #4]
 80067fc:	9800      	ldr	r0, [sp, #0]
 80067fe:	9e08      	ldr	r6, [sp, #32]
 8006800:	3243      	adds	r2, #67	; 0x43
 8006802:	47b0      	blx	r6
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d025      	beq.n	8006854 <_printf_common+0xa8>
 8006808:	2306      	movs	r3, #6
 800680a:	6820      	ldr	r0, [r4, #0]
 800680c:	682a      	ldr	r2, [r5, #0]
 800680e:	68e1      	ldr	r1, [r4, #12]
 8006810:	2500      	movs	r5, #0
 8006812:	4003      	ands	r3, r0
 8006814:	2b04      	cmp	r3, #4
 8006816:	d103      	bne.n	8006820 <_printf_common+0x74>
 8006818:	1a8d      	subs	r5, r1, r2
 800681a:	43eb      	mvns	r3, r5
 800681c:	17db      	asrs	r3, r3, #31
 800681e:	401d      	ands	r5, r3
 8006820:	68a3      	ldr	r3, [r4, #8]
 8006822:	6922      	ldr	r2, [r4, #16]
 8006824:	4293      	cmp	r3, r2
 8006826:	dd01      	ble.n	800682c <_printf_common+0x80>
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	18ed      	adds	r5, r5, r3
 800682c:	2700      	movs	r7, #0
 800682e:	42bd      	cmp	r5, r7
 8006830:	d120      	bne.n	8006874 <_printf_common+0xc8>
 8006832:	2000      	movs	r0, #0
 8006834:	e010      	b.n	8006858 <_printf_common+0xac>
 8006836:	3701      	adds	r7, #1
 8006838:	68e3      	ldr	r3, [r4, #12]
 800683a:	682a      	ldr	r2, [r5, #0]
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	42bb      	cmp	r3, r7
 8006840:	ddd2      	ble.n	80067e8 <_printf_common+0x3c>
 8006842:	0022      	movs	r2, r4
 8006844:	2301      	movs	r3, #1
 8006846:	9901      	ldr	r1, [sp, #4]
 8006848:	9800      	ldr	r0, [sp, #0]
 800684a:	9e08      	ldr	r6, [sp, #32]
 800684c:	3219      	adds	r2, #25
 800684e:	47b0      	blx	r6
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d1f0      	bne.n	8006836 <_printf_common+0x8a>
 8006854:	2001      	movs	r0, #1
 8006856:	4240      	negs	r0, r0
 8006858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800685a:	2030      	movs	r0, #48	; 0x30
 800685c:	18e1      	adds	r1, r4, r3
 800685e:	3143      	adds	r1, #67	; 0x43
 8006860:	7008      	strb	r0, [r1, #0]
 8006862:	0021      	movs	r1, r4
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	3145      	adds	r1, #69	; 0x45
 8006868:	7809      	ldrb	r1, [r1, #0]
 800686a:	18a2      	adds	r2, r4, r2
 800686c:	3243      	adds	r2, #67	; 0x43
 800686e:	3302      	adds	r3, #2
 8006870:	7011      	strb	r1, [r2, #0]
 8006872:	e7c1      	b.n	80067f8 <_printf_common+0x4c>
 8006874:	0022      	movs	r2, r4
 8006876:	2301      	movs	r3, #1
 8006878:	9901      	ldr	r1, [sp, #4]
 800687a:	9800      	ldr	r0, [sp, #0]
 800687c:	9e08      	ldr	r6, [sp, #32]
 800687e:	321a      	adds	r2, #26
 8006880:	47b0      	blx	r6
 8006882:	1c43      	adds	r3, r0, #1
 8006884:	d0e6      	beq.n	8006854 <_printf_common+0xa8>
 8006886:	3701      	adds	r7, #1
 8006888:	e7d1      	b.n	800682e <_printf_common+0x82>
	...

0800688c <_printf_i>:
 800688c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688e:	b08b      	sub	sp, #44	; 0x2c
 8006890:	9206      	str	r2, [sp, #24]
 8006892:	000a      	movs	r2, r1
 8006894:	3243      	adds	r2, #67	; 0x43
 8006896:	9307      	str	r3, [sp, #28]
 8006898:	9005      	str	r0, [sp, #20]
 800689a:	9204      	str	r2, [sp, #16]
 800689c:	7e0a      	ldrb	r2, [r1, #24]
 800689e:	000c      	movs	r4, r1
 80068a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068a2:	2a78      	cmp	r2, #120	; 0x78
 80068a4:	d807      	bhi.n	80068b6 <_printf_i+0x2a>
 80068a6:	2a62      	cmp	r2, #98	; 0x62
 80068a8:	d809      	bhi.n	80068be <_printf_i+0x32>
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	d100      	bne.n	80068b0 <_printf_i+0x24>
 80068ae:	e0c1      	b.n	8006a34 <_printf_i+0x1a8>
 80068b0:	2a58      	cmp	r2, #88	; 0x58
 80068b2:	d100      	bne.n	80068b6 <_printf_i+0x2a>
 80068b4:	e08c      	b.n	80069d0 <_printf_i+0x144>
 80068b6:	0026      	movs	r6, r4
 80068b8:	3642      	adds	r6, #66	; 0x42
 80068ba:	7032      	strb	r2, [r6, #0]
 80068bc:	e022      	b.n	8006904 <_printf_i+0x78>
 80068be:	0010      	movs	r0, r2
 80068c0:	3863      	subs	r0, #99	; 0x63
 80068c2:	2815      	cmp	r0, #21
 80068c4:	d8f7      	bhi.n	80068b6 <_printf_i+0x2a>
 80068c6:	f7f9 fc1f 	bl	8000108 <__gnu_thumb1_case_shi>
 80068ca:	0016      	.short	0x0016
 80068cc:	fff6001f 	.word	0xfff6001f
 80068d0:	fff6fff6 	.word	0xfff6fff6
 80068d4:	001ffff6 	.word	0x001ffff6
 80068d8:	fff6fff6 	.word	0xfff6fff6
 80068dc:	fff6fff6 	.word	0xfff6fff6
 80068e0:	003600a8 	.word	0x003600a8
 80068e4:	fff6009a 	.word	0xfff6009a
 80068e8:	00b9fff6 	.word	0x00b9fff6
 80068ec:	0036fff6 	.word	0x0036fff6
 80068f0:	fff6fff6 	.word	0xfff6fff6
 80068f4:	009e      	.short	0x009e
 80068f6:	0026      	movs	r6, r4
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	3642      	adds	r6, #66	; 0x42
 80068fc:	1d11      	adds	r1, r2, #4
 80068fe:	6019      	str	r1, [r3, #0]
 8006900:	6813      	ldr	r3, [r2, #0]
 8006902:	7033      	strb	r3, [r6, #0]
 8006904:	2301      	movs	r3, #1
 8006906:	e0a7      	b.n	8006a58 <_printf_i+0x1cc>
 8006908:	6808      	ldr	r0, [r1, #0]
 800690a:	6819      	ldr	r1, [r3, #0]
 800690c:	1d0a      	adds	r2, r1, #4
 800690e:	0605      	lsls	r5, r0, #24
 8006910:	d50b      	bpl.n	800692a <_printf_i+0x9e>
 8006912:	680d      	ldr	r5, [r1, #0]
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	2d00      	cmp	r5, #0
 8006918:	da03      	bge.n	8006922 <_printf_i+0x96>
 800691a:	232d      	movs	r3, #45	; 0x2d
 800691c:	9a04      	ldr	r2, [sp, #16]
 800691e:	426d      	negs	r5, r5
 8006920:	7013      	strb	r3, [r2, #0]
 8006922:	4b61      	ldr	r3, [pc, #388]	; (8006aa8 <_printf_i+0x21c>)
 8006924:	270a      	movs	r7, #10
 8006926:	9303      	str	r3, [sp, #12]
 8006928:	e01b      	b.n	8006962 <_printf_i+0xd6>
 800692a:	680d      	ldr	r5, [r1, #0]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	0641      	lsls	r1, r0, #25
 8006930:	d5f1      	bpl.n	8006916 <_printf_i+0x8a>
 8006932:	b22d      	sxth	r5, r5
 8006934:	e7ef      	b.n	8006916 <_printf_i+0x8a>
 8006936:	680d      	ldr	r5, [r1, #0]
 8006938:	6819      	ldr	r1, [r3, #0]
 800693a:	1d08      	adds	r0, r1, #4
 800693c:	6018      	str	r0, [r3, #0]
 800693e:	062e      	lsls	r6, r5, #24
 8006940:	d501      	bpl.n	8006946 <_printf_i+0xba>
 8006942:	680d      	ldr	r5, [r1, #0]
 8006944:	e003      	b.n	800694e <_printf_i+0xc2>
 8006946:	066d      	lsls	r5, r5, #25
 8006948:	d5fb      	bpl.n	8006942 <_printf_i+0xb6>
 800694a:	680d      	ldr	r5, [r1, #0]
 800694c:	b2ad      	uxth	r5, r5
 800694e:	4b56      	ldr	r3, [pc, #344]	; (8006aa8 <_printf_i+0x21c>)
 8006950:	2708      	movs	r7, #8
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	2a6f      	cmp	r2, #111	; 0x6f
 8006956:	d000      	beq.n	800695a <_printf_i+0xce>
 8006958:	3702      	adds	r7, #2
 800695a:	0023      	movs	r3, r4
 800695c:	2200      	movs	r2, #0
 800695e:	3343      	adds	r3, #67	; 0x43
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	6863      	ldr	r3, [r4, #4]
 8006964:	60a3      	str	r3, [r4, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	db03      	blt.n	8006972 <_printf_i+0xe6>
 800696a:	2204      	movs	r2, #4
 800696c:	6821      	ldr	r1, [r4, #0]
 800696e:	4391      	bics	r1, r2
 8006970:	6021      	str	r1, [r4, #0]
 8006972:	2d00      	cmp	r5, #0
 8006974:	d102      	bne.n	800697c <_printf_i+0xf0>
 8006976:	9e04      	ldr	r6, [sp, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00c      	beq.n	8006996 <_printf_i+0x10a>
 800697c:	9e04      	ldr	r6, [sp, #16]
 800697e:	0028      	movs	r0, r5
 8006980:	0039      	movs	r1, r7
 8006982:	f7f9 fc51 	bl	8000228 <__aeabi_uidivmod>
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	3e01      	subs	r6, #1
 800698a:	5c5b      	ldrb	r3, [r3, r1]
 800698c:	7033      	strb	r3, [r6, #0]
 800698e:	002b      	movs	r3, r5
 8006990:	0005      	movs	r5, r0
 8006992:	429f      	cmp	r7, r3
 8006994:	d9f3      	bls.n	800697e <_printf_i+0xf2>
 8006996:	2f08      	cmp	r7, #8
 8006998:	d109      	bne.n	80069ae <_printf_i+0x122>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	07db      	lsls	r3, r3, #31
 800699e:	d506      	bpl.n	80069ae <_printf_i+0x122>
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	6922      	ldr	r2, [r4, #16]
 80069a4:	4293      	cmp	r3, r2
 80069a6:	dc02      	bgt.n	80069ae <_printf_i+0x122>
 80069a8:	2330      	movs	r3, #48	; 0x30
 80069aa:	3e01      	subs	r6, #1
 80069ac:	7033      	strb	r3, [r6, #0]
 80069ae:	9b04      	ldr	r3, [sp, #16]
 80069b0:	1b9b      	subs	r3, r3, r6
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	0021      	movs	r1, r4
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	9805      	ldr	r0, [sp, #20]
 80069bc:	9b06      	ldr	r3, [sp, #24]
 80069be:	aa09      	add	r2, sp, #36	; 0x24
 80069c0:	f7ff fef4 	bl	80067ac <_printf_common>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d14c      	bne.n	8006a62 <_printf_i+0x1d6>
 80069c8:	2001      	movs	r0, #1
 80069ca:	4240      	negs	r0, r0
 80069cc:	b00b      	add	sp, #44	; 0x2c
 80069ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d0:	3145      	adds	r1, #69	; 0x45
 80069d2:	700a      	strb	r2, [r1, #0]
 80069d4:	4a34      	ldr	r2, [pc, #208]	; (8006aa8 <_printf_i+0x21c>)
 80069d6:	9203      	str	r2, [sp, #12]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	6821      	ldr	r1, [r4, #0]
 80069dc:	ca20      	ldmia	r2!, {r5}
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	0608      	lsls	r0, r1, #24
 80069e2:	d516      	bpl.n	8006a12 <_printf_i+0x186>
 80069e4:	07cb      	lsls	r3, r1, #31
 80069e6:	d502      	bpl.n	80069ee <_printf_i+0x162>
 80069e8:	2320      	movs	r3, #32
 80069ea:	4319      	orrs	r1, r3
 80069ec:	6021      	str	r1, [r4, #0]
 80069ee:	2710      	movs	r7, #16
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	d1b2      	bne.n	800695a <_printf_i+0xce>
 80069f4:	2320      	movs	r3, #32
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	439a      	bics	r2, r3
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	e7ad      	b.n	800695a <_printf_i+0xce>
 80069fe:	2220      	movs	r2, #32
 8006a00:	6809      	ldr	r1, [r1, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	6022      	str	r2, [r4, #0]
 8006a06:	0022      	movs	r2, r4
 8006a08:	2178      	movs	r1, #120	; 0x78
 8006a0a:	3245      	adds	r2, #69	; 0x45
 8006a0c:	7011      	strb	r1, [r2, #0]
 8006a0e:	4a27      	ldr	r2, [pc, #156]	; (8006aac <_printf_i+0x220>)
 8006a10:	e7e1      	b.n	80069d6 <_printf_i+0x14a>
 8006a12:	0648      	lsls	r0, r1, #25
 8006a14:	d5e6      	bpl.n	80069e4 <_printf_i+0x158>
 8006a16:	b2ad      	uxth	r5, r5
 8006a18:	e7e4      	b.n	80069e4 <_printf_i+0x158>
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	680d      	ldr	r5, [r1, #0]
 8006a1e:	1d10      	adds	r0, r2, #4
 8006a20:	6949      	ldr	r1, [r1, #20]
 8006a22:	6018      	str	r0, [r3, #0]
 8006a24:	6813      	ldr	r3, [r2, #0]
 8006a26:	062e      	lsls	r6, r5, #24
 8006a28:	d501      	bpl.n	8006a2e <_printf_i+0x1a2>
 8006a2a:	6019      	str	r1, [r3, #0]
 8006a2c:	e002      	b.n	8006a34 <_printf_i+0x1a8>
 8006a2e:	066d      	lsls	r5, r5, #25
 8006a30:	d5fb      	bpl.n	8006a2a <_printf_i+0x19e>
 8006a32:	8019      	strh	r1, [r3, #0]
 8006a34:	2300      	movs	r3, #0
 8006a36:	9e04      	ldr	r6, [sp, #16]
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	e7bb      	b.n	80069b4 <_printf_i+0x128>
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	1d11      	adds	r1, r2, #4
 8006a40:	6019      	str	r1, [r3, #0]
 8006a42:	6816      	ldr	r6, [r2, #0]
 8006a44:	2100      	movs	r1, #0
 8006a46:	0030      	movs	r0, r6
 8006a48:	6862      	ldr	r2, [r4, #4]
 8006a4a:	f000 f831 	bl	8006ab0 <memchr>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d001      	beq.n	8006a56 <_printf_i+0x1ca>
 8006a52:	1b80      	subs	r0, r0, r6
 8006a54:	6060      	str	r0, [r4, #4]
 8006a56:	6863      	ldr	r3, [r4, #4]
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9a04      	ldr	r2, [sp, #16]
 8006a5e:	7013      	strb	r3, [r2, #0]
 8006a60:	e7a8      	b.n	80069b4 <_printf_i+0x128>
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	0032      	movs	r2, r6
 8006a66:	9906      	ldr	r1, [sp, #24]
 8006a68:	9805      	ldr	r0, [sp, #20]
 8006a6a:	9d07      	ldr	r5, [sp, #28]
 8006a6c:	47a8      	blx	r5
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	d0aa      	beq.n	80069c8 <_printf_i+0x13c>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	079b      	lsls	r3, r3, #30
 8006a76:	d415      	bmi.n	8006aa4 <_printf_i+0x218>
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	68e0      	ldr	r0, [r4, #12]
 8006a7c:	4298      	cmp	r0, r3
 8006a7e:	daa5      	bge.n	80069cc <_printf_i+0x140>
 8006a80:	0018      	movs	r0, r3
 8006a82:	e7a3      	b.n	80069cc <_printf_i+0x140>
 8006a84:	0022      	movs	r2, r4
 8006a86:	2301      	movs	r3, #1
 8006a88:	9906      	ldr	r1, [sp, #24]
 8006a8a:	9805      	ldr	r0, [sp, #20]
 8006a8c:	9e07      	ldr	r6, [sp, #28]
 8006a8e:	3219      	adds	r2, #25
 8006a90:	47b0      	blx	r6
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d098      	beq.n	80069c8 <_printf_i+0x13c>
 8006a96:	3501      	adds	r5, #1
 8006a98:	68e3      	ldr	r3, [r4, #12]
 8006a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	42ab      	cmp	r3, r5
 8006aa0:	dcf0      	bgt.n	8006a84 <_printf_i+0x1f8>
 8006aa2:	e7e9      	b.n	8006a78 <_printf_i+0x1ec>
 8006aa4:	2500      	movs	r5, #0
 8006aa6:	e7f7      	b.n	8006a98 <_printf_i+0x20c>
 8006aa8:	08006fa5 	.word	0x08006fa5
 8006aac:	08006fb6 	.word	0x08006fb6

08006ab0 <memchr>:
 8006ab0:	b2c9      	uxtb	r1, r1
 8006ab2:	1882      	adds	r2, r0, r2
 8006ab4:	4290      	cmp	r0, r2
 8006ab6:	d101      	bne.n	8006abc <memchr+0xc>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	4770      	bx	lr
 8006abc:	7803      	ldrb	r3, [r0, #0]
 8006abe:	428b      	cmp	r3, r1
 8006ac0:	d0fb      	beq.n	8006aba <memchr+0xa>
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	e7f6      	b.n	8006ab4 <memchr+0x4>

08006ac6 <memmove>:
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4288      	cmp	r0, r1
 8006aca:	d902      	bls.n	8006ad2 <memmove+0xc>
 8006acc:	188b      	adds	r3, r1, r2
 8006ace:	4298      	cmp	r0, r3
 8006ad0:	d303      	bcc.n	8006ada <memmove+0x14>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e007      	b.n	8006ae6 <memmove+0x20>
 8006ad6:	5c8b      	ldrb	r3, [r1, r2]
 8006ad8:	5483      	strb	r3, [r0, r2]
 8006ada:	3a01      	subs	r2, #1
 8006adc:	d2fb      	bcs.n	8006ad6 <memmove+0x10>
 8006ade:	bd10      	pop	{r4, pc}
 8006ae0:	5ccc      	ldrb	r4, [r1, r3]
 8006ae2:	54c4      	strb	r4, [r0, r3]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d1fa      	bne.n	8006ae0 <memmove+0x1a>
 8006aea:	e7f8      	b.n	8006ade <memmove+0x18>

08006aec <_realloc_r>:
 8006aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aee:	0007      	movs	r7, r0
 8006af0:	000e      	movs	r6, r1
 8006af2:	0014      	movs	r4, r2
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d105      	bne.n	8006b04 <_realloc_r+0x18>
 8006af8:	0011      	movs	r1, r2
 8006afa:	f7ff fb7f 	bl	80061fc <_malloc_r>
 8006afe:	0005      	movs	r5, r0
 8006b00:	0028      	movs	r0, r5
 8006b02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b04:	2a00      	cmp	r2, #0
 8006b06:	d103      	bne.n	8006b10 <_realloc_r+0x24>
 8006b08:	f7ff fca4 	bl	8006454 <_free_r>
 8006b0c:	0025      	movs	r5, r4
 8006b0e:	e7f7      	b.n	8006b00 <_realloc_r+0x14>
 8006b10:	f000 f81b 	bl	8006b4a <_malloc_usable_size_r>
 8006b14:	9001      	str	r0, [sp, #4]
 8006b16:	4284      	cmp	r4, r0
 8006b18:	d803      	bhi.n	8006b22 <_realloc_r+0x36>
 8006b1a:	0035      	movs	r5, r6
 8006b1c:	0843      	lsrs	r3, r0, #1
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	d3ee      	bcc.n	8006b00 <_realloc_r+0x14>
 8006b22:	0021      	movs	r1, r4
 8006b24:	0038      	movs	r0, r7
 8006b26:	f7ff fb69 	bl	80061fc <_malloc_r>
 8006b2a:	1e05      	subs	r5, r0, #0
 8006b2c:	d0e8      	beq.n	8006b00 <_realloc_r+0x14>
 8006b2e:	9b01      	ldr	r3, [sp, #4]
 8006b30:	0022      	movs	r2, r4
 8006b32:	429c      	cmp	r4, r3
 8006b34:	d900      	bls.n	8006b38 <_realloc_r+0x4c>
 8006b36:	001a      	movs	r2, r3
 8006b38:	0031      	movs	r1, r6
 8006b3a:	0028      	movs	r0, r5
 8006b3c:	f7ff fb2a 	bl	8006194 <memcpy>
 8006b40:	0031      	movs	r1, r6
 8006b42:	0038      	movs	r0, r7
 8006b44:	f7ff fc86 	bl	8006454 <_free_r>
 8006b48:	e7da      	b.n	8006b00 <_realloc_r+0x14>

08006b4a <_malloc_usable_size_r>:
 8006b4a:	1f0b      	subs	r3, r1, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	1f18      	subs	r0, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da01      	bge.n	8006b58 <_malloc_usable_size_r+0xe>
 8006b54:	580b      	ldr	r3, [r1, r0]
 8006b56:	18c0      	adds	r0, r0, r3
 8006b58:	4770      	bx	lr
	...

08006b5c <_init>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr

08006b68 <_fini>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6e:	bc08      	pop	{r3}
 8006b70:	469e      	mov	lr, r3
 8006b72:	4770      	bx	lr
